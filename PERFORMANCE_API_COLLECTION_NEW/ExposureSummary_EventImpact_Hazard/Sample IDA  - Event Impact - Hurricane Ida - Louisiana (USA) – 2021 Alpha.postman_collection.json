{
	"info": {
		"_postman_id": "49376d1e-370c-494c-b7ad-c699d887adf6",
		"name": "Sample IDA  - Event Impact : Hurricane Ida - Louisiana (USA) – 2021 Alpha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14426843"
	},
	"item": [
		{
			"name": "Authentication and Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();  \r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-forwarded-for",
						"value": "152.58.201.217",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"email\": \"nkumar@eigenrisk.com\",\r\n  \"apiKey\": \"789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/apiLogin",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"apiLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set analysis - Event Impact Analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function() {\r",
							"    console.log(\"Next API Call After 3 Minutes \")\r",
							"}, 180000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Exposure\": {\r\n        \"id\": 24226,\r\n        \"object_sub_type\": \"portfolio\"\r\n    },\r\n    \"analysisObject\": [\r\n        {\r\n            \"CurrencyCode\": \"USD\",\r\n            \"IncludeAllContracts\": true,\r\n            \"big_tiff_flag\": true,\r\n            \"damageAdjustment\": 1,\r\n            \"ValuationTypeCode\": 1,\r\n            \"DamageFunctionID\": 100042,\r\n            \"ExposureFilterSets\": {\r\n                \"AssetModel\": \"ERBASICS\",\r\n                \"FilterList\": [\r\n                    {\r\n                        \"AndOr\": \"AND\",\r\n                        \"FilterList\": [\r\n                            {\r\n                                \"AssetType\": \"Site\",\r\n                                \"Attribute\": \"Cause Of Loss\",\r\n                                \"Operator\": \"EQ\",\r\n                                \"Value\": \"FLXX\",\r\n                                \"AndOr\": \"AND\"\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            \"quantile\": 50,\r\n            \"Events\": [\r\n                {\r\n                    \"EventID\": 1260567,\r\n                    \"SeverityModelID\": 477\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/load-exposure",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"load-exposure"
					]
				}
			},
			"response": []
		},
		{
			"name": "Exposure Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Reusable Function for Exact Match Validation\r",
							"function validateExactMatch(fieldName, expectedValue, actualValue) {\r",
							"    pm.test(`Validating ABC Insurance Co with Event impact ${fieldName}`, () => {\r",
							"        pm.expect(actualValue).to.eql(expectedValue); // Exact Match Validation\r",
							"        console.log(`${fieldName} Value is matching. Expected: ${expectedValue}, Current: ${actualValue}`);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Reusable Function for Threshold Validation\r",
							"function validateWithThreshold(fieldName, expectedValue, actualValue, threshold = 1) {\r",
							"    pm.test(`Validating ABC Insurance Co with Event impact ${fieldName}`, () => {\r",
							"        const difference = Math.abs(expectedValue - actualValue);\r",
							"        console.log(`Expected ${fieldName}: ${expectedValue}`);\r",
							"        console.log(`Actual ${fieldName}: ${actualValue}`);\r",
							"        console.log(`Difference: ${difference}`);\r",
							"\r",
							"        if (difference > threshold) {\r",
							"            throw new Error(`${fieldName} mismatch: Difference of ${difference} is greater than the allowed threshold of ${threshold}.`);\r",
							"        } else {\r",
							"            console.log(`${fieldName} is within the acceptable range. No errors.`);\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"// Fetching response JSON\r",
							"const responseJson = pm.response.json();\r",
							"const analysis = responseJson.Value.Analysis0;\r",
							"\r",
							"// Exact Match Validations\r",
							"validateExactMatch(\"Asset Count\", 3, analysis[\"Asset Count\"]);\r",
							"validateExactMatch(\"Contracts Count\", 2, analysis[\"#Contracts\"]);\r",
							"\r",
							"\r",
							"// Threshold-Based Validations\r",
							"validateWithThreshold(\"TIV\", 7839186.023, analysis[\"TIV\"]);\r",
							"validateWithThreshold(\"Gross Exposed Limit\", 1086968.0193811655, analysis[\"Gross Exposed Limit\"]);\r",
							"validateWithThreshold(\"Gross Loss\", 258407.07310869414, analysis[\"Gross Loss\"]);\r",
							"validateWithThreshold(\"Net Pre Cat Exposed Limit\", 1086968.0193811655, analysis[\"Net Pre Cat Exposed Limit\"]);\r",
							"validateWithThreshold(\"Net Pre Cat Loss\", 258407.07310869414, analysis[\"Net Pre Cat Loss\"]);\r",
							"validateWithThreshold(\"Net of Fac Exposed Limit\", 1086968.0193811655, analysis[\"Net of Fac Exposed Limit\"]);\r",
							"validateWithThreshold(\"Net of Fac Loss\", 258407.07310869414, analysis[\"Net of Fac Loss\"]);\r",
							"validateWithThreshold(\"Fac Exposed Limit\", 0, analysis[\"Fac Exposed Limit\"]);\r",
							"validateWithThreshold(\"Fac loss\", 0, analysis[\"Fac loss\"]);\r",
							"validateWithThreshold(\"Treaty Exposed Limit\", 0, analysis[\"Treaty Exposed Limit\"]);\r",
							"validateWithThreshold(\"Treaty Loss\", 0, analysis[\"Treaty Loss\"]);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"measures\": [\r\n        \"Asset Count\",\r\n        \"#Contracts\",\r\n        \"TIV\",\r\n        \"Gross Exposed Limit\",\r\n        \"GroundUpLoss\",\r\n        \"ContractLoss_Value All Types_GL\",\r\n        \"Net Pre Cat Exposed Limit\",\r\n        \"Net Pre Cat Loss\",\r\n        \"Net of Fac Exposed Limit\",\r\n        \"Net of Fac Loss\",\r\n        \"Fac Exposed Limit\",\r\n        \"Fac loss\",\r\n        \"Treaty Exposed Limit\",\r\n        \"Treaty Loss\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/summary",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"summary"
					]
				}
			},
			"response": []
		},
		{
			"name": "Top 20 Assets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"console.log(\"-------- TOP N First Row Value --------\")\r",
							"\r",
							"// Validating Asset Name Of 1st Row, Flooded Piggly Wiggly - ICEYE\r",
							"pm.test(\"Validating Asset Name Of 1st Row, Flooded Piggly Wiggly - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[0][\"Asset Name\"]).to.eql(\"Flooded Piggly Wiggly - ICEYE\");\r",
							"  console.log(\"Asset Name Miss Matching In 1st Row Expected: Flooded Piggly Wiggly - ICEYE Current:\", responseJson.Value.Analysis0[0][\"Asset Name\"]);\r",
							"});\r",
							"\r",
							"// Validating Asset Number Of 1st Row, Flooded Piggly Wiggly - ICEYE\r",
							"pm.test(\"Validating Asset Number Of 1st Row, Flooded Piggly Wiggly - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[0][\"Asset Number\"]).to.eql(2249459);\r",
							"  console.log(\"Asset Number Miss Matching In 1st Row Expected: 2249459 Current:\", responseJson.Value.Analysis0[0][\"Asset Number\"]);\r",
							"});\r",
							"\r",
							"// Validating Contract Number Of 1st Row, Flooded Piggly Wiggly - ICEYE\r",
							"pm.test(\"Validating Contract Number Of 1st Row, Flooded Piggly Wiggly - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[0][\"Contract Number\"]).to.eql(\"6991\");\r",
							"  console.log(\"Contract Number Miss Matching In 1st Row Expected: 6991 Current:\", responseJson.Value.Analysis0[0][\"Contract Number\"]);\r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Of 1st Row\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Of 1st Row\", () => {\r",
							"  const expectedContractLoss_EL = 1058000.0191926956;\r",
							"  const actualContractLoss_EL = responseJson.Value.Analysis0[0][\"ContractLoss_Value All Types_EL\"];\r",
							"  const difference = Math.abs(expectedContractLoss_EL - actualContractLoss_EL);\r",
							"  console.log(\"Expected ContractLoss_Value All Types_EL: \", expectedContractLoss_EL);\r",
							"  console.log(\"Actual ContractLoss_Value All Types_EL: \", actualContractLoss_EL);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`ContractLoss_Value All Types_EL mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"ContractLoss_Value All Types_EL is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Of 1st Row\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Of 1st Row\", () => {\r",
							"  const expectedContractLoss_GL = 258407.07310869414;\r",
							"  const actualContractLoss_GL = responseJson.Value.Analysis0[0][\"ContractLoss_Value All Types_GL\"];\r",
							"  const difference = Math.abs(expectedContractLoss_GL - actualContractLoss_GL);\r",
							"  console.log(\"Expected ContractLoss_Value All Types_GL: \", expectedContractLoss_GL);\r",
							"  console.log(\"Actual ContractLoss_Value All Types_GL: \", actualContractLoss_GL);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`ContractLoss_Value All Types_GL mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"ContractLoss_Value All Types_GL is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating GroundUpLoss Of 1st Row\r",
							"pm.test(\"Validating GroundUpLoss Of 1st Row\", () => {\r",
							"  const expectedGroundUpLoss = 1132708.993134997;\r",
							"  const actualGroundUpLoss = responseJson.Value.Analysis0[0][\"GroundUpLoss\"];\r",
							"  const difference = Math.abs(expectedGroundUpLoss - actualGroundUpLoss);\r",
							"  console.log(\"Expected GroundUpLoss: \", expectedGroundUpLoss);\r",
							"  console.log(\"Actual GroundUpLoss: \", actualGroundUpLoss);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`GroundUpLoss mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"GroundUpLoss is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Intensity Of 1st Row\r",
							"pm.test(\"Validating Intensity Of 1st Row\", () => {\r",
							"  const expectedIntensity = 3.280883312225342;\r",
							"  const actualIntensity = responseJson.Value.Analysis0[0][\"Intensity\"];\r",
							"  const difference = Math.abs(expectedIntensity - actualIntensity);\r",
							"  console.log(\"Expected Intensity: \", expectedIntensity);\r",
							"  console.log(\"Actual Intensity: \", actualIntensity);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Intensity mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Intensity is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating TIV Of 1st Row\r",
							"pm.test(\"Validating TIV Of 1st Row\", () => {\r",
							"  const expectedTIV = 4939186.023;\r",
							"  const actualTIV = responseJson.Value.Analysis0[0][\"TIV\"];\r",
							"  const difference = Math.abs(expectedTIV - actualTIV);\r",
							"  console.log(\"Expected TIV: \", expectedTIV);\r",
							"  console.log(\"Actual TIV: \", actualTIV);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`TIV mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"TIV is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net Pre Cat Exposed Limit Of 1st Row\r",
							"pm.test(\"Validating Net Pre Cat Exposed Limit Of 1st Row\", () => {\r",
							"  const expectedNetPreCatExposedLimit = 1058000.0191926956;\r",
							"  const actualNetPreCatExposedLimit = responseJson.Value.Analysis0[0][\"Net Pre Cat Exposed Limit\"];\r",
							"  const difference = Math.abs(expectedNetPreCatExposedLimit - actualNetPreCatExposedLimit);\r",
							"  console.log(\"Expected Net Pre Cat Exposed Limit: \", expectedNetPreCatExposedLimit);\r",
							"  console.log(\"Actual Net Pre Cat Exposed Limit: \", actualNetPreCatExposedLimit);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net Pre Cat Exposed Limit mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net Pre Cat Exposed Limit is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net Pre Cat Loss Of 1st Row\r",
							"pm.test(\"Validating Net Pre Cat Loss Of 1st Row\", () => {\r",
							"  const expectedNetPreCatLoss = 258407.07310869414;\r",
							"  const actualNetPreCatLoss = responseJson.Value.Analysis0[0][\"Net Pre Cat Loss\"];\r",
							"  const difference = Math.abs(expectedNetPreCatLoss - actualNetPreCatLoss);\r",
							"  console.log(\"Expected Net Pre Cat Loss: \", expectedNetPreCatLoss);\r",
							"  console.log(\"Actual Net Pre Cat Loss: \", actualNetPreCatLoss);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net Pre Cat Loss mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net Pre Cat Loss is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net of Fac Exposed Limit Of 1st Row\r",
							"pm.test(\"Validating Net of Fac Exposed Limit Of 1st Row\", () => {\r",
							"  const expectedNetOfFacExposedLimit = 1058000.0191926956;\r",
							"  const actualNetOfFacExposedLimit = responseJson.Value.Analysis0[0][\"Net of Fac Exposed Limit\"];\r",
							"  const difference = Math.abs(expectedNetOfFacExposedLimit - actualNetOfFacExposedLimit);\r",
							"  console.log(\"Expected Net of Fac Exposed Limit: \", expectedNetOfFacExposedLimit);\r",
							"  console.log(\"Actual Net of Fac Exposed Limit: \", actualNetOfFacExposedLimit);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net of Fac Exposed Limit mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net of Fac Exposed Limit is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Treaty Exposed Limit Of 1st Row\r",
							"pm.test(\"Validating Treaty Exposed Limit Of 1st Row\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[0][\"Treaty Exposed Limit\"]).to.eql(0);\r",
							"  console.log(\"Treaty Exposed Limit Miss Matching In 1st Row Expected: 0 Current:\", responseJson.Value.Analysis0[0][\"Treaty Exposed Limit\"]);\r",
							"});\r",
							"\r",
							"// Validating Treaty Loss Of 1st Row\r",
							"pm.test(\"Validating Treaty Loss Of 1st Row\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[0][\"Treaty Loss\"]).to.eql(0);\r",
							"  console.log(\"Treaty Loss Miss Matching In 1st Row Expected: 0 Current:\", responseJson.Value.Analysis0[0][\"Treaty Loss\"]);\r",
							"});\r",
							"\r",
							"\r",
							"// Validating Asset Name Of 2nd Row, Flooded High School - ICEYE\r",
							"pm.test(\"Validating Asset Name Of 2nd Row, Flooded High School - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[1][\"Asset Name\"]).to.eql(\"Flooded High School - ICEYE\");\r",
							"  console.log(\"Asset Name Miss Matching In 2nd Row Expected: Flooded High School - ICEYE Current:\", responseJson.Value.Analysis0[1][\"Asset Name\"]);\r",
							"});\r",
							"\r",
							"// Validating Asset Number Of 2nd Row, Flooded High School - ICEYE\r",
							"pm.test(\"Validating Asset Number Of 2nd Row, Flooded High School - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[1][\"Asset Number\"]).to.eql(2242715);\r",
							"  console.log(\"Asset Number Miss Matching In 2nd Row Expected: 2242715 Current:\", responseJson.Value.Analysis0[1][\"Asset Number\"]);\r",
							"});\r",
							"\r",
							"// Validating Contract Number Of 2nd Row, Flooded High School - ICEYE\r",
							"pm.test(\"Validating Contract Number Of 2nd Row, Flooded High School - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[1][\"Contract Number\"]).to.eql(\"6960\");\r",
							"  console.log(\"Contract Number Miss Matching In 2nd Row Expected: 6960 Current:\", responseJson.Value.Analysis0[1][\"Contract Number\"]);\r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Of 2nd Row\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Of 2nd Row\", () => {\r",
							"  const expectedContractLoss_EL = 19977.931164461992;\r",
							"  const actualContractLoss_EL = responseJson.Value.Analysis0[1][\"ContractLoss_Value All Types_EL\"];\r",
							"  const difference = Math.abs(expectedContractLoss_EL - actualContractLoss_EL);\r",
							"  console.log(\"Expected ContractLoss_Value All Types_EL: \", expectedContractLoss_EL);\r",
							"  console.log(\"Actual ContractLoss_Value All Types_EL: \", actualContractLoss_EL);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`ContractLoss_Value All Types_EL mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"ContractLoss_Value All Types_EL is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Of 2nd Row\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Of 2nd Row\", () => {\r",
							"  const expectedContractLoss_GL = 0;\r",
							"  const actualContractLoss_GL = responseJson.Value.Analysis0[1][\"ContractLoss_Value All Types_GL\"];\r",
							"  const difference = Math.abs(expectedContractLoss_GL - actualContractLoss_GL);\r",
							"  console.log(\"Expected ContractLoss_Value All Types_GL: \", expectedContractLoss_GL);\r",
							"  console.log(\"Actual ContractLoss_Value All Types_GL: \", actualContractLoss_GL);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`ContractLoss_Value All Types_GL mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"ContractLoss_Value All Types_GL is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating GroundUpLoss Of 2nd Row\r",
							"pm.test(\"Validating GroundUpLoss Of 2nd Row\", () => {\r",
							"  const expectedGroundUpLoss = 523292.601108551;\r",
							"  const actualGroundUpLoss = responseJson.Value.Analysis0[1][\"GroundUpLoss\"];\r",
							"  const difference = Math.abs(expectedGroundUpLoss - actualGroundUpLoss);\r",
							"  console.log(\"Expected GroundUpLoss: \", expectedGroundUpLoss);\r",
							"  console.log(\"Actual GroundUpLoss: \", actualGroundUpLoss);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`GroundUpLoss mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"GroundUpLoss is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Intensity Of 2nd Row\r",
							"pm.test(\"Validating Intensity Of 2nd Row\", () => {\r",
							"  const expectedIntensity = 3.5213513374328613;\r",
							"  const actualIntensity = responseJson.Value.Analysis0[1][\"Intensity\"];\r",
							"  const difference = Math.abs(expectedIntensity - actualIntensity);\r",
							"  console.log(\"Expected Intensity: \", expectedIntensity);\r",
							"  console.log(\"Actual Intensity: \", actualIntensity);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Intensity mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Intensity is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating TIV Of 2nd Row\r",
							"pm.test(\"Validating TIV Of 2nd Row\", () => {\r",
							"  const expectedTIV = 2000000;\r",
							"  const actualTIV = responseJson.Value.Analysis0[1][\"TIV\"];\r",
							"  const difference = Math.abs(expectedTIV - actualTIV);\r",
							"  console.log(\"Expected TIV: \", expectedTIV);\r",
							"  console.log(\"Actual TIV: \", actualTIV);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`TIV mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"TIV is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net Pre Cat Exposed Limit Of 2nd Row\r",
							"pm.test(\"Validating Net Pre Cat Exposed Limit Of 2nd Row\", () => {\r",
							"  const expectedNetPreCatExposedLimit = 19977.931164461992;\r",
							"  const actualNetPreCatExposedLimit = responseJson.Value.Analysis0[1][\"Net Pre Cat Exposed Limit\"];\r",
							"  const difference = Math.abs(expectedNetPreCatExposedLimit - actualNetPreCatExposedLimit);\r",
							"  console.log(\"Expected Net Pre Cat Exposed Limit: \", expectedNetPreCatExposedLimit);\r",
							"  console.log(\"Actual Net Pre Cat Exposed Limit: \", actualNetPreCatExposedLimit);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net Pre Cat Exposed Limit mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net Pre Cat Exposed Limit is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net Pre Cat Loss Of 2nd Row\r",
							"pm.test(\"Validating Net Pre Cat Loss Of 2nd Row\", () => {\r",
							"  const expectedNetPreCatLoss = 0;\r",
							"  const actualNetPreCatLoss = responseJson.Value.Analysis0[1][\"Net Pre Cat Loss\"];\r",
							"  const difference = Math.abs(expectedNetPreCatLoss - actualNetPreCatLoss);\r",
							"  console.log(\"Expected Net Pre Cat Loss: \", expectedNetPreCatLoss);\r",
							"  console.log(\"Actual Net Pre Cat Loss: \", actualNetPreCatLoss);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net Pre Cat Loss mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net Pre Cat Loss is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net of Fac Exposed Limit Of 2nd Row\r",
							"pm.test(\"Validating Net of Fac Exposed Limit Of 2nd Row\", () => {\r",
							"  const expectedNetOfFacExposedLimit = 19977.931164461992;\r",
							"  const actualNetOfFacExposedLimit = responseJson.Value.Analysis0[1][\"Net of Fac Exposed Limit\"];\r",
							"  const difference = Math.abs(expectedNetOfFacExposedLimit - actualNetOfFacExposedLimit);\r",
							"  console.log(\"Expected Net of Fac Exposed Limit: \", expectedNetOfFacExposedLimit);\r",
							"  console.log(\"Actual Net of Fac Exposed Limit: \", actualNetOfFacExposedLimit);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net of Fac Exposed Limit mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net of Fac Exposed Limit is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Treaty Exposed Limit Of 2nd Row\r",
							"pm.test(\"Validating Treaty Exposed Limit Of 2nd Row\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[1][\"Treaty Exposed Limit\"]).to.eql(0);\r",
							"  console.log(\"Treaty Exposed Limit Miss Matching In 2nd Row Expected: 0 Current:\", responseJson.Value.Analysis0[1][\"Treaty Exposed Limit\"]);\r",
							"});\r",
							"\r",
							"// Validating Treaty Loss Of 2nd Row\r",
							"pm.test(\"Validating Treaty Loss Of 2nd Row\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[1][\"Treaty Loss\"]).to.eql(0);\r",
							"  console.log(\"Treaty Loss Miss Matching In 2nd Row Expected: 0 Current:\", responseJson.Value.Analysis0[1][\"Treaty Loss\"]);\r",
							"});\r",
							"\r",
							"\r",
							"// Validating Asset Name Of 3rd Row, Flooded Home - ICEYE\r",
							"pm.test(\"Validating Asset Name Of 3rd Row, Flooded Home - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[2][\"Asset Name\"]).to.eql(\"Flooded Home - ICEYE\");\r",
							"  console.log(\"Asset Name Miss Matching In 3rd Row Expected: Flooded Home - ICEYE Current:\", responseJson.Value.Analysis0[2][\"Asset Name\"]);\r",
							"});\r",
							"\r",
							"// Validating Asset Number Of 3rd Row, Flooded Home - ICEYE\r",
							"pm.test(\"Validating Asset Number Of 3rd Row, Flooded Home - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[2][\"Asset Number\"]).to.eql(2242733);\r",
							"  console.log(\"Asset Number Miss Matching In 3rd Row Expected: 2242733 Current:\", responseJson.Value.Analysis0[2][\"Asset Number\"]);\r",
							"});\r",
							"\r",
							"// Validating Contract Number Of 3rd Row, Flooded Home - ICEYE\r",
							"pm.test(\"Validating Contract Number Of 3rd Row, Flooded Home - ICEYE\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[2][\"Contract Number\"]).to.eql(\"6960\");\r",
							"  console.log(\"Contract Number Miss Matching In 3rd Row Expected: 6960 Current:\", responseJson.Value.Analysis0[2][\"Contract Number\"]);\r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Of 3rd Row\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Of 3rd Row\", () => {\r",
							"  const expectedContractLoss_EL = 8990.069024007895;\r",
							"  const actualContractLoss_EL = responseJson.Value.Analysis0[2][\"ContractLoss_Value All Types_EL\"];\r",
							"  const difference = Math.abs(expectedContractLoss_EL - actualContractLoss_EL);\r",
							"  console.log(\"Expected ContractLoss_Value All Types_EL: \", expectedContractLoss_EL);\r",
							"  console.log(\"Actual ContractLoss_Value All Types_EL: \", actualContractLoss_EL);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`ContractLoss_Value All Types_EL mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"ContractLoss_Value All Types_EL is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Of 3rd Row\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Of 3rd Row\", () => {\r",
							"  const expectedContractLoss_GL = 0;\r",
							"  const actualContractLoss_GL = responseJson.Value.Analysis0[2][\"ContractLoss_Value All Types_GL\"];\r",
							"  const difference = Math.abs(expectedContractLoss_GL - actualContractLoss_GL);\r",
							"  console.log(\"Expected ContractLoss_Value All Types_GL: \", expectedContractLoss_GL);\r",
							"  console.log(\"Actual ContractLoss_Value All Types_GL: \", actualContractLoss_GL);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`ContractLoss_Value All Types_GL mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"ContractLoss_Value All Types_GL is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating GroundUpLoss Of 3rd Row\r",
							"pm.test(\"Validating GroundUpLoss Of 3rd Row\", () => {\r",
							"  const expectedGroundUpLoss = 281459.82921123505;\r",
							"  const actualGroundUpLoss = responseJson.Value.Analysis0[2][\"GroundUpLoss\"];\r",
							"  const difference = Math.abs(expectedGroundUpLoss - actualGroundUpLoss);\r",
							"  console.log(\"Expected GroundUpLoss: \", expectedGroundUpLoss);\r",
							"  console.log(\"Actual GroundUpLoss: \", actualGroundUpLoss);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`GroundUpLoss mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"GroundUpLoss is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Intensity Of 3rd Row\r",
							"pm.test(\"Validating Intensity Of 3rd Row\", () => {\r",
							"  const expectedIntensity = 3.9936368465423584;\r",
							"  const actualIntensity = responseJson.Value.Analysis0[2][\"Intensity\"];\r",
							"  const difference = Math.abs(expectedIntensity - actualIntensity);\r",
							"  console.log(\"Expected Intensity: \", expectedIntensity);\r",
							"  console.log(\"Actual Intensity: \", actualIntensity);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Intensity mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Intensity is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating TIV Of 3rd Row\r",
							"pm.test(\"Validating TIV Of 3rd Row\", () => {\r",
							"  const expectedTIV = 900000;\r",
							"  const actualTIV = responseJson.Value.Analysis0[2][\"TIV\"];\r",
							"  const difference = Math.abs(expectedTIV - actualTIV);\r",
							"  console.log(\"Expected TIV: \", expectedTIV);\r",
							"  console.log(\"Actual TIV: \", actualTIV);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`TIV mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"TIV is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net Pre Cat Exposed Limit Of 3rd Row\r",
							"pm.test(\"Validating Net Pre Cat Exposed Limit Of 3rd Row\", () => {\r",
							"  const expectedNetPreCatExposedLimit = 8990.069024007895;\r",
							"  const actualNetPreCatExposedLimit = responseJson.Value.Analysis0[2][\"Net Pre Cat Exposed Limit\"];\r",
							"  const difference = Math.abs(expectedNetPreCatExposedLimit - actualNetPreCatExposedLimit);\r",
							"  console.log(\"Expected Net Pre Cat Exposed Limit: \", expectedNetPreCatExposedLimit);\r",
							"  console.log(\"Actual Net Pre Cat Exposed Limit: \", actualNetPreCatExposedLimit);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net Pre Cat Exposed Limit mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net Pre Cat Exposed Limit is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net Pre Cat Loss Of 3rd Row\r",
							"pm.test(\"Validating Net Pre Cat Loss Of 3rd Row\", () => {\r",
							"  const expectedNetPreCatLoss = 0;\r",
							"  const actualNetPreCatLoss = responseJson.Value.Analysis0[2][\"Net Pre Cat Loss\"];\r",
							"  const difference = Math.abs(expectedNetPreCatLoss - actualNetPreCatLoss);\r",
							"  console.log(\"Expected Net Pre Cat Loss: \", expectedNetPreCatLoss);\r",
							"  console.log(\"Actual Net Pre Cat Loss: \", actualNetPreCatLoss);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net Pre Cat Loss mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net Pre Cat Loss is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Net of Fac Exposed Limit Of 3rd Row\r",
							"pm.test(\"Validating Net of Fac Exposed Limit Of 3rd Row\", () => {\r",
							"  const expectedNetOfFacExposedLimit = 8990.069024007895;\r",
							"  const actualNetOfFacExposedLimit = responseJson.Value.Analysis0[2][\"Net of Fac Exposed Limit\"];\r",
							"  const difference = Math.abs(expectedNetOfFacExposedLimit - actualNetOfFacExposedLimit);\r",
							"  console.log(\"Expected Net of Fac Exposed Limit: \", expectedNetOfFacExposedLimit);\r",
							"  console.log(\"Actual Net of Fac Exposed Limit: \", actualNetOfFacExposedLimit);\r",
							"  console.log(\"Difference: \", difference);\r",
							"\r",
							"  if (difference > 1) {\r",
							"    throw new Error(`Net of Fac Exposed Limit mismatch: Difference of ${difference} is greater than the allowed threshold of 1.`);\r",
							"  } else {\r",
							"    console.log(\"Net of Fac Exposed Limit is within the acceptable range. No errors.\");\r",
							"  }\r",
							"});\r",
							"\r",
							"// Validating Treaty Exposed Limit Of 3rd Row\r",
							"pm.test(\"Validating Treaty Exposed Limit Of 3rd Row\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[2][\"Treaty Exposed Limit\"]).to.eql(0);\r",
							"  console.log(\"Treaty Exposed Limit Miss Matching In 3rd Row Expected: 0 Current:\", responseJson.Value.Analysis0[2][\"Treaty Exposed Limit\"]);\r",
							"});\r",
							"\r",
							"// Validating Treaty Loss Of 3rd Row\r",
							"pm.test(\"Validating Treaty Loss Of 3rd Row\", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0[2][\"Treaty Loss\"]).to.eql(0);\r",
							"  console.log(\"Treaty Loss Miss Matching In 3rd Row Expected: 0 Current:\", responseJson.Value.Analysis0[2][\"Treaty Loss\"]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"AdditionalSortMeasure\": \"TIV\",\r\n    \"AttributeList\": [\r\n        \"#\",\r\n        \"Asset Number\",\r\n        \"Asset Name\",\r\n        \"Contract Number\",\r\n        \"ContractLoss_Value All Types_EL\",\r\n        \"TIV\",\r\n        \"ContractLoss_Value All Types_GL\",\r\n        \"Intensity\",\r\n        \"GroundUpLoss\",\r\n        \"Net Pre Cat Exposed Limit\",\r\n        \"Net Pre Cat Loss\",\r\n        \"Net of Fac Exposed Limit\",\r\n        \"Net of Fac Loss\",\r\n        \"Fac Exposed Limit\",\r\n        \"Fac loss\",\r\n        \"Treaty Exposed Limit\",\r\n        \"Treaty Loss\"\r\n    ],\r\n    \"SortDirection\": -1,\r\n    \"Count\": 20,\r\n    \"TopNBy\": \"GroundUpLoss\",\r\n    \"ContractMode\": false,\r\n    \"PercentageAttributes\": false,\r\n    \"TopNAssetsBy\": \"GroundUpLoss\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/topn",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"topn"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/TIV Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === <1M\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === <1M\", () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"<1M\");\r",
							"    pm.expect(TIVRange1M[\"TIV\"]).to.eql(900000);  // Validating TIV\r",
							"    pm.expect(TIVRange1M[\"TIV Range\"]).to.eql(\"<1M\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange1M[\"Percentage\"].toFixed(0)).to.eql(11.480783813005836.toFixed(0));  // Validating Percentage\r",
							"    pm.expect(TIVRange1M[\"TIV.Bins\"]).to.eql(\"1\");\r",
							"});\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === 1M - 5M\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === 1M -5M\", () => {\r",
							"    const TIVRange1M_5M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"1M -5M\");\r",
							"    pm.expect(TIVRange1M_5M[\"TIV\"]).to.eql(6939186.023);  // Validating TIV\r",
							"    pm.expect(TIVRange1M_5M[\"TIV Range\"]).to.eql(\"1M -5M\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange1M_5M[\"Percentage\"].toFixed(0)).to.eql(88.51921618699417.toFixed(0));  // Validating Percentage\r",
							"    pm.expect(TIVRange1M[\"TIV.Bins\"]).to.eql(\"2\");\r",
							"});\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === 5M – 10M\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === 5M – 10M\", () => {\r",
							"    const TIVRange5M_10M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"5M – 10M\");\r",
							"    pm.expect(TIVRange5M_10M[\"TIV\"]).to.eql(0);  // Validating TIV\r",
							"    pm.expect(TIVRange5M_10M[\"TIV Range\"]).to.eql(\"5M – 10M\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange5M_10M[\"Percentage\"].toFixed(0)).to.eql(0.);  // Validating Percentage\r",
							"});\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === 10M - 50M\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === 10M -50M\", () => {\r",
							"    const TIVRange10M_50M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"10M -50M\");\r",
							"    pm.expect(TIVRange10M_50M[\"TIV\"]).to.eql(0);  // Validating TIV\r",
							"    pm.expect(TIVRange10M_50M[\"TIV Range\"]).to.eql(\"10M -50M\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange10M_50M[\"Percentage\"].toFixed(0)).to.eql(0);  // Validating Percentage\r",
							"});\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === 50M-100M\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === 50M-100M\", () => {\r",
							"    const TIVRange50M_100M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"50M-100M\");\r",
							"    pm.expect(TIVRange50M_100M[\"TIV\"]).to.eql(0);  // Validating TIV\r",
							"    pm.expect(TIVRange50M_100M[\"TIV Range\"]).to.eql(\"50M-100M\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange50M_100M[\"Percentage\"].toFixed(0)).to.eql(0);  // Validating Percentage\r",
							"});\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === 100M-500M\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === 100M-500M\", () => {\r",
							"    const TIVRange100M_500M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"100M-500M\");\r",
							"    pm.expect(TIVRange100M_500M[\"TIV\"]).to.eql(0);  // Validating TIV\r",
							"    pm.expect(TIVRange100M_500M[\"TIV Range\"]).to.eql(\"100M-500M\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange100M_500M[\"Percentage\"]).to.eql(0);  // Validating Percentage\r",
							"});\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === 500M-1B\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === 500M-1B\", () => {\r",
							"    const TIVRange500M_1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"500M-1B\");\r",
							"    pm.expect(TIVRange500M_1B[\"TIV\"]).to.eql(978220260);  // Validating TIV\r",
							"    pm.expect(TIVRange500M_1B[\"TIV Range\"]).to.eql(\"500M-1B\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange500M_1B[\"Percentage\"].toFixed(0)).to.eql(82.49.toFixed(0));  // Validating Percentage\r",
							"});\r",
							"\r",
							"// Validating TIV, TIV Range, and Percentage for TIV Range === >1B\r",
							"pm.test(\"Validating TIV, TIV Range, and Percentage for TIV Range === >1B\", () => {\r",
							"    const TIVRange1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \">1B\");\r",
							"    pm.expect(TIVRange1B[\"TIV\"]).to.eql(0);  // Validating TIV\r",
							"    pm.expect(TIVRange1B[\"TIV Range\"]).to.eql(\">1B\");  // Validating TIV Range\r",
							"    pm.expect(TIVRange1B[\"Percentage\"]).to.eql(0);  // Validating Percentage\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"TIV\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}