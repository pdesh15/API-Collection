{
	"info": {
		"_postman_id": "e45a4920-7a82-4971-93fa-4a14495680cf",
		"name": "API Collection For All Contibution",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14426843",
		"_collection_link": "https://solar-shadow-896910.postman.co/workspace/Hari-API~4e937a98-dcfb-4c86-b121-183f90aaf677/collection/14426843-e45a4920-7a82-4971-93fa-4a14495680cf?action=share&source=collection_link&creator=14426843"
	},
	"item": [
		{
			"name": "Authentication and Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();  \r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-forwarded-for",
						"value": "152.58.201.217",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"email\": \"nkumar@eigenrisk.com\",\r\n  \"apiKey\": \"789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/apiLogin",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"apiLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set analysis HCC MRC LDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function() {\r",
							"    console.log(\"Next API Call After 2 Minutes \")\r",
							"}, 120000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Exposure\": {\r\n        \"id\": 23649,\r\n        \"object_sub_type\": \"portfolio\"\r\n    },\r\n    \"analysisObject\": [\r\n        {\r\n            \"CurrencyCode\": \"USD\",\r\n            \"IncludeAllContracts\": true,\r\n            \"damageAdjustment\": 1,\r\n            \"ValuationTypeCode\": 1,\r\n            \"ExposureFilterSets\": {\r\n        \"AssetModel\": \"ERBASICS\",\r\n        \"FilterList\": [\r\n          {\r\n            \"AndOr\": \"AND\",\r\n            \"FilterList\": [\r\n              {\r\n                \"AssetType\": \"Site\",\r\n                \"Attribute\": \"Cause Of Loss\",\r\n                \"Operator\": \"EQ\",\r\n                \"Value\": \"EQXX\",\r\n                \"AndOr\": \"OR\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n            \"quantile\": 50\r\n            \r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/load-exposure",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"load-exposure"
					]
				}
			},
			"response": []
		},
		{
			"name": "Number of People/Geocoded resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							" console.log(\"--------TIV BY Wiring year range--------\") \r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Geocoded resolution\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Number of People\"]).to.eql(51539607528); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of People for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Percentage\"].toFixed(4)).to.eql(0.08691558323977837.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 1\", () => {\r",
							"    const GeocodedResolutionOne = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(GeocodedResolutionOne).to.be.ok; // Ensuring an item with Geocoded resolution === 1 exists\r",
							"    pm.expect(GeocodedResolutionOne[\"Geocoded resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 1\", () => {\r",
							"    const GeocodedResolutionOne = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(GeocodedResolutionOne).to.be.ok; // Ensuring an item with Geocoded resolution === 1 exists\r",
							"    pm.expect(GeocodedResolutionOne[\"Number of People\"]).to.eql(59236188918848); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded resolution === 1\", () => {\r",
							"    const GeocodedResolutionOne = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(GeocodedResolutionOne).to.be.ok; // Ensuring an item with Geocoded resolution === 1 exists\r",
							"    pm.expect(Number(GeocodedResolutionOne[\"Percentage\"]).toFixed(4)).to.eql(99.89497700358527.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 4\", () => {\r",
							"    const GeocodedResolutionFour = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(GeocodedResolutionFour[\"Geocoded resolution\"]).to.eql(\"4\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 4\", () => {\r",
							"    const GeocodedResolutionFour = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(GeocodedResolutionFour[\"Number of People\"]).to.eql(6442450941); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded resolution === 4\", () => {\r",
							"    const GeocodedResolutionFour = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(Number(GeocodedResolutionFour[\"Percentage\"]).toFixed(4)).to.eql(0.0109.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 5\", () => {\r",
							"    const GeocodedResolutionFive = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(GeocodedResolutionFive[\"Geocoded resolution\"]).to.eql(\"5\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of People Range for Geocoded resolution === 5\", () => {\r",
							"    const GeocodedResolutionFive = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(GeocodedResolutionFive[\"Number of People\"]).to.eql(4294967294); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded resolution === 5\", () => {\r",
							"    const GeocodedResolutionFive = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(Number(GeocodedResolutionFive[\"Percentage\"]).toFixed(4)).to.eql(0.0072.toFixed(4)); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Number of People\"],\"GroupByAttributes\":[\"Geocoded resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "#Building/Geocoded resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							" console.log(\"--------TIV BY Wiring year range--------\") \r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded resolution for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded resolution for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded resolution\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 0\", () => {\r",
							"     const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Number of Buildings\"]).to.eql(24); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded resolution === 0\", () => {\r",
							"     const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Percentage\"].toFixed(4)).to.eql(0.0851.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded resolution for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded resolution for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(NumberOfBuilding[\"Number of Buildings\"]).to.eql(28164); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(NumberOfBuilding[\"Percentage\"].toFixed(4)).to.eql(99.8971.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Geocoded resolution\"]).to.eql(\"4\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Number of Buildings\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(Number(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(0.0106.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Geocoded resolution\"]).to.eql(\"5\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Buildings for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Number of Buildings\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(Number(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(0.0071.toFixed(4)); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Number of Buildings\"],\"GroupByAttributes\":[\"Geocoded resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Number of Stories/Country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = AE   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'AE');\r",
							"    pm.expect(TIVRange1M['Percentage'].toFixed(4)).to.eql(0.09173340860177116.toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Number of Stories Country = AE  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'AE');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(26);\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = AE  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'AE');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('United Arab Emirates');\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = BA   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'BA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.003528208023145045).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Number of Stories Country = BA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'BA');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = BA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'BA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Bosnia and Herzegovina');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = CA   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'CA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(4.117418763010267).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories No.Of Stories Country = CA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'CA');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(1167);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = CA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'CA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Canada');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = DO   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'DO');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.17993860918039728).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories No.of Stories Country = DO  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'DO');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(51);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = DO  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'DO');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Dominican Republic');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = FI ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'FI');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.02822566418516036).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = FI ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'FI');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(8);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = FI ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'FI');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Finland');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = GB ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GB');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.9632007903185972).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = GB ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GB');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(273);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = GB ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GB');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('United Kingdom');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = GU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GU');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.003528208023145045).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = GU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GU');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = GU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GU');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Guam');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = HN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'HN');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.021169248138870268).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = HN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'HN');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = HN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'HN');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Honduras');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = ID ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'ID');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.03881028825459549).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = ID ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'ID');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(11);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = ID ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'ID');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Indonesia');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = IN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'IN');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.3210669301061991).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = IN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'IN');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(91);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = IN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'IN');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('India');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = JO ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'JO');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.003528208023145045).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = JO ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'JO');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = JO ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'JO');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Jordan');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = KN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'KN');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.003528208023145045).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = KN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'KN');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = KN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'KN');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Saint Kitts and Nevis');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = LA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'LA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.003528208023145045).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = LA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'LA');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = LA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'LA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql(\"Lao People's Democratic Republic\");\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = MA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'MA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.00705641604629009).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = MA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'MA');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = MA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'MA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Morocco');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = NA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'NA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.00705641604629009).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = NA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'NA');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = NA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'NA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Namibia');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = OM ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'OM');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.010584624069435134).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = OM ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'OM');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(3);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories County Country = OM ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'OM');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Oman');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = PY ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'PY');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.07409236848604593).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = PY ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'PY');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(21);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = PY ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'PY');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Paraguay');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = RU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'RU');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.17993860918039728).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = RU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'RU');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(51);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = RU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'RU');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Russian Federation');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Percenatage Country = TR ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'TR');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.17641040115725223).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories  Country = TR ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'TR');\r",
							"    pm.expect(TIVRange1M['Number of Stories']).to.eql(50);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Number of stories Country Country = TR ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'TR');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Turkey');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Number of Stories\"],\"GroupByAttributes\":[\"Country\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Miscellaneous/Country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = AE   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'AE');\r",
							"    pm.expect(TIVRange1M['Percentage'].toFixed(4)).to.eql(0.13031896457502737.toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Value Miscellaneous Country = AE  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'AE');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(20374386.848571427.toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = AE  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'AE');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('United Arab Emirates');\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = BA   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'BA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.016154619408431166).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Value Miscellaneous Country = BA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'BA');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(2525652.8571428573.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = BA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'BA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Bosnia and Herzegovina');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = CA   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'CA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(4.67984928089985).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous No.Of Stories Country = CA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'CA');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(731659125.3851461.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = CA  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'CA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Canada');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = DO   ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'DO');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.08084458557583983).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous No.of Stories Country = DO  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'DO');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(12639440.978571422.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = DO  ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'DO');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Dominican Republic');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = FI ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'FI');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.00788130246113709).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = FI ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'FI');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(1232182.1749999998.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = FI ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'FI');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Finland');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = GB ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GB');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(3.792570750048137).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = GB ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GB');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(592939821.6448437.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = GB ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GB');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('United Kingdom');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = GU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GU');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.00027412351219680963).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = GU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GU');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(42857.142857142855.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = GU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'GU');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Guam');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = HN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'HN');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.01715048322758818).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = HN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'HN');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(2681348.6514285714.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = HN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'HN');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Honduras');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = ID ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'ID');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.07582129377007885).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = ID ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'ID');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(11854087.205714285.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = ID ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'ID');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Indonesia');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = IN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'IN');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.8651112443839262).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = IN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'IN');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(135253615.75428572.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = IN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'IN');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('India');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = JO ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'JO');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.017223953984938725).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = JO ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'JO');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(2692835.25.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = JO ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'JO');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Jordan');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = KN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'KN');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.0010590131409645687).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = KN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'KN');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(165568.7142857143.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = KN ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'KN');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Saint Kitts and Nevis');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = LA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'LA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.00003195594843434308).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = LA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'LA');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(4996.071428571428.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = LA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'LA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql(\"Lao People's Democratic Republic\");\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = MA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'MA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.004946326238616033).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = MA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'MA');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(773320.7871428571.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = MA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'MA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Morocco');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = NA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'NA');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.03944226147020089).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = NA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'NA');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(6166499.987142856.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = NA ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'NA');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Namibia');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = OM ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'OM');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.0808688907735986).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = OM ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'OM');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(12643240.912857141.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous County Country = OM ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'OM');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Oman');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = PY ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'PY');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.0816427519246171).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = PY ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'PY');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(12764228.265.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = PY ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'PY');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Paraguay');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = RU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'RU');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.33133896443583355).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = RU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'RU');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(51802347.12142859.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = RU ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'RU');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Russian Federation');\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Percenatage Country = TR ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'TR');\r",
							"    pm.expect(parseFloat(TIVRange1M['Percentage']).toFixed(4)).to.eql(parseFloat(0.7314428368951673).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous  Country = TR ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'TR');\r",
							"    pm.expect(TIVRange1M['Value Miscellaneous'].toFixed(4)).to.eql(114355568.77785714.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRC_LDS Value Miscellaneous Country Country = TR ', () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item['Country']['code'] === 'TR');\r",
							"    pm.expect(TIVRange1M['Country']['displayName']).to.eql('Turkey');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Miscellaneous\"],\"GroupByAttributes\":[\"Country\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Electronic and Apparatus and Value Fire Arms/Geocoded resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Geocoded Resolution\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage Value Electronic and Apparatus\"]).toFixed(4)).to.eql(parseFloat(0.3115930815354119).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Percentage Value Fire Arms\"].toFixed(4)).to.eql(0.3115930815354119.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Value Electronic and Apparatus\"].toFixed(4)).to.eql(48715227.31357144.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 0\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Value Fire Arms\"].toFixed(4)).to.eql(48715227.31357144.toFixed(4)); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage Value Electronic and Apparatus\"]).toFixed(4)).to.eql(parseFloat(99.68664686120934).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage Value Fire Arms\"]).toFixed(4)).to.eql(parseFloat(99.68664686120934).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Electronic and Apparatus\"]).toFixed(4)).to.eql(parseFloat(15585255096.299797).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Fire Arms\"]).toFixed(4)).to.eql(parseFloat(15585255096.299797).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Geocoded Resolution\"]).to.eql(\"4\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage Value Electronic and Apparatus\"]).toFixed(4)).to.eql(parseFloat(0.0003453956253679376).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage Value Fire Arms\"]).toFixed(4)).to.eql(parseFloat(0.0003453956253679376).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Electronic and Apparatus\"]).toFixed(4)).to.eql(parseFloat(54000).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Fire Arms\"]).toFixed(4)).to.eql(parseFloat(54000).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Geocoded Resolution\"]).to.eql(\"5\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Electronic and Apparatus for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage Value Electronic and Apparatus\"]).toFixed(4)).to.eql(parseFloat(0.001414661629878789).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage Value Fire Arms for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage Value Fire Arms\"]).toFixed(4)).to.eql(parseFloat(0.001414661629878789).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Electronic and Apparatus for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Electronic and Apparatus\"]).toFixed(4)).to.eql(parseFloat(221171.67214285716).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Fire Arms for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Fire Arms\"]).toFixed(4)).to.eql(parseFloat(221171.67214285716).toFixed(4)); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Fire Arms\",\"Value Electronic and Apparatus\"],\"GroupByAttributes\":[\"Geocoded Resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Jewelry Watches Furs/Occupancy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:1\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage  for Occupancy === RMSMARINE:1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.33598530349888556).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"].toFixed(4)).to.eql(52528767.177089565.toFixed(4)); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:10\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:10\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:10\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.7340271286520138).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:10\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:10\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(114759603.29543729).toFixed(4)); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:11\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:11\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:11\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(5.274420654958438).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:11\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(824615873.6501492).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:12\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:12\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:12\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(1.3938598666676763).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:12\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(217919473.41505766).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:13\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:13\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:13\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.1432432412984424).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:13\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(22395000).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:2\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:2\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:2\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.9037194057423975).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:2\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(141289710.48228484).toFixed(4)); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:3\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:3\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:3\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(34.049212892713825).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:3\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(5323337532.858646).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:4\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.5628845940514201).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:4\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(88002759.28912972).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:5\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(11.201459736675135).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:5\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(1751263714.2871425).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:6\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:6\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:6\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(3.044947952724945).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:6\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(476054638.13263094).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:7\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:7\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:7\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(13.93314530764948).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:7\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(2178342142.612512).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)TIV for Occupancy === RMSMARINE:9\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Occupancy\"]).to.eql(\"RMSMARINE:9\"); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:9\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(28.423093915367346).toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Jewelry Watches Furs for Occupancy === RMSMARINE:9\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(parseFloat(NumberOfPeopleUnknown[\"Value Jewelry Watches Furs\"]).toFixed(4)).to.eql(parseFloat(4443736280.083557).toFixed(4)); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Jewelry Watches Furs\"],\"GroupByAttributes\":[\"Occupancy\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Money/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Money\"].toFixed(4)).to.eql(48715227.31357144.toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Percentage\"].toFixed(4)).to.eql(0.3115930815354119.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"1\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Money\"]).toFixed(4)).to.eql(parseFloat(15585255096.299797).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(99.68664686120934).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Money\"]).toFixed(4)).to.eql(parseFloat(54000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0003453956253679376).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"5\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Money for Geocoded Resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Money\"]).toFixed(4)).to.eql(parseFloat(221171.67214285716).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.001414661629878789).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Money\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Geocoded Resolution\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Securities/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 0\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Securities\"]).toFixed(4)).to.eql(parseFloat(48715227.31357144).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.3115930815354119).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(building[\"Geocoded Resolution\"]).to.eql(\"1\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(building[\"Value Securities\"]).toFixed(4)).to.eql(parseFloat(15585255096.299797).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(99.68664686120934).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(building[\"Geocoded Resolution\"]).to.eql(\"4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(building[\"Value Securities\"]).toFixed(4)).to.eql(parseFloat(54000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0003453956253679376).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(building[\"Geocoded Resolution\"]).to.eql(\"5\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Securities for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(building[\"Value Securities\"]).toFixed(4)).to.eql(parseFloat(221171.67214285716).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.001414661629878789).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Securities\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Geocoded Resolution\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Silverware/County",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === ''\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"\");\r",
							"    pm.expect(NumberOfBuilding[\"County\"]).to.eql(\"\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === ''\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(286467354.6671936).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === ''\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(1.8323068724589082).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"6th of October\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === '6th of October'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"6th of October\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"6th of October\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"6th of October\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === '6th of October'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"6th of October\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(1212247).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === '6th of October'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"6th of October\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.007753792790100658).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"Chemnitz\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'Chemnitz'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Chemnitz\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"Chemnitz\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"Chemnitz\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'Chemnitz'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Chemnitz\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(1790300.5714285714).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'Chemnitz'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Chemnitz\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.011451147878985015).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"Chittoor\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'Chittoor'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Chittoor\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"Chittoor\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"Chittoor\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'Chittoor'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Chittoor\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(14518954.892857144).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'Chittoor'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Chittoor\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.092866361201993).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"DADE COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'DADE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"DADE COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"DADE COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"DADE COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'DADE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"DADE COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(19285.714285714286).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'DADE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"DADE COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0001233555804885578).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"EAGLE COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'EAGLE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"EAGLE COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"EAGLE COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"EAGLE COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'EAGLE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"EAGLE COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(1072514.0192857143).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'EAGLE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"EAGLE COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.006860030563094361).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"FAIRFAX COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'FAIRFAX COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"FAIRFAX COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"FAIRFAX COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"FAIRFAX COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'FAIRFAX COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"FAIRFAX COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(4839439.078571431).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'FAIRFAX COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"FAIRFAX COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.030954094203209857).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"GADSDEN COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'GADSDEN COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"GADSDEN COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"GADSDEN COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"GADSDEN COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'GADSDEN COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"GADSDEN COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(129025.17857142858).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'GADSDEN COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"GADSDEN COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0008252728192757688).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"HABERSHAM COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'HABERSHAM COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"HABERSHAM COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"HABERSHAM COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"HABERSHAM COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'HABERSHAM COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"HABERSHAM COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(57857.142857142855).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'HABERSHAM COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"HABERSHAM COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00037006674146567337).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"IBERVILLE PARISH\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'IBERVILLE PARISH'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"IBERVILLE PARISH\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"IBERVILLE PARISH\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"IBERVILLE PARISH\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'IBERVILLE PARISH'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"IBERVILLE PARISH\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(669571.4285714286).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'IBERVILLE PARISH'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"IBERVILLE PARISH\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.004282723005554595).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"JACK COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'JACK COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"JACK COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"JACK COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"JACK COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'JACK COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"JACK COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(36000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'JACK COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"JACK COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00023026375024530788).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"KALAMAZOO COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'KALAMAZOO COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"KALAMAZOO COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"KALAMAZOO COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"KALAMAZOO COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'KALAMAZOO COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"KALAMAZOO COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(6904016.362857143).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'KALAMAZOO COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"KALAMAZOO COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.044159574985179334).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"L'Assomption\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'L'Assomption'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"L'Assomption\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"L'Assomption\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"L'Assomption\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'L'Assomption'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"L'Assomption\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(1227203.364).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'L'Assomption'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"L'Assomption\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.007849456914119379).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"MACKINAC COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'MACKINAC COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"MACKINAC COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"MACKINAC COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"MACKINAC COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'MACKINAC COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"MACKINAC COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(36000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'MACKINAC COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"MACKINAC COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00023026375024530788).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"NACOGDOCHES COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'NACOGDOCHES COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"NACOGDOCHES COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"NACOGDOCHES COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"NACOGDOCHES COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'NACOGDOCHES COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"NACOGDOCHES COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(283857.14285714284).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'NACOGDOCHES COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"NACOGDOCHES COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0018156113957834394).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"PAGE COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'PAGE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"PAGE COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"PAGE COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"PAGE COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'PAGE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"PAGE COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(37285.71428571429).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'PAGE COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"PAGE COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00023848745561121174).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"QUAY COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'QUAY COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"QUAY COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"QUAY COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"QUAY COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'QUAY COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"QUAY COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(36000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'QUAY COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"QUAY COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00023026375024530788).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"RABUN COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'RABUN COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"RABUN COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"RABUN COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"RABUN COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'RABUN COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"RABUN COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(37285.71428571429).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'RABUN COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"RABUN COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00023848745561121174).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"UINTA COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'UINTA COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"UINTA COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"UINTA COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"UINTA COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'UINTA COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"UINTA COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(37285.71428571429).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'UINTA COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"UINTA COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00023848745561121174).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"YANKTON COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'YANKTON COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"YANKTON COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"YANKTON COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"YANKTON COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'YANKTON COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"YANKTON COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(19285.714285714286).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'YANKTON COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"YANKTON COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0001233555804885578).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)County for County === \"ZAPATA COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)County for County === 'ZAPATA COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"ZAPATA COUNTY\");\r",
							"    pm.expect(building[\"County\"]).to.eql(\"ZAPATA COUNTY\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Silverware for County === \"ZAPATA COUNTY\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Silverware for County === 'ZAPATA COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"ZAPATA COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Value Silverware\"]).toFixed(4)).to.eql(parseFloat(36000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for County === 'ZAPATA COUNTY'\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"ZAPATA COUNTY\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00023026375024530788).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Silverware\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"County\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Refrigerated Property/Construction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect(NumberOfBuilding[\"Construction\"]).to.eql(\"RMSCGSPEC:0\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === \"RMSCGSPEC:0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Refrigerated Property\"]).toFixed(4)).to.eql(parseFloat(5411957.142857143).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.03461604299669668).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:11\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === \"RMSCGSPEC:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === RMSCGSPEC:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(parseFloat(building[\"Value Refrigerated Property\"]).toFixed(4)).to.eql(parseFloat(27968480.265).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.17889242095778707).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:3\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === \"RMSCGSPEC:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === RMSCGSPEC:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(parseFloat(building[\"Value Refrigerated Property\"]).toFixed(4)).to.eql(parseFloat(22810261.929710303).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.1458993460003473).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === \"RMSCGSPEC:4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(parseFloat(building[\"Value Refrigerated Property\"]).toFixed(4)).to.eql(parseFloat(798474341.6861532).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(5.107213788647061).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:8\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:8\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === \"RMSCGSPEC:8\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(parseFloat(building[\"Value Refrigerated Property\"]).toFixed(4)).to.eql(parseFloat(276180485.2012412).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(1.7665098407500592).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:9\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:9\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === \"RMSCGSPEC:9\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Refrigerated Property for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(parseFloat(building[\"Value Refrigerated Property\"]).toFixed(4)).to.eql(parseFloat(14503399969.06054).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(92.76686856064805).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Refrigerated Property\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Construction\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Automobiles/Occupancy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(NumberOfBuilding[\"Occupancy\"]).to.eql(\"RMSMARINE:1\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(52528767.177089565).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.33598530349888556).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:10\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:10\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:10\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:10\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:10\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(114759603.29543729).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.7340271286520138).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:11\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(824615873.6501492).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(5.274420654958438).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:12\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:12\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:12\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:12\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:12\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(217919473.41505766).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:12\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(1.3938598666676763).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:13\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:13\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:13\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:13\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:13\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(22395000).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:13\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.1432432412984424).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:2\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:2\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:2\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:2\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:2\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(141289710.48228484).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:2\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.9037194057423975).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:3\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(5323337532.858646).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(34.049212892713825).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(88002759.28912972).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.5628845940514201).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:5\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:5\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:5\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(1751263714.2871425).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(11.201459736675135).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:6\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:6\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:6\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:6\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:6\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(476054638.13263094).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:6\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(3.044947952724945).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:7\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:7\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:7\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:7\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:7\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(2178342142.612512).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:7\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(13.93314530764948).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === \"RMSMARINE:9\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(building[\"Occupancy\"]).to.eql(\"RMSMARINE:9\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === \"RMSMARINE:9\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Automobiles for Occupancy === RMSMARINE:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(parseFloat(building[\"Value Automobiles\"]).toFixed(4)).to.eql(parseFloat(4443736280.083557).toFixed(4));\r",
							"});\r",
							"\r",
							"// Additional assertion for the provided response\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(28.423093915367346).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Automobiles\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Occupancy\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Contents/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Value Contents for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Value Contents for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Contents\"]).toFixed(4)).to.eql(parseFloat(682013182.39).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.3115930815354346).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(building[\"Geocoded Resolution\"]).to.eql(\"1\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Contents for Geocoded Resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Contents for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(building[\"Value Contents\"]).toFixed(4)).to.eql(parseFloat(218193571348.18112).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(99.68664686120931).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(building[\"Geocoded Resolution\"]).to.eql(\"4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Contents for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Contents for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(building[\"Value Contents\"]).toFixed(4)).to.eql(parseFloat(756000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.00034539562536796284).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(building[\"Geocoded Resolution\"]).to.eql(\"5\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Contents for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Contents for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(building[\"Value Contents\"]).toFixed(4)).to.eql(parseFloat(3096403.41).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0014146616298788925).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Contents\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Geocoded Resolution\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ground Up AAL - Flood/Construction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect(NumberOfBuilding[\"Construction\"]).to.eql(\"RMSCGSPEC:0\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === RMSCGSPEC:0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Ground Up AAL - Flood\"])).to.eql(parseFloat(-3069));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.11226596168471371).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:11\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === \"RMSCGSPEC:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === RMSCGSPEC:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(building[\"Ground Up AAL - Flood\"]).to.eql(-495); // Adjust based on the expected data type/format\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === \"RMSCGSPEC:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:11\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.018107413174953825).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:3\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === \"RMSCGSPEC:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === RMSCGSPEC:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(building[\"Ground Up AAL - Flood\"]).to.eql(-990);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === \"RMSCGSPEC:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:3\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(8)).to.eql(parseFloat(0.03621482634990765).toFixed(8));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === \"RMSCGSPEC:4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(building[\"Ground Up AAL - Flood\"]).to.eql(-38709);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === \"RMSCGSPEC:4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(10)).to.eql(parseFloat(1.4159997102813893).toFixed(10));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:8\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:8\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === \"RMSCGSPEC:8\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(building[\"Ground Up AAL - Flood\"]).to.eql(-15444);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === \"RMSCGSPEC:8\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(10)).to.eql(parseFloat(0.5649512910585593).toFixed(10));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === \"RMSCGSPEC:9\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(building[\"Construction\"]).to.eql(\"RMSCGSPEC:9\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === \"RMSCGSPEC:9\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Flood for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(building[\"Ground Up AAL - Flood\"]).to.eql(-2674980);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === \"RMSCGSPEC:9\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(parseFloat(building[\"Percentage\"]).toFixed(10)).to.eql(parseFloat(97.85246079745048).toFixed(10));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Ground Up AAL - Flood\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Construction\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ground Up AAL - Storm Surge/Occupancy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(NumberOfBuilding[\"Occupancy\"]).to.eql(\"RMSMARINE:1\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Ground Up AAL - Storm Surge\"])).to.eql(parseFloat(-891));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.032593343714916886).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:10\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:10\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const OccupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(OccupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:10\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:10\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:10\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const OccupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(OccupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-14355);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const OccupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(parseFloat(OccupancyData[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.525114982073661).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:11\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-41877);\r",
							"});\r",
							"\r",
							"// Validating Occupancy for RMSMARINE:11\r",
							"pm.test(\"Validating Occupancy for RMSMARINE:11\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:11\");\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:11\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(1.5318871546.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:12\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-20889);\r",
							"});\r",
							"\r",
							"// Validating Occupancy for RMSMARINE:12\r",
							"pm.test(\"Validating Occupancy for RMSMARINE:12\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:12\");\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:12\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(0.7641328359830515.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:13\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-792);\r",
							"});\r",
							"\r",
							"// Validating Occupancy for RMSMARINE:13\r",
							"pm.test(\"Validating Occupancy for RMSMARINE:13\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:13\");\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:13\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(0.0289718611.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:2\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-45639);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:2\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(1.6695034947.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:3\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-241560);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:3\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(8.8364176294.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:4\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-11880);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:4\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(0.4345779162.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:5\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-46035);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:5\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(1.6839894253.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:6\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-65835);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:6\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(2.4082859523.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:7\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-57123);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:7\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(2.0895954804.toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating Ground Up AAL - Storm Surge for Occupancy === RMSMARINE:9\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Storm Surge\"]).to.eql(-2186811);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating Percentage for Occupancy === RMSMARINE:9\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(79.9949299243.toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Ground Up AAL - Storm Surge\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Occupancy\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ground Up AAL - Windstorm/Occupancy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy -===RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy -===RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(NumberOfBuilding[\"Occupancy\"]).to.eql(\"RMSMARINE:1\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy -===RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy -===RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Ground Up AAL - Windstorm\"])).to.eql(parseFloat(-891));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy -===RMSMARINE:1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy -===RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.032593343714916886).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:10\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:10\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:10\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:10\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:10\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-14355);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"0.5251\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:11\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:11\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:11\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-41877);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:11\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:11\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"1.5319\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:12\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:12\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:12\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-20889);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:12\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:12\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"0.7641\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:13\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:13\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:13\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-792);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:13\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:13\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"0.0290\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:2\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:2\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:2\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-45639);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:2\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:2\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"1.6695\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:3\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:3\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:3\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-241560);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:3\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:3\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"8.8364\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:4\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:4\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-11880);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:4\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"0.4346\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:5\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:5\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:5\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-46035);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:5\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"1.6840\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:6\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:6\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:6\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-65835);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:6\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:6\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"2.4083\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:7\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:7\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:7\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-57123);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:7\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:7\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"2.0896\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:9\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(occupancyData[\"Occupancy\"]).to.eql(\"RMSMARINE:9\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Ground Up AAL - Windstorm for Occupancy === RMSMARINE:9\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(occupancyData[\"Ground Up AAL - Windstorm\"]).to.eql(-2186811);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:9\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:9\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const occupancyData = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(parseFloat(occupancyData[\"Percentage\"]).toFixed(4)).to.eql(\"79.9949\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Ground Up AAL - Windstorm\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Occupancy\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Tenant Improvement and Betterments/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Tenant Improvement and Betterments\"]).toFixed(4)).to.eql(parseFloat(48715227.31357144).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.3115930815354346).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"1\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Tenant Improvement and Betterments\"]).toFixed(4)).to.eql(parseFloat(15585255096.299797).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(99.68664686120934).toFixed(4));\r",
							"});\r",
							"\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"4\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Tenant Improvement and Betterments\"]).toFixed(4)).to.eql(parseFloat(54000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.0003453956253679376).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(NumberOfBuilding[\"Geocoded Resolution\"]).to.eql(\"5\");\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 5\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Value Tenant Improvement and Betterments for Geocoded Resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Tenant Improvement and Betterments\"]).toFixed(4)).to.eql(parseFloat(221171.67214285716).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Percentage\"]).toFixed(4)).to.eql(parseFloat(0.001414661629878789).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Tenant Improvement and Betterments\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Geocoded Resolution\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Stock or Inventory/Construction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:0');\r",
							"    pm.expect(NumberOfBuilding['Construction']).to.eql('RMSCGSPEC:0');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect((NumberOfBuilding[\"Value Stock or Inventory\"].toFixed(4))).to.eql(5411957.142857143.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:0');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.03461604299669668).toFixed(4));\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:11\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:11', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:11');\r",
							"    pm.expect(NumberOfBuilding['Construction']).to.eql('RMSCGSPEC:11');\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:11\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Stock or Inventory\"]).toFixed(4)).to.eql(parseFloat(27968480.265).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:11\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:11', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:11');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.17889242095778707).toFixed(4));\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:3\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:3', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:3');\r",
							"    pm.expect(NumberOfBuilding['Construction']).to.eql('RMSCGSPEC:3');\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:3\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Stock or Inventory\"]).toFixed(4)).to.eql(parseFloat(22810261.929710303).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:3\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:3', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:3');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.1458993460003473).toFixed(4));\r",
							"})\r",
							"\r",
							"// Assertion for Construction === RMSCGSPEC:4\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:4');\r",
							"    pm.expect(building['Construction']).to.eql('RMSCGSPEC:4');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(parseFloat(building[\"Value Stock or Inventory\"]).toFixed(4)).to.eql(parseFloat(798474341.6861532).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:4');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(5.107213788647061).toFixed(4));\r",
							"});\r",
							"\r",
							"// Assertion for Construction === RMSCGSPEC:8\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:8', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:8');\r",
							"    pm.expect(building['Construction']).to.eql('RMSCGSPEC:8');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(parseFloat(building[\"Value Stock or Inventory\"]).toFixed(4)).to.eql(parseFloat(276180485.2012412).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:8', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:8');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(1.7665098407500592).toFixed(4));\r",
							"});\r",
							"\r",
							"// Assertion for Construction === RMSCGSPEC:9\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:9', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:9');\r",
							"    pm.expect(building['Construction']).to.eql('RMSCGSPEC:9');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(parseFloat(building[\"Value Stock or Inventory\"]).toFixed(4)).to.eql(parseFloat(14503399969.06054).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:9', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:9');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(92.76686856064805).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Stock or Inventory\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Construction\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Stock or Inventory/Cedant name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Cedant name for Cedant name === ''\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Cedant name'] === '');\r",
							"    pm.expect(NumberOfBuilding['Cedant name']).to.eql(\"\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory - Windstorm for Cedant name === ''\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Cedant name'] === '');\r",
							"    pm.expect(NumberOfBuilding['Value Stock or Inventory'].toFixed(4)).to.eql(116197006.01754612.toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Cedant name === ''\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Cedant name'] === '');\r",
							"    pm.expect(NumberOfBuilding['Percentage'].toFixed(4)).to.eql(0.7432210659131921.toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Cedant name for Cedant name === 22MCG02010QS_20\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Cedant name'] === '22MCG02010QS_20');\r",
							"    pm.expect(NumberOfBuilding['Cedant name']).to.eql(\"22MCG02010QS_20\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Stock or Inventory - Windstorm for Cedant name === 22MCG02010QS_20\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Cedant name'] === '22MCG02010QS_20');\r",
							"    pm.expect(NumberOfBuilding['Value Stock or Inventory'].toFixed(4)).to.eql(15518048489.267954.toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Percentage for Cedant name === 22MCG02010QS_20\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Cedant name'] === '22MCG02010QS_20');\r",
							"    pm.expect(NumberOfBuilding['Percentage'].toFixed(4)).to.eql(99.25677893408681.toFixed(4));\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Stock or Inventory\"],\"GroupByAttributes\":[\"Cedant name\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Number of Units/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '0');\r",
							"    pm.expect(NumberOfBuilding['Geocoded Resolution']).to.eql('0');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Units for Geocoded Resolution === 0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(NumberOfBuilding[\"Number of Units\"]).to.eql(51539607528);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '0');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.08691558323977837).toFixed(4));\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '1');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('1');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of Units for Geocoded Resolution === 1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Units for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(building[\"Number of Units\"]).to.eql(59236188918848);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '1');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(99.89497700358527).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '4');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('4');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of Units for Geocoded Resolution === 4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Units for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(building[\"Number of Units\"]).to.eql(6442450941);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '4');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(0.010864447904972296).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '5');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('5');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Number of Units for Geocoded Resolution === 5\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Number of Units for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(building[\"Number of Units\"]).to.eql(4294967294);\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '5');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(0.007242965269981531).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Number of Units\"],\"GroupByAttributes\":[\"Geocoded Resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value PD Property Damage/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '0');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('0');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '0');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(0.3115930815354346).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 0\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(building[\"Value Property Damage\"]).toFixed(4)).to.eql(parseFloat(682013182.39).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '1');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('1');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '1');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(99.68664686120931).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(building[\"Value Property Damage\"]).toFixed(4)).to.eql(parseFloat(218193571348.18112).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '4');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('4');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '4');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(0.00034539562536796284).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 4\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(building[\"Value Property Damage\"]).toFixed(4)).to.eql(parseFloat(756000).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '5');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('5');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '5');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(0.0014146616298788925).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 5\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Property Damage for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(building[\"Value Property Damage\"]).toFixed(4)).to.eql(parseFloat(3096403.41).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Property Damage\"],\"GroupByAttributes\":[\"Geocoded Resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Specie/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 0', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '0');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('0');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 0', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '0');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(0.3115930815354119).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 0\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 0\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(parseFloat(building[\"Value Specie\"]).toFixed(4)).to.eql(parseFloat(48715227.3136).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 1', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '1');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('1');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 1', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '1');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(99.68664686120934).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 1\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 1\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(building[\"Value Specie\"]).toFixed(4)).to.eql(parseFloat(15585255096.299797).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '4');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('4');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '4');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(10)).to.eql(parseFloat(0.0003453956253679376).toFixed(10));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 4\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(building[\"Value Specie\"]).toFixed(2)).to.eql(parseFloat(54000).toFixed(2));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === 5', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '5');\r",
							"    pm.expect(building['Geocoded Resolution']).to.eql('5');\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === 5', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '5');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(15)).to.eql(parseFloat(0.001414661629878789).toFixed(15));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 5\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Specie for Geocoded Resolution === 5\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(building[\"Value Specie\"]).toFixed(2)).to.eql(parseFloat(221171.67214285716).toFixed(2));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Specie\"],\"GroupByAttributes\":[\"Geocoded Resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Personal Property/Construction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:0');\r",
							"    pm.expect(NumberOfBuilding['Construction']).to.eql('RMSCGSPEC:0');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:0\");\r",
							"    pm.expect((NumberOfBuilding[\"Value Personal Property\"].toFixed(4))).to.eql(5411957.142857143.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:0');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.03461604299669668).toFixed(4));\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:11\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:11', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:11');\r",
							"    pm.expect(NumberOfBuilding['Construction']).to.eql('RMSCGSPEC:11');\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:11\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:11\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:11\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(27968480.265).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:11\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:11', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:11');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.17889242095778707).toFixed(4));\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:3\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:3', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:3');\r",
							"    pm.expect(NumberOfBuilding['Construction']).to.eql('RMSCGSPEC:3');\r",
							"})\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:3\"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:3\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:3\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(22810261.929710303).toFixed(4));\r",
							"});\r",
							"\r",
							"// Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:3\"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:3', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:3');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.1458993460003473).toFixed(4));\r",
							"})\r",
							"\r",
							"// Assertion for Construction === RMSCGSPEC:4\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:4');\r",
							"    pm.expect(building['Construction']).to.eql('RMSCGSPEC:4');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:4\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:4\");\r",
							"    pm.expect(parseFloat(building[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(798474341.6861532).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:4', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:4');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(5.107213788647061).toFixed(4));\r",
							"});\r",
							"\r",
							"// Assertion for Construction === RMSCGSPEC:8\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:8', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:8');\r",
							"    pm.expect(building['Construction']).to.eql('RMSCGSPEC:8');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:8\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:8\");\r",
							"    pm.expect(parseFloat(building[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(276180485.2012412).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:8', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:8');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(1.7665098407500592).toFixed(4));\r",
							"});\r",
							"\r",
							"// Assertion for Construction === RMSCGSPEC:9\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Construction for Construction === RMSCGSPEC:9', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:9');\r",
							"    pm.expect(building['Construction']).to.eql('RMSCGSPEC:9');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Personal Property for Construction === RMSCGSPEC:9\", () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item[\"Construction\"] === \"RMSCGSPEC:9\");\r",
							"    pm.expect(parseFloat(building[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(14503399969.06054).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Construction === RMSCGSPEC:9', () => {\r",
							"    const building = responseJson.Value.Analysis0.find(item => item['Construction'] === 'RMSCGSPEC:9');\r",
							"    pm.expect(parseFloat(building['Percentage']).toFixed(4)).to.eql(parseFloat(92.76686856064805).toFixed(4));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Personal Property\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Construction\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Machinery and Equipment/Occupancy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:1', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:1');\r",
							"    pm.expect(NumberOfBuilding['Occupancy']).to.eql('RMSMARINE:1');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:1\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:1\");\r",
							"    pm.expect((NumberOfBuilding[\"Value Machinery and Equipment\"].toFixed(4))).to.eql(52528767.177089565.toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:1', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:1');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.33598530349888556).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:10', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:10');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:10');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:10\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:10\");\r",
							"    pm.expect(item[\"Value Machinery and Equipment\"].toFixed(2)).to.eql(114759603.29543729.toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:10', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:10');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(12)).to.eql(parseFloat(0.7340271286520138).toFixed(12));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:11', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:11');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:11');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:11\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:11\");\r",
							"    pm.expect(item[\"Value Machinery and Equipment\"].toFixed(2)).to.eql(824615873.6501492.toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:11', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:11');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(12)).to.eql(parseFloat(5.274420654958438).toFixed(12));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:12', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:12');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:12');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:12\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:12\");\r",
							"    pm.expect(item[\"Value Machinery and Equipment\"].toFixed(2)).to.eql(217919473.41505766.toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:12', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:12');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.3938598666676763).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:13', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:13');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:13');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:13\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:13\");\r",
							"    pm.expect(item[\"Value Machinery and Equipment\"]).to.eql(22395000);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:13', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:13');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.1432432412984424).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:2', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:2');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:2');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:2\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:2\");\r",
							"    \r",
							"    pm.expect(item[\"Value Machinery and Equipment\"].toFixed(2)).to.eql(141289710.48.toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:2', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:2');\r",
							"   \r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.9037194057423975).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:3', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:3');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:3');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:3\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:3\");\r",
							"    pm.expect(parseFloat(item[\"Value Machinery and Equipment\"]).toFixed(4)).to.eql(parseFloat(5323337532.858646).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:3', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:3');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(34.049212892713825).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:4', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:4');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:4');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:4\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:4\");\r",
							"    pm.expect(parseFloat(item[\"Value Machinery and Equipment\"]).toFixed(2)).to.eql(parseFloat(88002759.28912972).toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:4', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:4');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.5628845940514201).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:5', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:5');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:5');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:5\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:5\");\r",
							"    pm.expect(parseFloat(item[\"Value Machinery and Equipment\"]).toFixed(2)).to.eql(parseFloat(1751263714.2871425).toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:5', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:5');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(11.201459736675135).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:6', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:6');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:6');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:6\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:6\");\r",
							"    pm.expect(parseFloat(item[\"Value Machinery and Equipment\"]).toFixed(2)).to.eql(parseFloat(476054638.13263094).toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:6', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:6');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(3.044947952724945).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:7', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:7');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:7');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:7\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:7\");\r",
							"    pm.expect(parseFloat(item[\"Value Machinery and Equipment\"]).toFixed(2)).to.eql(parseFloat(2178342142.612512).toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:7', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:7');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(13.93314530764948).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === RMSMARINE:9', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:9');\r",
							"    pm.expect(item['Occupancy']).to.eql('RMSMARINE:9');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for Occupancy === RMSMARINE:9\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"RMSMARINE:9\");\r",
							"    pm.expect(parseFloat(item[\"Value Machinery and Equipment\"]).toFixed(2)).to.eql(parseFloat(4443736280.083557).toFixed(2));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === RMSMARINE:9', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'RMSMARINE:9');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(28.423093915367346).toFixed(10));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Value Machinery and Equipment\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Occupancy\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Square Footage/TIV",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === <1M', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '<1M');\r",
							"    pm.expect(NumberOfBuilding['TIV Range']).to.eql('<1M');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Machinery and Equipment for TIV Range === <1M\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"<1M\");\r",
							"    pm.expect(NumberOfBuilding[\"Square Footage\"]).to.eql(45498736028989);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === <1M', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '<1M');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(76.72835258754934).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === 1M -5M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '1M -5M');\r",
							"    pm.expect(item['TIV Range']).to.eql('1M -5M');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Square Footage for TIV Range === 1M -5M\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"1M -5M\");\r",
							"    pm.expect(item[\"Square Footage\"]).to.eql(5832565585252);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === 1M -5M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '1M -5M');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(9.835946836634918).toFixed(10));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === 5M – 10M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '5M – 10M');\r",
							"    pm.expect(item['TIV Range']).to.eql('5M – 10M');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Square Footage for TIV Range === 5M – 10M\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"5M – 10M\");\r",
							"    pm.expect(item[\"Square Footage\"]).to.eql(1842540969126);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === 5M – 10M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '5M – 10M');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(3.1072321008220762).toFixed(10));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === 10M -50M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '10M -50M');\r",
							"    pm.expect(item['TIV Range']).to.eql('10M -50M');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Square Footage for TIV Range === 10M -50M\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"10M -50M\");\r",
							"    pm.expect(item[\"Square Footage\"]).to.eql(4436701214702);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === 10M -50M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '10M -50M');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(9)).to.eql(parseFloat(7.481983123890921).toFixed(9));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === 50M-100M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '50M-100M');\r",
							"    pm.expect(item['TIV Range']).to.eql('50M-100M');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Square Footage for TIV Range === 50M-100M\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"50M-100M\");\r",
							"    pm.expect(item[\"Square Footage\"]).to.eql(788126498449);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === 50M-100M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '50M-100M');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.329084127041611).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV.Bins for TIV Range === 50M-100M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"50M-100M\");\r",
							"    pm.expect(item[\"TIV.Bins\"]).to.eql(5);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === 100M-500M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '100M-500M');\r",
							"    pm.expect(item['TIV Range']).to.eql('100M-500M');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Square Footage for TIV Range === 100M-500M\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"100M-500M\");\r",
							"    pm.expect(item[\"Square Footage\"]).to.eql(818191269507);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === 100M-500M', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '100M-500M');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.3797848839314815).toFixed(10));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === 500M-1B', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '500M-1B');\r",
							"    pm.expect(item['TIV Range']).to.eql('500M-1B');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Square Footage for TIV Range === 500M-1B\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"500M-1B\");\r",
							"    pm.expect(item[\"Square Footage\"]).to.eql(51539607528);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === 500M-1B', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '500M-1B');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.08691558323977837).toFixed(10));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)TIV Range for TIV Range === >1B', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '>1B');\r",
							"    pm.expect(item['TIV Range']).to.eql('>1B');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Square Footage for TIV Range === >1B\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \">1B\");\r",
							"    pm.expect(item[\"Square Footage\"]).to.eql(30064771058);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for TIV Range === >1B', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['TIV Range'] === '>1B');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.050700756889870705).toFixed(10));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"Square Footage\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"TIV\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set analysis Chaucer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function() {\r",
							"    console.log(\"Next API Call After 2 Minutes \")\r",
							"}, 120000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Exposure\": {\r\n        \"id\": 22976,\r\n        \"object_sub_type\": \"portfolio\"\r\n    },\r\n    \"analysisObject\": [\r\n        {\r\n            \"CurrencyCode\": \"USD\",\r\n            \"IncludeAllContracts\": true,\r\n            \"damageAdjustment\": 1,\r\n            \"ValuationTypeCode\": 1,\r\n            \"ExposureFilterSets\": {\r\n        \"AssetModel\": \"ERBASICS\",\r\n        \"FilterList\": [\r\n          {\r\n            \"AndOr\": \"AND\",\r\n            \"FilterList\": [\r\n              {\r\n                \"AssetType\": \"Site\",\r\n                \"Attribute\": \"Cause Of Loss\",\r\n                \"Operator\": \"EQ\",\r\n                \"Value\": \"EQXX\",\r\n                \"AndOr\": \"OR\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n            \"quantile\": 50\r\n            \r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/load-exposure",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"load-exposure"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Buildings/Occupancy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:0');\r",
							"    pm.expect(NumberOfBuilding['Occupancy']).to.eql('ATC:0');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:0\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:0\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Buildings\"]).to.eql(533704611);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:0', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:0');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(3.005273574162349).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:1', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:1');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:1');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:1\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:1\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(7241154289);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:1', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:1');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(40.77470792390072).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:10', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:10');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:10');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:10\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:10\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(210789519);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:10', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:10');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.1869490315516356).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:11', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:11');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:11');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:11\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:11\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(113763818);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:11', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:11');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.6406004161939215).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:12', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:12');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:12');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:12\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:12\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(122048890);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:12', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:12');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.6872533913199551).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:13', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:13');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:13');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:13\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:13\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(197738151);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:13', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:13');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.1134571962767328).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:14', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:14');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:14');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:14\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:14\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(72831213);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:14', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:14');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.4101102281896705).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:15', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:15');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:15');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:15\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:15\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(118004425);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:15', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:15');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.6644791384174923).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:16', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:16');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:16');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:16\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:16\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(119431135);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:16', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:16');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.6725128967411451).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:17', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:17');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:17');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:17\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:17\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(159470624);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:17', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:17');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.8979739771489066).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:18', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:18');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:18');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:18\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:18\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(254766701);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:18', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:18');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.4345831351489309).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:19', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:19');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:19');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:19\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:19\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(108380567);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:19', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:19');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.6102875021962888).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:2', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:2');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:2');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:2\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:2\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(1363430479);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:2', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:2');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(7.677433367249311).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:20', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:20');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:20');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:20\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:20\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(142186565);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:20', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:20');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.8006479943929455).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:21', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:21');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:21');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:21\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:21\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(78709750);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:21', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:21');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.44321208179317184).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:22', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:22');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:22');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:22\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:22\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(207434141);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:22', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:22');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.168055005480113).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:23', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:23');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:23');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:23\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:23\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(64809621);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:23', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:23');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.3649409005064362).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:24', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:24');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:24');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:24\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:24\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(362190130);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:24', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:24');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(2.0394810239168533).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:25', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:25');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:25');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:25\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:25\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(142737312);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:25', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:25');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.8037492331138327).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:26', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:26');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:26');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:26\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:26\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(157595302);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:26', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:26');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.8874140990187825).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:27', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:27');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:27');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:27\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:27\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(110764674);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:27', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:27');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.6237123323690141).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:28', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:28');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:28');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:28\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:28\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(190210980);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:28', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:28');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.0710719374120663).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:29', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:29');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:29');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:29\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:29\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(2055612224);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:29', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:29');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(11.575086608184272).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:3', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:3');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:3');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:3\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:3\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(205733324);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:3', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:3');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.1584777594169606).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:30', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:30');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:30');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:30\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:30\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(142965500);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:30', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:30');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.8050341524347582).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:7', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:7');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:7');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:7\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:7\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(318139394);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:7', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:7');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.7914327401009167).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:8', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:8');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:8');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:8\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:8\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(754146564);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:8', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:8');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(4.246575152476122).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Occupancy for Occupancy === ATC:9', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:9');\r",
							"    pm.expect(item['Occupancy']).to.eql('ATC:9');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Buildings for Occupancy === ATC:9\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"Occupancy\"] === \"ATC:9\");\r",
							"    pm.expect(item[\"Value Buildings\"]).to.eql(192888413);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Occupancy === ATC:9', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['Occupancy'] === 'ATC:9');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.086148476897857).toFixed(10));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Buildings\"],\"GroupByAttributes\":[\"Occupancy\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Structures/Geocoded Resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Geocoded Resolution for Geocoded Resolution === ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '');\r",
							"    pm.expect(NumberOfBuilding['Geocoded Resolution']).to.eql('');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Structures for Geocoded Resolution === \", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded Resolution\"] === \"\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Structures\"]).to.eql(17717262052.3);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for Geocoded Resolution === ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded Resolution'] === '');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(100).toFixed(4));\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Structures\"],\"GroupByAttributes\":[\"Geocoded Resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Other Structures/County",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === 'Beaufort');\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql('Beaufort');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === \", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Beaufort\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Other Structures\"]).to.eql(165000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === 'Beaufort');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.39593070579159517).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Charleston', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Charleston');\r",
							"    pm.expect(item['County']).to.eql('Charleston');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Charleston\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Charleston\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(4403228);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Charleston', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Charleston');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(10.565897998795842).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Colleton', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Colleton');\r",
							"    pm.expect(item['County']).to.eql('Colleton');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Colleton\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Colleton\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(86166);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Colleton', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Colleton');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.2067622133044763).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Georgetown', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Georgetown');\r",
							"    pm.expect(item['County']).to.eql('Georgetown');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Georgetown\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Georgetown\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(392949);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Georgetown', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Georgetown');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.9429125752127365).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Horry', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Horry');\r",
							"    pm.expect(item['County']).to.eql('Horry');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Horry\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Horry\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(218000);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Horry', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Horry');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.5231084476519258).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === King', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'King');\r",
							"    pm.expect(item['County']).to.eql('King');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === King\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"King\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(28347836);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === King', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'King');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(68.02290130390539).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Kitsap', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Kitsap');\r",
							"    pm.expect(item['County']).to.eql('Kitsap');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Kitsap\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Kitsap\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(898000);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Kitsap', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Kitsap');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(2.154822871520318).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Maui', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Maui');\r",
							"    pm.expect(item['County']).to.eql('Maui');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Maui\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Maui\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(32500);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Maui', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Maui');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.07798635114076874).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Multnomah', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Multnomah');\r",
							"    pm.expect(item['County']).to.eql('Multnomah');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Multnomah\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Multnomah\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(572000);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Multnomah', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Multnomah');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.37255978007753).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Pacific', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Pacific');\r",
							"    pm.expect(item['County']).to.eql('Pacific');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Pacific\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Pacific\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(500000);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Pacific', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Pacific');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(1.1997900175502885).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Pierce', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Pierce');\r",
							"    pm.expect(item['County']).to.eql('Pierce');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Pierce\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Pierce\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(325000);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Pierce', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Pierce');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.7798635114076875).toFixed(10));\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Snohomish', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Snohomish');\r",
							"    pm.expect(item['County']).to.eql('Snohomish');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Snohomish\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Snohomish\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(5540000);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Snohomish', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Snohomish');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(13.293673394457194).toFixed(10));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)County for County === Washington', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Washington');\r",
							"    pm.expect(item['County']).to.eql('Washington');\r",
							"});\r",
							"\r",
							"pm.test(\"Validating HCC_MRN_ALL(Copy)Value Other Structures for County === Washington\", () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Washington\");\r",
							"    pm.expect(item[\"Value Other Structures\"]).to.eql(193280);\r",
							"});\r",
							"\r",
							"pm.test('Validating HCC_MRN_ALL(Copy)Percentage for County === Washington', () => {\r",
							"    const item = responseJson.Value.Analysis0.find(item => item['County'] === 'Washington');\r",
							"    pm.expect(parseFloat(item['Percentage']).toFixed(10)).to.eql(parseFloat(0.4637908291842395).toFixed(10));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Other Structures\"],\"GroupByAttributes\":[\"County\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Business Interruption/Geocoded resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 1', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '1');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('1');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Business Interruption for Geocoded resolution === \", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Business Interruption\"]).to.eql(505000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '1');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.018574792293205997).toFixed(4));\r",
							"})\r",
							"\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 2', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '2');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('2');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Business Interruption for Geocoded resolution === 2\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"2\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Business Interruption\"]).to.eql(2625384466.8802004);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === 2', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '2');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(96.5663).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 4', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '4');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('4');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Business Interruption for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Business Interruption\"]).to.eql(15021420);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === 4', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '4');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.5525).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 5', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '5');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('5');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Business Interruption for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(NumberOfBuilding[\"Value Business Interruption\"]).to.eql(77827455);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === 5', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '5');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(2.8626).toFixed(4));\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Business Interruption\"],\"GroupByAttributes\":[\"Geocoded resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Specie/Geocoded resolution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 1', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '1');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('1');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Business Interruption for Geocoded resolution === \", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"1\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Specie\"]).toFixed(4)).to.eql(parseFloat(1785.7142857142858).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '1');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0015927770897440831).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 2', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '2');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('2');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Specie for Geocoded resolution === 2\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"2\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Specie\"]).toFixed(4)).to.eql(parseFloat(107478563.0714).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === 2', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '2');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(95.8661).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 4', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '4');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('4');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Specie for Geocoded resolution === 4\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"4\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Specie\"]).toFixed(4)).to.eql(parseFloat(1314676.2857).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === 4', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '4');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(1.1726).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserGeocoded resolution for Geocoded resolution === 5', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '5');\r",
							"    pm.expect(NumberOfBuilding['Geocoded resolution']).to.eql('5');\r",
							"})\r",
							"\r",
							"pm.test(\"Validating ChauserValue Specie for Geocoded resolution === 5\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"Geocoded resolution\"] === \"5\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Specie\"]).toFixed(4)).to.eql(parseFloat(3318232.7857).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for Geocoded resolution === 5', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['Geocoded resolution'] === '5');\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(2.9597).toFixed(4));\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Specie\"],\"GroupByAttributes\":[\"Geocoded resolution\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Personal Property/County",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Ada', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Ada\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Ada\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === \", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Ada\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(62857.14285714286).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Ada\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.05606575355899193).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Benton', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Benton\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Benton\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Benton\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Benton\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(150660.4286).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Benton', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Benton\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.1344).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === COOS', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"COOS\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"COOS\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === COOS\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"COOS\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(58928.5714).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === COOS', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"COOS\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0526).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Cowlitz', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Cowlitz\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Cowlitz\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Cowlitz\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Cowlitz\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(98601.7857).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Cowlitz', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Cowlitz\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0879).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Davis', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Davis\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Davis\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Davis\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Davis\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(0).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Davis', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Davis\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Franklin', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Franklin\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Franklin\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Franklin\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Franklin\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(17857.1429).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Franklin', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Franklin\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0159).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Grant', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Grant\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Grant\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Grant\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Grant\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(78043.3571).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Grant', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Grant\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0696).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Hawaii', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Hawaii\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Hawaii\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Hawaii\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Hawaii\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(18628.5714).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Hawaii', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Hawaii\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0166).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Imperial', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Imperial\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Imperial\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Imperial\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Imperial\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(315714.2857).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Imperial', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Imperial\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.2816).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Jackson', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Jackson\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Jackson\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Jackson\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Jackson\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(27921.2857).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Jackson', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Jackson\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0249).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === KENAI PENINSULA BOROUGH', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"KENAI PENINSULA BOROUGH\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"KENAI PENINSULA BOROUGH\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === KENAI PENINSULA BOROUGH\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"KENAI PENINSULA BOROUGH\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(714.2857).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === KENAI PENINSULA BOROUGH', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"KENAI PENINSULA BOROUGH\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0006).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === LA PAZ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"LA PAZ\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"LA PAZ\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === LA PAZ\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"LA PAZ\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(21428.5714).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === LA PAZ', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"LA PAZ\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0191).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === MONO', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"MONO\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"MONO\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === MONO\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"MONO\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(0).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === MONO', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"MONO\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Napa', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Napa\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Napa\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Napa\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Napa\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(611590.2143).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Napa', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Napa\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.5455).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Pacific', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Pacific\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Pacific\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Pacific\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Pacific\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(714.2857).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Pacific', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Pacific\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0006).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Riverside', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Riverside\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Riverside\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Riverside\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Riverside\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(4436777.8571).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Riverside', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Riverside\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(3.9574).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === San Mateo', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"San Mateo\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"San Mateo\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === San Mateo\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"San Mateo\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(1236181.6429).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === San Mateo', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"San Mateo\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(1.1026).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Thurston', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Thurston\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Thurston\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Thurston\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Thurston\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(336122.3571).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Thurston', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Thurston\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.2998).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Yakima', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Yakima\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Yakima\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Personal Property for County === Yakima\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Yakima\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Personal Property\"]).toFixed(4)).to.eql(parseFloat(23703.0714).toFixed(4));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Yakima', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Yakima\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0211).toFixed(4));\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Personal Property\"],\"GroupByAttributes\":[\"County\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Value Time Element/County",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Ada', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Ada\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Ada\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Ada\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Ada\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(254000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Ada', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Ada\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.009342568796978859).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Beaufort', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Beaufort\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Beaufort\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Beaufort\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Beaufort\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(290000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Beaufort', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Beaufort\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0107).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Carson City', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Carson City\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Carson City\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Carson City\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Carson City\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(100000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Carson City', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Carson City\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0037).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Davis', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Davis\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Davis\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Davis\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Davis\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(0));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Davis', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Davis\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Georgetown', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Georgetown\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Georgetown\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Georgetown\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Georgetown\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(584000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Georgetown', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Georgetown\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0215).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Hawaii', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Hawaii\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Hawaii\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Hawaii\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Hawaii\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(150000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Hawaii', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Hawaii\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0055).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Jackson', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Jackson\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Jackson\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Jackson\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Jackson\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(1485000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Jackson', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Jackson\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0546).toFixed(4));\r",
							"})\r",
							"\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Kern', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Kern\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Kern\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Kern\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Kern\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(2900000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Kern', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Kern\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.1067).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Lane', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Lane\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Lane\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Lane\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Lane\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(5304600));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Lane', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Lane\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.1951).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Maricopa', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Maricopa\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Maricopa\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Maricopa\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Maricopa\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(100000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Maricopa', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Maricopa\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0037).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Napa', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Napa\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Napa\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Napa\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Napa\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(9871000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Napa', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Napa\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.3631).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Pacific', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Pacific\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Pacific\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Pacific\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Pacific\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(151200));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Pacific', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Pacific\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0056).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Riverside', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Riverside\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Riverside\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Riverside\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Riverside\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(48200480));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Riverside', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Riverside\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(1.7729).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === SAN BENITO', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"SAN BENITO\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"SAN BENITO\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === SAN BENITO\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"SAN BENITO\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(1175412));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === SAN BENITO', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"SAN BENITO\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0432).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === SAN BENITO', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"SAN BENITO\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"SAN BENITO\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === SAN BENITO\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"SAN BENITO\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(1175412));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === SAN BENITO', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"SAN BENITO\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0432).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === San Joaquin', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"San Joaquin\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"San Joaquin\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === San Joaquin\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"San Joaquin\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(8913555));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === San Joaquin', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"San Joaquin\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.3279).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Sonoma', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Sonoma\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Sonoma\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Sonoma\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Sonoma\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(7154323));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Sonoma', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Sonoma\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.2631).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Thurston', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Thurston\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Thurston\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Thurston\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Thurston\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(5261500));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Thurston', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Thurston\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.1935).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === WHITMAN', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"WHITMAN\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"WHITMAN\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === WHITMAN\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"WHITMAN\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(250000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === WHITMAN', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"WHITMAN\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0092).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Washoe', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Washoe\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Washoe\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Washoe\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Washoe\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(50000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Washoe', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Washoe\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0018).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Yakima', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Yakima\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Yakima\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Yakima\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Yakima\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(250000));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Yakima', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Yakima\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0092).toFixed(4));\r",
							"})\r",
							"\r",
							"pm.test('Validating ChauserCounty for County === Yamhill', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Yamhill\");\r",
							"    pm.expect(NumberOfBuilding['County']).to.eql(\"Yamhill\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validating Chauser Value Time Element for County === Yamhill\", () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item[\"County\"] === \"Yamhill\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding[\"Value Time Element\"])).to.eql(parseFloat(578400));\r",
							"});\r",
							"\r",
							"pm.test('Validating ChauserPercentage for County === Yamhill', () => {\r",
							"    const NumberOfBuilding = responseJson.Value.Analysis0.find(item => item['County'] === \"Yamhill\");\r",
							"    pm.expect(parseFloat(NumberOfBuilding['Percentage']).toFixed(4)).to.eql(parseFloat(0.0213).toFixed(4));\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"GroupByMeasures\":[\"Value Time Element\"],\"GroupByAttributes\":[\"County\"],\"includeAllBins\":true}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}