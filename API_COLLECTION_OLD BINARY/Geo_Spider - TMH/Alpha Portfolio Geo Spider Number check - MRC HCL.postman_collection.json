{
	"info": {
		"_postman_id": "239e67a4-8c33-4d72-b979-d449c0b2f8db",
		"name": "Alpha Portfolio Geo Spider Number check - MRC HCL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14426843",
		"_collection_link": "https://solar-shadow-896910.postman.co/workspace/alpha-18-03-~a4c6c3f1-c78c-43b8-a60c-866bee5368a5/collection/14426843-239e67a4-8c33-4d72-b979-d449c0b2f8db?action=share&source=collection_link&creator=14426843"
	},
	"item": [
		{
			"name": "Authentication and Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"//postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"pm.collectionVariables.set(\"v4tokenAlpha\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-forwarded-for",
						"value": "152.58.201.217",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"email\": \"nkumar@eigenrisk.com\",\r\n  \"apiKey\": \"789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://alpha-api.eigenrisk.com/apiLogin",
					"protocol": "https",
					"host": [
						"alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"apiLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Portfolio geo-spider-analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"//postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"pm.collectionVariables.set(\"requestId\", jsonData.requestId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{v4tokenAlpha}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Exposure\": {\r\n        \"id\": 23647,\r\n        \"object_sub_type\": \"portfolio\"\r\n    },\r\n    \"IncludeAllContracts\": true,\r\n    \"ApplyAllPerils\": false,\r\n    \"CurrencyCode\": \"USD\",\r\n    \"ExposureFilterSets\": {\r\n        \"FilterList\": [\r\n            {\r\n                \"AndOr\": \"AND\",\r\n                \"FilterList\": [\r\n                    {\r\n                        \"AssetType\": \"Site\",\r\n                        \"Attribute\": \"Cause Of Loss\",\r\n                        \"Operator\": \"EQ\",\r\n                        \"Value\": \"EQXX\",\r\n                        \"AndOr\": \"OR\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"AccumulateByAttribute\": {\r\n        \"AdditionalMeasures\": [\r\n            \"#Assets\",\r\n            \"#Contracts\",\r\n            \"TIV\",\r\n            \"GroundUpLoss\",\r\n            \"ContractLoss_Value All Types_EL\",\r\n            \"ContractLoss_Value All Types_GL\",\r\n            \"Gross Exposed Limit\",\r\n            \"Net Pre Cat Exposed Limit\",\r\n            \"Net Pre Cat Loss\",\r\n            \"Net of Fac Exposed Limit\",\r\n            \"Net of Fac Loss\",\r\n            \"Fac Exposed Limit\",\r\n            \"Fac loss\",\r\n            \"Treaty Exposed Limit\",\r\n            \"Treaty Loss\"\r\n        ],\r\n        \"Attributes\": [\r\n            \"State\",\r\n            \"Country\"\r\n        ],\r\n        \"Count\": 20,\r\n        \"Measure\": \"ContractLoss_Value All Types_EL\",\r\n        \"Peril\": \"Earthquake\",\r\n        \"SubPeril\": \"Shake\",\r\n        \"Operator\": \"GT\",\r\n        \"Threshold\": 0,\r\n        \"ThresholdEnd\": 0,\r\n        \"Contribution\": [\r\n            {\r\n                \"GroupByMeasures\": [\r\n                    \"TIV\"\r\n                ],\r\n                \"GroupByAttributes\": [\r\n                    \"Geocoded Resolution\",\r\n                    \"Country\"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://alpha-api.eigenrisk.com/analysis/geo-spider-analysis",
					"protocol": "https",
					"host": [
						"alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"geo-spider-analysis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Portfolio-geo-spider-progress",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"console.log(responseJson);\r",
							"\r",
							"if (responseJson.hasOwnProperty('error')) {\r",
							"    if (responseJson.error === \"Request unauthorized\") {\r",
							"        console.log(\"Authentication Failed. Re-running the Refresh token API\");\r",
							"        pm.collectionVariables.set(\"Flag\", \"true\");\r",
							"        postman.setNextRequest(\"Refresh token\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1.7 minutes before next request.\");\r",
							"        }, 100000);\r",
							"    } else if (responseJson.error === \"Please check the request id. No status available.\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    } else {\r",
							"        console.log(\"Authentication Failed. Re-running the Refresh token API\");\r",
							"        postman.setNextRequest(\"Refresh token\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1.7 minutes before next request.\");\r",
							"        }, 100000);\r",
							"    }\r",
							"} else if (responseJson.hasOwnProperty('Stage')) {\r",
							"    if (responseJson.Stage === \"In Queue\") {\r",
							"        console.log(\"Analysis is In Queue. Running the same API\");\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 2 minute before next request.\");\r",
							"        }, 120000);\r",
							"    } else if (responseJson.Stage === \"Started\") {\r",
							"        console.log(\"Analysis is Started. Running the same API\");\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1 minute before next request.\");\r",
							"        }, 60000);\r",
							"    } else if (responseJson.Percentage === 100) {\r",
							"        console.log(\"Success! Moving to next API\");\r",
							"        postman.setNextRequest(\"get-data-by-requestid\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1 minute before next request.\");\r",
							"        }, 60000);\r",
							"    } else if (responseJson.Stage === \"Computing accumulations\") {\r",
							"        console.log(\"Computation still not completed. Running the same API\");\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1 minute before next request.\");\r",
							"        }, 60000);\r",
							"    } else if (responseJson.Message === \"Unable to connect to Geo server\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    } else if (responseJson.Message === \"No server available to run the analysis\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    } else if (responseJson.Stage === \"Failed!\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    }\r",
							"     else {\r",
							"        console.log(\"Not Completed! Running the same API\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 5 minutes before next request.\");\r",
							"        }, 300000);\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"    }\r",
							"}\r",
							"else\r",
							"{ \r",
							"    console.log(\"Not Completed ! Runnnig same API\");\r",
							"    setTimeout(function(){\r",
							"          console.log(\"Sleeping for 5  minutes before next request.\");\r",
							"  }, 300000);\r",
							"     postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{v4tokenAlpha}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestId\": \"{{requestId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://alpha-api.eigenrisk.com/analysis/geo-spider-progress",
					"protocol": "https",
					"host": [
						"alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"geo-spider-progress"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"//postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"pm.collectionVariables.set(\"v4tokenAlpha\", jsonData.token);\r",
							"postman.setNextRequest(\"Portfolio-geo-spider-progress\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-forwarded-for",
						"value": "152.58.201.217",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"email\": \"nkumar@eigenrisk.com\",\r\n  \"apiKey\": \"789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/apiLogin",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"apiLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-data-by-requestid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"console.log('-------- TOP 20 Accumulations by Gross Exposed Limit >0 --------')\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['#Assets']).to.eql(727);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['#Contracts']).to.eql(137);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['TIV']).to.eql(19797860064.171375);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['GroundUpLoss']).to.eql(19797860064.171375);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['ContractLoss_Value All Types_EL']).to.eql(456195112.81030774);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['ContractLoss_Value All Types_GL']).to.eql(456195112.81030774);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net Pre Cat Exposed Limit']).to.eql(369781230.6708427);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net Pre Cat Loss']).to.eql(369781230.6708427);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net of Fac Exposed Limit']).to.eql(456195112.81030774);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net of Fac Loss']).to.eql(456195112.81030774);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Treaty Exposed Limit']).to.eql(86413882.13946554);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In First Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Treaty Loss']).to.eql(86413882.13946554);\r",
							"});\r",
							"\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['#Assets']).to.eql(684);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['#Contracts']).to.eql(89);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['TIV']).to.eql(17552868719.553165);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['GroundUpLoss']).to.eql(17552868719.553165);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['ContractLoss_Value All Types_EL']).to.eql(220582142.95969632);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['ContractLoss_Value All Types_GL']).to.eql(220582142.95969632);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net Pre Cat Exposed Limit']).to.eql(176844392.79387757);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net Pre Cat Loss']).to.eql(176844392.79387757);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net of Fac Exposed Limit']).to.eql(220582142.95969632);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net of Fac Loss']).to.eql(220582142.95969632);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Treaty Exposed Limit']).to.eql(43737750.16581921);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Second Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Treaty Loss']).to.eql(43737750.16581921);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['#Assets']).to.eql(1224);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['#Contracts']).to.eql(125);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['TIV']).to.eql(9177385443.380016);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['GroundUpLoss']).to.eql(9177385443.380016);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['ContractLoss_Value All Types_EL']).to.eql(158795865.0065362);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['ContractLoss_Value All Types_GL']).to.eql(158795865.0065362);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net Pre Cat Exposed Limit']).to.eql(136985796.64894763);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net Pre Cat Loss']).to.eql(136985796.64894763);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net of Fac Exposed Limit']).to.eql(158795865.0065362);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net of Fac Loss']).to.eql(158795865.0065362);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Treaty Exposed Limit']).to.eql(21810068.357588004);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Third Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Treaty Loss']).to.eql(21810068.357588004);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['#Assets']).to.eql(310);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['#Contracts']).to.eql(58);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['TIV']).to.eql(5005231629.579308);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['GroundUpLoss']).to.eql(5005231629.579308);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['ContractLoss_Value All Types_EL']).to.eql(136256858.16878617);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['ContractLoss_Value All Types_GL']).to.eql(136256858.16878617);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net Pre Cat Exposed Limit']).to.eql(111038388.60263364);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net Pre Cat Loss']).to.eql(111038388.60263364);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net of Fac Exposed Limit']).to.eql(136256858.16878617);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net of Fac Loss']).to.eql(136256858.16878617);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Treaty Exposed Limit']).to.eql(25218469.566152677);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Fourth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Treaty Loss']).to.eql(25218469.566152677);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['#Assets']).to.eql(245);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['#Contracts']).to.eql(31);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['TIV']).to.eql(9480364895.949999);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['GroundUpLoss']).to.eql(9480364895.949999);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['ContractLoss_Value All Types_EL']).to.eql(119190526.47171281);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['ContractLoss_Value All Types_GL']).to.eql(119190526.47171281);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net Pre Cat Exposed Limit']).to.eql(95352421.17737027);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net Pre Cat Loss']).to.eql(95352421.17737027);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net of Fac Exposed Limit']).to.eql(119190526.47171281);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net of Fac Loss']).to.eql(119190526.47171281);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Treaty Exposed Limit']).to.eql(23838105.294342574);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Fifth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Treaty Loss']).to.eql(23838105.294342574);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['#Assets']).to.eql(308);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['#Contracts']).to.eql(42);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['TIV']).to.eql(13211511410.084349);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['GroundUpLoss']).to.eql(13211511410.084349);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['ContractLoss_Value All Types_EL']).to.eql(114857143.1421513);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['ContractLoss_Value All Types_GL']).to.eql(114857143.1421513);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Net Pre Cat Exposed Limit']).to.eql(92005217.00933778);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Net Pre Cat Loss']).to.eql(92005217.00933778);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Net of Fac Exposed Limit']).to.eql(114857143.1421513);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Net of Fac Loss']).to.eql(114857143.1421513);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Treaty Exposed Limit']).to.eql(22851926.132813606);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Sixth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][5]['Treaty Loss']).to.eql(22851926.132813606);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['#Assets']).to.eql(233);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['#Contracts']).to.eql(46);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['TIV']).to.eql(3299684168.9900007);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['GroundUpLoss']).to.eql(3299684168.9900007);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['ContractLoss_Value All Types_EL']).to.eql(102981992.9908272);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['ContractLoss_Value All Types_GL']).to.eql(102981992.9908272);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Net Pre Cat Exposed Limit']).to.eql(82395025.25388579);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Net Pre Cat Loss']).to.eql(82395025.25388579);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Net of Fac Exposed Limit']).to.eql(102981992.9908272);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Net of Fac Loss']).to.eql(102981992.9908272);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Treaty Exposed Limit']).to.eql(20586967.736941352);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Seventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][6]['Treaty Loss']).to.eql(20586967.736941352);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['#Assets']).to.eql(464);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['#Contracts']).to.eql(55);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['TIV']).to.eql(4440677732.570003);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['GroundUpLoss']).to.eql(4440677732.570003);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['ContractLoss_Value All Types_EL']).to.eql(100382836.12224507);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['ContractLoss_Value All Types_GL']).to.eql(100382836.12224507);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Net Pre Cat Exposed Limit']).to.eql(80454819.27354717);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Net Pre Cat Loss']).to.eql(80454819.27354717);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Net of Fac Exposed Limit']).to.eql(100382836.12224507);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Net of Fac Loss']).to.eql(100382836.12224507);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Treaty Exposed Limit']).to.eql(19928016.848697785);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Eighth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][7]['Treaty Loss']).to.eql(19928016.848697785);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['#Assets']).to.eql(535);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['#Contracts']).to.eql(50);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['TIV']).to.eql(5867481829.029999);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['GroundUpLoss']).to.eql(5867481829.029999);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['ContractLoss_Value All Types_EL']).to.eql(94735458.52566083);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['ContractLoss_Value All Types_GL']).to.eql(94735458.52566083);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Net Pre Cat Exposed Limit']).to.eql(76335591.66630661);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Net Pre Cat Loss']).to.eql(76335591.66630661);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Net of Fac Exposed Limit']).to.eql(94735458.52566083);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Net of Fac Loss']).to.eql(94735458.52566083);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Treaty Exposed Limit']).to.eql(18399866.859354254);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Ninth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][8]['Treaty Loss']).to.eql(18399866.859354254);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['#Assets']).to.eql(212);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['#Contracts']).to.eql(42);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['TIV']).to.eql(3707061580.31);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['GroundUpLoss']).to.eql(3707061580.31);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['ContractLoss_Value All Types_EL']).to.eql(88291877.13577355);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['ContractLoss_Value All Types_GL']).to.eql(88291877.13577355);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Net Pre Cat Exposed Limit']).to.eql(70924701.69793773);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Net Pre Cat Loss']).to.eql(70924701.69793773);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Net of Fac Exposed Limit']).to.eql(88291877.13577355);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Net of Fac Loss']).to.eql(88291877.13577355);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Treaty Exposed Limit']).to.eql(17367175.437835872);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Tenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][9]['Treaty Loss']).to.eql(17367175.437835872);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['#Assets']).to.eql(312);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['#Contracts']).to.eql(50);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['TIV']).to.eql(3500966779.3584547);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['GroundUpLoss']).to.eql(3500966779.3584547);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['ContractLoss_Value All Types_EL']).to.eql(80550614.93133537);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['ContractLoss_Value All Types_GL']).to.eql(80550614.93133537);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Net Pre Cat Exposed Limit']).to.eql(64969876.2441006);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Net Pre Cat Loss']).to.eql(64969876.2441006);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Net of Fac Exposed Limit']).to.eql(80550614.93133537);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Net of Fac Loss']).to.eql(80550614.93133537);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Treaty Exposed Limit']).to.eql(15580738.687234782);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Eleventh Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][10]['Treaty Loss']).to.eql(15580738.687234782);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['#Assets']).to.eql(349);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['#Contracts']).to.eql(36);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['TIV']).to.eql(7265602100.199995);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['GroundUpLoss']).to.eql(7265602100.199995);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['ContractLoss_Value All Types_EL']).to.eql(72360361.59684512);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['ContractLoss_Value All Types_GL']).to.eql(72360361.59684512);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Net Pre Cat Exposed Limit']).to.eql(58538289.25363424);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Net Pre Cat Loss']).to.eql(58538289.25363424);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Net of Fac Exposed Limit']).to.eql(72360361.59684512);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Net of Fac Loss']).to.eql(72360361.59684512);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Treaty Exposed Limit']).to.eql(13822072.343210882);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Twelfth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][11]['Treaty Loss']).to.eql(13822072.343210882);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['#Assets']).to.eql(355);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['#Contracts']).to.eql(34);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['TIV']).to.eql(5190234612.929998);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['GroundUpLoss']).to.eql(5190234612.929998);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['ContractLoss_Value All Types_EL']).to.eql(59580786.79501247);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['ContractLoss_Value All Types_GL']).to.eql(59580786.79501247);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Net Pre Cat Exposed Limit']).to.eql(47859954.42884548);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Net Pre Cat Loss']).to.eql(47859954.42884548);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Net of Fac Exposed Limit']).to.eql(59580786.79501247);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Net of Fac Loss']).to.eql(59580786.79501247);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Treaty Exposed Limit']).to.eql(11720832.366166968);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Thirteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][12]['Treaty Loss']).to.eql(11720832.366166968);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['#Assets']).to.eql(312);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['#Contracts']).to.eql(32);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['TIV']).to.eql(2420565949.660002);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['GroundUpLoss']).to.eql(2420565949.660002);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['ContractLoss_Value All Types_EL']).to.eql(52341634.11571659);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['ContractLoss_Value All Types_GL']).to.eql(52341634.11571659);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Net Pre Cat Exposed Limit']).to.eql(41925013.12758677);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Net Pre Cat Loss']).to.eql(41925013.12758677);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Net of Fac Exposed Limit']).to.eql(52341634.11571659);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Net of Fac Loss']).to.eql(52341634.11571659);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Treaty Exposed Limit']).to.eql(10416620.98812989);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Fourteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][13]['Treaty Loss']).to.eql(10416620.98812989);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['#Assets']).to.eql(143);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['#Contracts']).to.eql(32);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['TIV']).to.eql(1830218352.8499992);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['GroundUpLoss']).to.eql(1830218352.8499992);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['ContractLoss_Value All Types_EL']).to.eql(51988819.05996055);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['ContractLoss_Value All Types_GL']).to.eql(51988819.05996055);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Net Pre Cat Exposed Limit']).to.eql(41630427.612284236);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Net Pre Cat Loss']).to.eql(41630427.612284236);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Net of Fac Exposed Limit']).to.eql(51988819.05996055);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Net of Fac Loss']).to.eql(51988819.05996055);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Treaty Exposed Limit']).to.eql(10358391.447676273);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Fifteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][14]['Treaty Loss']).to.eql(10358391.447676273);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['#Assets']).to.eql(536);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['#Contracts']).to.eql(32);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['TIV']).to.eql(3235638845.1599965);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['GroundUpLoss']).to.eql(3235638845.1599965);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['ContractLoss_Value All Types_EL']).to.eql(45356775.29086247);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['ContractLoss_Value All Types_GL']).to.eql(45356775.29086247);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Net Pre Cat Exposed Limit']).to.eql(36289320.23254692);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Net Pre Cat Loss']).to.eql(36289320.23254692);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Net of Fac Exposed Limit']).to.eql(45356775.29086247);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Net of Fac Loss']).to.eql(45356775.29086247);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Treaty Exposed Limit'].toFixed(4)).to.eql(9067455.058315545.toFixed(4));\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Sixteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][15]['Treaty Loss'].toFixed(4)).to.eql(9067455.058315545.toFixed(4));\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['#Assets']).to.eql(108);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['#Contracts']).to.eql(24);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['TIV']).to.eql(2911243258.190001);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['GroundUpLoss']).to.eql(2911243258.190001);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['ContractLoss_Value All Types_EL']).to.eql(41930701.38832025);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['ContractLoss_Value All Types_GL']).to.eql(41930701.38832025);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Net Pre Cat Exposed Limit']).to.eql(33804561.10111947);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Net Pre Cat Loss']).to.eql(33804561.10111947);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Net of Fac Exposed Limit']).to.eql(41930701.38832025);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Net of Fac Loss']).to.eql(41930701.38832025);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Treaty Exposed Limit']).to.eql(8126140.287200799);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Seventeenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][16]['Treaty Loss']).to.eql(8126140.287200799);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['#Assets']).to.eql(97);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['#Contracts']).to.eql(30);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['TIV']).to.eql(1602101840.8000002);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['GroundUpLoss']).to.eql(1602101840.8000002);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['ContractLoss_Value All Types_EL']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['ContractLoss_Value All Types_GL']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net Pre Cat Exposed Limit']).to.eql(33479584.241713256);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net Pre Cat Loss']).to.eql(33479584.241713256);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net of Fac Exposed Limit']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net of Fac Loss']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Treaty Exposed Limit']).to.eql(8174896.067580871);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Treaty Loss']).to.eql(8174896.067580871);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['#Assets']).to.eql(97);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['#Contracts']).to.eql(30);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['TIV']).to.eql(1602101840.8000002);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['GroundUpLoss']).to.eql(1602101840.8000002);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['ContractLoss_Value All Types_EL']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['ContractLoss_Value All Types_GL']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net Pre Cat Exposed Limit']).to.eql(33479584.241713256);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net Pre Cat Loss']).to.eql(33479584.241713256);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net of Fac Exposed Limit']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Net of Fac Loss']).to.eql(41654480.3092941);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Treaty Exposed Limit']).to.eql(8174896.067580871);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Eighteenth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][17]['Treaty Loss']).to.eql(8174896.067580871);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets\r",
							"pm.test('Validating #Assets In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['#Assets']).to.eql(85);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts\r",
							"pm.test('Validating #Contracts In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['#Contracts']).to.eql(24);\r",
							"});\r",
							"\r",
							"// Assertion for TIV\r",
							"pm.test('Validating TIV In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['TIV']).to.eql(997379524.4100003);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss\r",
							"pm.test('Validating GroundUpLoss In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['GroundUpLoss']).to.eql(997379524.4100003);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['ContractLoss_Value All Types_EL']).to.eql(38644873.95379983);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['ContractLoss_Value All Types_GL']).to.eql(38644873.95379983);\r",
							"});\r",
							"\r",
							"// Assertion for Gross Exposed Limit (assuming it's a missing field in the provided data)\r",
							"pm.test('Validating Gross Exposed Limit In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Gross Exposed Limit']).to.be.undefined;\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Net Pre Cat Exposed Limit']).to.eql(31564599.13924568);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss\r",
							"pm.test('Validating Net Pre Cat Loss In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Net Pre Cat Loss']).to.eql(31564599.13924568);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit\r",
							"pm.test('Validating Net of Fac Exposed Limit In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Net of Fac Exposed Limit']).to.eql(38644873.95379983);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss\r",
							"pm.test('Validating Net of Fac Loss In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Net of Fac Loss']).to.eql(38644873.95379983);\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit\r",
							"pm.test('Validating Fac Exposed Limit In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Fac loss\r",
							"pm.test('Validating Fac loss In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Fac loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit\r",
							"pm.test('Validating Treaty Exposed Limit In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Treaty Exposed Limit']).to.eql(7080274.814554138);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss\r",
							"pm.test('Validating Treaty Loss In Twentieth Row for Geo Spider without event exposure MRC_HCL', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][19]['Treaty Loss']).to.eql(7080274.814554138);\r",
							"});\r",
							"\r",
							"//------------------------CONTRIBUTION CHECKS ---------------------------//\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\", () => {\r",
							"    const NL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NL\");\r",
							"    pm.expect(NL[\"Country\"]).to.eql(\"NL\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\", () => {\r",
							"    const NL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NL\");\r",
							"    pm.expect(NL[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\", () => {\r",
							"    const NL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NL\");\r",
							"    pm.expect(NL[\"Percentage\"].toFixed(4)).to.eql(0.16275910882881436.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NL\", () => {\r",
							"    const NL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NL\");\r",
							"    pm.expect(NL[\"TIV\"].toFixed(4)).to.eql(248876330.15.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"Country\"]).to.eql(\"US\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"Geocoded Resolution\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"Percentage\"].toFixed(4)).to.eql(0.00392385508249944.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"TIV\"].toFixed(4)).to.eql(6000000.0000.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\", () => {\r",
							"    const IN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IN\");\r",
							"    pm.expect(IN[\"Country\"]).to.eql(\"IN\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\", () => {\r",
							"    const IN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IN\");\r",
							"    pm.expect(IN[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\", () => {\r",
							"    const IN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IN\");\r",
							"    pm.expect(IN[\"Percentage\"].toFixed(4)).to.eql(0.03950530555877405.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IN\", () => {\r",
							"    const IN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IN\");\r",
							"    pm.expect(IN[\"TIV\"].toFixed(4)).to.eql(60407896.9200.toFixed(4)); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\", () => {\r",
							"    const IT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IT\");\r",
							"    pm.expect(IT[\"Country\"]).to.eql(\"IT\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\", () => {\r",
							"    const IT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IT\");\r",
							"    pm.expect(IT[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\", () => {\r",
							"    const IT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IT\");\r",
							"    pm.expect(IT[\"Percentage\"].toFixed(4)).to.eql(0.0006866746394374021.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IT\", () => {\r",
							"    const IT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IT\");\r",
							"    pm.expect(IT[\"TIV\"].toFixed(4)).to.eql(1050000.0000.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\", () => {\r",
							"    const CN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CN\");\r",
							"    pm.expect(CN[\"Country\"]).to.eql(\"CN\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\", () => {\r",
							"    const CN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CN\");\r",
							"    pm.expect(CN[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\", () => {\r",
							"    const CN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CN\");\r",
							"    pm.expect(CN[\"Percentage\"].toFixed(4)).to.eql(0.4996264179218056.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CN\", () => {\r",
							"    const CN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CN\");\r",
							"    pm.expect(CN[\"TIV\"].toFixed(4)).to.eql(763982982.1700.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\", () => {\r",
							"    const KR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KR\");\r",
							"    pm.expect(KR[\"Country\"]).to.eql(\"KR\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\", () => {\r",
							"    const KR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KR\");\r",
							"    pm.expect(KR[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\", () => {\r",
							"    const KR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KR\");\r",
							"    pm.expect(KR[\"Percentage\"].toFixed(4)).to.eql(0.36620276013641856.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KR\", () => {\r",
							"    const KR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KR\");\r",
							"    pm.expect(KR[\"TIV\"].toFixed(4)).to.eql(559963738.3700.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"Country\"]).to.eql(\"US\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"Percentage\"].toFixed(4)).to.eql(92.1877.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country US\", () => {\r",
							"    const US = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"US\");\r",
							"    pm.expect(US[\"TIV\"].toFixed(4)).to.eql(140965008900.7688.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\", () => {\r",
							"    const SV = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SV\");\r",
							"    pm.expect(SV[\"Country\"]).to.eql(\"SV\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\", () => {\r",
							"    const SV = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SV\");\r",
							"    pm.expect(SV[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\", () => {\r",
							"    const SV = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SV\");\r",
							"    pm.expect(SV[\"Percentage\"].toFixed(4)).to.eql(0.0065.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SV\", () => {\r",
							"    const SV = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SV\");\r",
							"    pm.expect(SV[\"TIV\"]).to.eql(10000000); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\", () => {\r",
							"    const CH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CH\");\r",
							"    pm.expect(CH[\"Country\"]).to.eql(\"CH\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\", () => {\r",
							"    const CH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CH\");\r",
							"    pm.expect(CH[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\", () => {\r",
							"    const CH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CH\");\r",
							"    pm.expect(CH[\"Percentage\"].toFixed(4)).to.eql(0.0083.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CH\", () => {\r",
							"    const CH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CH\");\r",
							"    pm.expect(CH[\"TIV\"].toFixed(4)).to.eql(12724373.93.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\", () => {\r",
							"    const CA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CA\");\r",
							"    pm.expect(CA[\"Country\"]).to.eql(\"CA\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\", () => {\r",
							"    const CA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CA\");\r",
							"    pm.expect(CA[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\", () => {\r",
							"    const CA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CA\");\r",
							"    pm.expect(CA[\"Percentage\"].toFixed(4)).to.eql(0.4551.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CA\", () => {\r",
							"    const CA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CA\");\r",
							"    pm.expect(CA[\"TIV\"].toFixed(4)).to.eql(695973083.9200001.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\", () => {\r",
							"    const BR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BR\");\r",
							"    pm.expect(BR[\"Country\"]).to.eql(\"BR\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\", () => {\r",
							"    const BR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BR\");\r",
							"    pm.expect(BR[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\", () => {\r",
							"    const BR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BR\");\r",
							"    pm.expect(BR[\"Percentage\"].toFixed(4)).to.eql(0.1320.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BR\", () => {\r",
							"    const BR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BR\");\r",
							"    pm.expect(BR[\"TIV\"].toFixed(4)).to.eql(201813988.98100004.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"Country\"]).to.eql(\"GB\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"Percentage\"].toFixed(4)).to.eql(1.6106.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"TIV\"]).to.eql(2462714456.7248077); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\", () => {\r",
							"    const ES = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ES\");\r",
							"    pm.expect(ES[\"Country\"]).to.eql(\"ES\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\", () => {\r",
							"    const ES = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ES\");\r",
							"    pm.expect(ES[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\", () => {\r",
							"    const ES = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ES\");\r",
							"    pm.expect(ES[\"Percentage\"].toFixed(4)).to.eql(0.0007.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ES\", () => {\r",
							"    const ES = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ES\");\r",
							"    pm.expect(ES[\"TIV\"]).to.eql(1000000); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"Country\"]).to.eql(\"JP\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"Percentage\"].toFixed(4)).to.eql(0.1703.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"TIV\"]).to.eql(260375398.52); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\", () => {\r",
							"    const DO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DO\");\r",
							"    pm.expect(DO[\"Country\"]).to.eql(\"DO\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\", () => {\r",
							"    const DO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DO\");\r",
							"    pm.expect(DO[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\", () => {\r",
							"    const DO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DO\");\r",
							"    pm.expect(DO[\"Percentage\"].toFixed(4)).to.eql(0.0570.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DO\", () => {\r",
							"    const DO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DO\");\r",
							"    pm.expect(DO[\"TIV\"]).to.eql(87210350.96); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\", () => {\r",
							"    const BE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BE\");\r",
							"    pm.expect(BE[\"Country\"]).to.eql(\"BE\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\", () => {\r",
							"    const BE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BE\");\r",
							"    pm.expect(BE[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\", () => {\r",
							"    const BE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BE\");\r",
							"    pm.expect(BE[\"Percentage\"].toFixed(4)).to.eql(0.0155.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country BE\", () => {\r",
							"    const BE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"BE\");\r",
							"    pm.expect(BE[\"TIV\"]).to.eql(23731322.33); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\", () => {\r",
							"    const VI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VI\");\r",
							"    pm.expect(VI[\"Country\"]).to.eql(\"VI\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\", () => {\r",
							"    const VI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VI\");\r",
							"    pm.expect(VI[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\", () => {\r",
							"    const VI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VI\");\r",
							"    pm.expect(VI[\"Percentage\"].toFixed(4)).to.eql(0.0942.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VI\", () => {\r",
							"    const VI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VI\");\r",
							"    pm.expect(VI[\"TIV\"]).to.eql(144049349.29); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\", () => {\r",
							"    const NZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NZ\");\r",
							"    pm.expect(NZ[\"Country\"]).to.eql(\"NZ\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\", () => {\r",
							"    const NZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NZ\");\r",
							"    pm.expect(NZ[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\", () => {\r",
							"    const NZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NZ\");\r",
							"    pm.expect(NZ[\"Percentage\"].toFixed(4)).to.eql(0.0001.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NZ\", () => {\r",
							"    const NZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NZ\");\r",
							"    pm.expect(NZ[\"TIV\"]).to.eql(223603); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\", () => {\r",
							"    const FR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FR\");\r",
							"    pm.expect(FR[\"Country\"]).to.eql(\"FR\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\", () => {\r",
							"    const FR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FR\");\r",
							"    pm.expect(FR[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\", () => {\r",
							"    const FR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FR\");\r",
							"    pm.expect(FR[\"Percentage\"].toFixed(4)).to.eql(0.0395.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FR\", () => {\r",
							"    const FR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FR\");\r",
							"    pm.expect(FR[\"TIV\"]).to.eql(60328800); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\", () => {\r",
							"    const PL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PL\");\r",
							"    pm.expect(PL[\"Country\"]).to.eql(\"PL\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\", () => {\r",
							"    const PL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PL\");\r",
							"    pm.expect(PL[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\", () => {\r",
							"    const PL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PL\");\r",
							"    pm.expect(PL[\"Percentage\"].toFixed(4)).to.eql(0.0081.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PL\", () => {\r",
							"    const PL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PL\");\r",
							"    pm.expect(PL[\"TIV\"]).to.eql(12362266.42); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\", () => {\r",
							"    const DE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DE\");\r",
							"    pm.expect(DE[\"Country\"]).to.eql(\"DE\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\", () => {\r",
							"    const DE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DE\");\r",
							"    pm.expect(DE[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\", () => {\r",
							"    const DE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DE\");\r",
							"    pm.expect(DE[\"Percentage\"].toFixed(4)).to.eql(0.6879.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DE\", () => {\r",
							"    const DE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DE\");\r",
							"    pm.expect(DE[\"TIV\"].toFixed(4)).to.eql(1051895494.72.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\", () => {\r",
							"    const SG = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SG\");\r",
							"    pm.expect(SG[\"Country\"]).to.eql(\"SG\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\", () => {\r",
							"    const SG = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SG\");\r",
							"    pm.expect(SG[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\", () => {\r",
							"    const SG = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SG\");\r",
							"    pm.expect(SG[\"Percentage\"].toFixed(4)).to.eql(1.6928.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SG\", () => {\r",
							"    const SG = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SG\");\r",
							"    pm.expect(SG[\"TIV\"]).to.eql(2588442764.64); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\", () => {\r",
							"    const VN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VN\");\r",
							"    pm.expect(VN[\"Country\"]).to.eql(\"VN\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\", () => {\r",
							"    const VN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VN\");\r",
							"    pm.expect(VN[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\", () => {\r",
							"    const VN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VN\");\r",
							"    pm.expect(VN[\"Percentage\"].toFixed(4)).to.eql(0.0010.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country VN\", () => {\r",
							"    const VN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"VN\");\r",
							"    pm.expect(VN[\"TIV\"]).to.eql(1550000); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\", () => {\r",
							"    const FI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FI\");\r",
							"    pm.expect(FI[\"Country\"]).to.eql(\"FI\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\", () => {\r",
							"    const FI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FI\");\r",
							"    pm.expect(FI[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\", () => {\r",
							"    const FI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FI\");\r",
							"    pm.expect(FI[\"Percentage\"].toFixed(4)).to.eql(0.0002.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country FI\", () => {\r",
							"    const FI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"FI\");\r",
							"    pm.expect(FI[\"TIV\"]).to.eql(361345.81); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\", () => {\r",
							"    const NI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NI\");\r",
							"    pm.expect(NI[\"Country\"]).to.eql(\"NI\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\", () => {\r",
							"    const NI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NI\");\r",
							"    pm.expect(NI[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\", () => {\r",
							"    const NI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NI\");\r",
							"    pm.expect(NI[\"Percentage\"].toFixed(4)).to.eql(0.1614.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NI\", () => {\r",
							"    const NI = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NI\");\r",
							"    pm.expect(NI[\"TIV\"]).to.eql(246866318); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\", () => {\r",
							"    const TH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"TH\");\r",
							"    pm.expect(TH[\"Country\"]).to.eql(\"TH\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\", () => {\r",
							"    const TH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"TH\");\r",
							"    pm.expect(TH[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\", () => {\r",
							"    const TH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"TH\");\r",
							"    pm.expect(TH[\"Percentage\"].toFixed(4)).to.eql(0.0214.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country TH\", () => {\r",
							"    const TH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"TH\");\r",
							"    pm.expect(TH[\"TIV\"]).to.eql(32749632); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\", () => {\r",
							"    const DK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DK\");\r",
							"    pm.expect(DK[\"Country\"]).to.eql(\"DK\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\", () => {\r",
							"    const DK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DK\");\r",
							"    pm.expect(DK[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\", () => {\r",
							"    const DK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DK\");\r",
							"    pm.expect(DK[\"Percentage\"].toFixed(4)).to.eql(0.0016.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country DK\", () => {\r",
							"    const DK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"DK\");\r",
							"    pm.expect(DK[\"TIV\"]).to.eql(2424078); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\", () => {\r",
							"    const ID = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ID\");\r",
							"    pm.expect(ID[\"Country\"]).to.eql(\"ID\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\", () => {\r",
							"    const ID = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ID\");\r",
							"    pm.expect(ID[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\", () => {\r",
							"    const ID = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ID\");\r",
							"    pm.expect(ID[\"Percentage\"].toFixed(4)).to.eql(0.0003.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ID\", () => {\r",
							"    const ID = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ID\");\r",
							"    pm.expect(ID[\"TIV\"]).to.eql(431832.63); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"Country\"]).to.eql(\"MX\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"Percentage\"].toFixed(4)).to.eql(0.5842.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"TIV\"].toFixed(4)).to.eql(893367541.8103287.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\", () => {\r",
							"    const AU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AU\");\r",
							"    pm.expect(AU[\"Country\"]).to.eql(\"AU\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\", () => {\r",
							"    const AU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AU\");\r",
							"    pm.expect(AU[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\", () => {\r",
							"    const AU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AU\");\r",
							"    pm.expect(AU[\"Percentage\"].toFixed(4)).to.eql(0.2517.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AU\", () => {\r",
							"    const AU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AU\");\r",
							"    pm.expect(AU[\"TIV\"].toFixed(4)).to.eql(384812006.40248835.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\", () => {\r",
							"    const PA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PA\");\r",
							"    pm.expect(PA[\"Country\"]).to.eql(\"PA\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\", () => {\r",
							"    const PA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PA\");\r",
							"    pm.expect(PA[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\", () => {\r",
							"    const PA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PA\");\r",
							"    pm.expect(PA[\"Percentage\"].toFixed(4)).to.eql(0.0139.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PA\", () => {\r",
							"    const PA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PA\");\r",
							"    pm.expect(PA[\"TIV\"]).to.eql(21218914.32); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\", () => {\r",
							"    const IE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IE\");\r",
							"    pm.expect(IE[\"Country\"]).to.eql(\"IE\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\", () => {\r",
							"    const IE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IE\");\r",
							"    pm.expect(IE[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\", () => {\r",
							"    const IE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IE\");\r",
							"    pm.expect(IE[\"Percentage\"].toFixed(4)).to.eql(0.0028.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IE\", () => {\r",
							"    const IE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IE\");\r",
							"    pm.expect(IE[\"TIV\"]).to.eql(4216908.81); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\", () => {\r",
							"    const CR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CR\");\r",
							"    pm.expect(CR[\"Country\"]).to.eql(\"CR\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\", () => {\r",
							"    const CR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CR\");\r",
							"    pm.expect(CR[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\", () => {\r",
							"    const CR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CR\");\r",
							"    pm.expect(CR[\"Percentage\"].toFixed(4)).to.eql(0.0174.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CR\", () => {\r",
							"    const CR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CR\");\r",
							"    pm.expect(CR[\"TIV\"]).to.eql(26675186); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\", () => {\r",
							"    const MY = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MY\");\r",
							"    pm.expect(MY[\"Country\"]).to.eql(\"MY\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\", () => {\r",
							"    const MY = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MY\");\r",
							"    pm.expect(MY[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\", () => {\r",
							"    const MY = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MY\");\r",
							"    pm.expect(MY[\"Percentage\"].toFixed(4)).to.eql(0.3352.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country MY\", () => {\r",
							"    const MY = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"MY\");\r",
							"    pm.expect(MY[\"TIV\"].toFixed(4)).to.eql(512504112.65999997.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\", () => {\r",
							"    const LK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"LK\");\r",
							"    pm.expect(LK[\"Country\"]).to.eql(\"LK\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\", () => {\r",
							"    const LK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"LK\");\r",
							"    pm.expect(LK[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\", () => {\r",
							"    const LK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"LK\");\r",
							"    pm.expect(LK[\"Percentage\"].toFixed(4)).to.eql(0.0081.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country LK\", () => {\r",
							"    const LK = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"LK\");\r",
							"    pm.expect(LK[\"TIV\"]).to.eql(12410000); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"Country\"]).to.eql(\"JP\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"Geocoded Resolution\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"Percentage\"].toFixed(4)).to.eql(0.00261590338833296.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country JP\", () => {\r",
							"    const JP = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"JP\");\r",
							"    pm.expect(JP[\"TIV\"]).to.eql(4000000); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\", () => {\r",
							"    const KE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KE\");\r",
							"    pm.expect(KE[\"Country\"]).to.eql(\"KE\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\", () => {\r",
							"    const KE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KE\");\r",
							"    pm.expect(KE[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\", () => {\r",
							"    const KE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KE\");\r",
							"    pm.expect(KE[\"Percentage\"].toFixed(4)).to.eql(0.000002228625431448736.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KE\", () => {\r",
							"    const KE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KE\");\r",
							"    pm.expect(KE[\"TIV\"]).to.eql(3407.81); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\", () => {\r",
							"    const HN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HN\");\r",
							"    pm.expect(HN[\"Country\"]).to.eql(\"HN\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\", () => {\r",
							"    const HN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HN\");\r",
							"    pm.expect(HN[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\", () => {\r",
							"    const HN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HN\");\r",
							"    pm.expect(HN[\"Percentage\"].toFixed(4)).to.eql(0.00017392880038687018.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HN\", () => {\r",
							"    const HN = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HN\");\r",
							"    pm.expect(HN[\"TIV\"]).to.eql(265956); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\", () => {\r",
							"    const KH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KH\");\r",
							"    pm.expect(KH[\"Country\"]).to.eql(\"KH\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\", () => {\r",
							"    const KH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KH\");\r",
							"    pm.expect(KH[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\", () => {\r",
							"    const KH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KH\");\r",
							"    pm.expect(KH[\"Percentage\"].toFixed(4)).to.eql(0.0032698792354162003.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country KH\", () => {\r",
							"    const KH = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"KH\");\r",
							"    pm.expect(KH[\"TIV\"]).to.eql(5000000); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\", () => {\r",
							"    const SE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SE\");\r",
							"    pm.expect(SE[\"Country\"]).to.eql(\"SE\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\", () => {\r",
							"    const SE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SE\");\r",
							"    pm.expect(SE[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\", () => {\r",
							"    const SE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SE\");\r",
							"    pm.expect(SE[\"Percentage\"].toFixed(4)).to.eql(0.0015333620487344882.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country SE\", () => {\r",
							"    const SE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"SE\");\r",
							"    pm.expect(SE[\"TIV\"]).to.eql(2344676.88); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\", () => {\r",
							"    const IL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IL\");\r",
							"    pm.expect(IL[\"Country\"]).to.eql(\"IL\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\", () => {\r",
							"    const IL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IL\");\r",
							"    pm.expect(IL[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\", () => {\r",
							"    const IL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IL\");\r",
							"    pm.expect(IL[\"Percentage\"].toFixed(4)).to.eql(0.016514141220806314.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country IL\", () => {\r",
							"    const IL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"IL\");\r",
							"    pm.expect(IL[\"TIV\"]).to.eql(25251913.04); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"Country\"]).to.eql(\"GB\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"Geocoded Resolution\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"Percentage\"].toFixed(4)).to.eql(0.0014480889085587121.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country GB\", () => {\r",
							"    const GB = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"GB\");\r",
							"    pm.expect(GB[\"TIV\"]).to.eql(2214285); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\", () => {\r",
							"    const AR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AR\");\r",
							"    pm.expect(AR[\"Country\"]).to.eql(\"AR\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\", () => {\r",
							"    const AR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AR\");\r",
							"    pm.expect(AR[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\", () => {\r",
							"    const AR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AR\");\r",
							"    pm.expect(AR[\"Percentage\"].toFixed(4)).to.eql(0.004837153685643317.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AR\", () => {\r",
							"    const AR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AR\");\r",
							"    pm.expect(AR[\"TIV\"].toFixed(4)).to.eql(7396532.620000001.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\", () => {\r",
							"    const HT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HT\");\r",
							"    pm.expect(HT[\"Country\"]).to.eql(\"HT\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\", () => {\r",
							"    const HT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HT\");\r",
							"    pm.expect(HT[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\", () => {\r",
							"    const HT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HT\");\r",
							"    pm.expect(HT[\"Percentage\"].toFixed(4)).to.eql(0.00588578262374916.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HT\", () => {\r",
							"    const HT = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HT\");\r",
							"    pm.expect(HT[\"TIV\"]).to.eql(9000000); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\", () => {\r",
							"    const PR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PR\");\r",
							"    pm.expect(PR[\"Country\"]).to.eql(\"PR\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\", () => {\r",
							"    const PR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PR\");\r",
							"    pm.expect(PR[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\", () => {\r",
							"    const PR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PR\");\r",
							"    pm.expect(PR[\"Percentage\"].toFixed(4)).to.eql(0.25098769430495593.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country PR\", () => {\r",
							"    const PR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"PR\");\r",
							"    pm.expect(PR[\"TIV\"].toFixed(4)).to.eql(383787406.5600001.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\", () => {\r",
							"    const NO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NO\");\r",
							"    pm.expect(NO[\"Country\"]).to.eql(\"NO\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\", () => {\r",
							"    const NO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NO\");\r",
							"    pm.expect(NO[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\", () => {\r",
							"    const NO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NO\");\r",
							"    pm.expect(NO[\"Percentage\"].toFixed(4)).to.eql(0.00004486441074832033.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country NO\", () => {\r",
							"    const NO = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"NO\");\r",
							"    pm.expect(NO[\"TIV\"]).to.eql(68602.55); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\", () => {\r",
							"    const CL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CL\");\r",
							"    pm.expect(CL[\"Country\"]).to.eql(\"CL\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\", () => {\r",
							"    const CL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CL\");\r",
							"    pm.expect(CL[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\", () => {\r",
							"    const CL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CL\");\r",
							"    pm.expect(CL[\"Percentage\"].toFixed(4)).to.eql(0.01204088216709022.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CL\", () => {\r",
							"    const CL = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CL\");\r",
							"    pm.expect(CL[\"TIV\"]).to.eql(18411814.78); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\", () => {\r",
							"    const ZA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ZA\");\r",
							"    pm.expect(ZA[\"Country\"]).to.eql(\"ZA\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\", () => {\r",
							"    const ZA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ZA\");\r",
							"    pm.expect(ZA[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\", () => {\r",
							"    const ZA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ZA\");\r",
							"    pm.expect(ZA[\"Percentage\"].toFixed(4)).to.eql(0.01374839055473735.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country ZA\", () => {\r",
							"    const ZA = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"ZA\");\r",
							"    pm.expect(ZA[\"TIV\"]).to.eql(21022780.3); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"Country\"]).to.eql(\"MX\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"Geocoded Resolution\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"Percentage\"].toFixed(4)).to.eql(0.0035045342710356784.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 0 for Country MX\", () => {\r",
							"    const MX = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\" && item[\"Country\"] === \"MX\");\r",
							"    pm.expect(MX[\"TIV\"]).to.eql(5358813); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\", () => {\r",
							"    const AE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AE\");\r",
							"    pm.expect(AE[\"Country\"]).to.eql(\"AE\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\", () => {\r",
							"    const AE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AE\");\r",
							"    pm.expect(AE[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\", () => {\r",
							"    const AE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AE\");\r",
							"    pm.expect(AE[\"Percentage\"].toFixed(4)).to.eql(0.013422600584152419.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country AE\", () => {\r",
							"    const AE = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"AE\");\r",
							"    pm.expect(AE[\"TIV\"]).to.eql(20524612.1); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\", () => {\r",
							"    const HU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HU\");\r",
							"    pm.expect(HU[\"Country\"]).to.eql(\"HU\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\", () => {\r",
							"    const HU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HU\");\r",
							"    pm.expect(HU[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\", () => {\r",
							"    const HU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HU\");\r",
							"    pm.expect(HU[\"Percentage\"].toFixed(4)).to.eql(0.0046712559571694505.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country HU\", () => {\r",
							"    const HU = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"HU\");\r",
							"    pm.expect(HU[\"TIV\"]).to.eql(7142857); \r",
							"});\r",
							"\r",
							"// Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\r",
							"pm.test(\"Validating Country in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\", () => {\r",
							"    const CZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CZ\");\r",
							"    pm.expect(CZ[\"Country\"]).to.eql(\"CZ\"); \r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\", () => {\r",
							"    const CZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CZ\");\r",
							"    pm.expect(CZ[\"Geocoded Resolution\"]).to.eql(\"1\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\", () => {\r",
							"    const CZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CZ\");\r",
							"    pm.expect(CZ[\"Percentage\"].toFixed(4)).to.eql(0.0005263156351449965.toFixed(4)); \r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution without event exposure OM 2212 - Fleet(Copy), Geocoded Resolution == 1 for Country CZ\", () => {\r",
							"    const CZ = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"1\" && item[\"Country\"] === \"CZ\");\r",
							"    pm.expect(CZ[\"TIV\"]).to.eql(804793.69); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{v4tokenAlpha}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestId\": \"{{requestId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://alpha-api.eigenrisk.com/get-data-by-requestid",
					"protocol": "https",
					"host": [
						"alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-data-by-requestid"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "requestID",
			"value": ""
		},
		{
			"key": "{{State}}",
			"value": "",
			"type": "string"
		},
		{
			"key": "v4tokenAlpha",
			"value": ""
		},
		{
			"key": "requestId",
			"value": ""
		}
	]
}