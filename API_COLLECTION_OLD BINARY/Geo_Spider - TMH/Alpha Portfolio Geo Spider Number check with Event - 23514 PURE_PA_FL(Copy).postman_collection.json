{
	"info": {
		"_postman_id": "a2968dc1-0ec2-4bdc-9594-102aa03bb6f3",
		"name": "Alpha Portfolio Geo Spider Number check with Event - 23514 PURE_PA_FL(Copy)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33412147"
	},
	"item": [
		{
			"name": "Authentication and Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"//postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"pm.collectionVariables.set(\"v4tokenAlpha\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-forwarded-for",
						"value": "152.58.201.217",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"email\": \"nkumar@eigenrisk.com\",\r\n  \"apiKey\": \"789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/apiLogin",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"apiLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Portfolio geo-spider-analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"//postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"pm.collectionVariables.set(\"requestId\", jsonData.requestId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{v4tokenAlpha}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Exposure\": {\r\n        \"id\": 23514,\r\n        \"object_sub_type\": \"portfolio\"\r\n    },\r\n    \"IncludeAllContracts\": true,\r\n    \"ApplyAllPerils\": false,\r\n    \"CurrencyCode\": \"USD\",\r\n    \"ExposureFilterSets\": {\r\n        \"FilterList\": [\r\n            {\r\n                \"AndOr\": \"AND\",\r\n                \"FilterList\": [\r\n                    {\r\n                        \"AssetType\": \"Site\",\r\n                        \"Attribute\": \"Cause Of Loss\",\r\n                        \"Operator\": \"EQ\",\r\n                        \"Value\": \"FLXX\",\r\n                        \"AndOr\": \"OR\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"AndOr\": \"AND\",\r\n                \"FilterList\": [\r\n                    {\r\n                        \"AssetType\": \"Site\",\r\n                        \"Attribute\": \"Country\",\r\n                        \"Operator\": \"EQ\",\r\n                        \"Value\": \"US\",\r\n                        \"AndOr\": \"OR\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"AndOr\": \"AND\",\r\n                \"FilterList\": [\r\n                    {\r\n                        \"AssetType\": \"Site\",\r\n                        \"Attribute\": \"State\",\r\n                        \"Operator\": \"EQ\",\r\n                        \"Value\": \"CA\",\r\n                        \"AndOr\": \"OR\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n,\r\n\"AccumulateByAttribute\": {\r\n\"AdditionalMeasures\": [\r\n    \"#Assets\",\r\n    \"#Contracts\",\r\n    \"TIV\",\r\n    \"GroundUpLoss\",\r\n    \"ContractLoss_Value All Types_EL\",\r\n    \"ContractLoss_Value All Types_GL\",\r\n    \"Gross Exposed Limit\",\r\n    \"Net Pre Cat Exposed Limit\",\r\n    \"Net Pre Cat Loss\",\r\n    \"Net of Fac Exposed Limit\",\r\n    \"Net of Fac Loss\",\r\n    \"Fac Exposed Limit\",\r\n    \"Fac loss\",\r\n    \"Treaty Exposed Limit\",\r\n    \"Treaty Loss\"\r\n],\r\n\"Attributes\": [\r\n    \"State\",\r\n    \"Country\"\r\n],\r\n\"Contribution\": [\r\n    {\r\n        \"GroupByMeasures\": [\r\n            \"TIV\"\r\n        ],\r\n        \"GroupByAttributes\": [\r\n            \"Geocoded Resolution\",\r\n            \"Country\"\r\n        ]\r\n    }\r\n],\r\n\"Count\": 21,\r\n\"Measure\": \"ContractLoss_Value All Types_EL\",\r\n\"Peril\": \"Flood\",\r\n\"SubPeril\": \"Coastal Flood\",\r\n\"Operator\": \"GT\",\r\n\"Threshold\": 0,\r\n\"ThresholdEnd\": 0,\r\n\"EventID\": 1530875,\r\n\"SeverityModelID\": 422\r\n}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/geo-spider-analysis",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"geo-spider-analysis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Portfolio-geo-spider-progress",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"console.log(responseJson);\r",
							"\r",
							"if (responseJson.hasOwnProperty('error')) {\r",
							"    if (responseJson.error === \"Request unauthorized\") {\r",
							"        console.log(\"Authentication Failed. Re-running the Refresh token API\");\r",
							"        pm.collectionVariables.set(\"Flag\", \"true\");\r",
							"        postman.setNextRequest(\"Refresh token\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1.7 minutes before next request.\");\r",
							"        }, 100000);\r",
							"    } else if (responseJson.error === \"Please check the request id. No status available.\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    } else {\r",
							"        console.log(\"Authentication Failed. Re-running the Refresh token API\");\r",
							"        postman.setNextRequest(\"Refresh token\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1.7 minutes before next request.\");\r",
							"        }, 100000);\r",
							"    }\r",
							"} else if (responseJson.hasOwnProperty('Stage')) {\r",
							"    if (responseJson.Stage === \"In Queue\") {\r",
							"        console.log(\"Analysis is In Queue. Running the same API\");\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 2 minute before next request.\");\r",
							"        }, 120000);\r",
							"    } else if (responseJson.Stage === \"Started\") {\r",
							"        console.log(\"Analysis is Started. Running the same API\");\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1 minute before next request.\");\r",
							"        }, 60000);\r",
							"    } else if (responseJson.Percentage === 100) {\r",
							"        console.log(\"Success! Moving to next API\");\r",
							"        postman.setNextRequest(\"get-data-by-requestid\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1 minute before next request.\");\r",
							"        }, 60000);\r",
							"    } else if (responseJson.Stage === \"Computing accumulations\") {\r",
							"        console.log(\"Computation still not completed. Running the same API\");\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 1 minute before next request.\");\r",
							"        }, 60000);\r",
							"    } else if (responseJson.Message === \"Unable to connect to Geo server\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    } else if (responseJson.Message === \"No server available to run the analysis\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    } else if (responseJson.Stage === \"Failed!\") {\r",
							"        console.log(\"Facing a crash. Starting the same iteration\");\r",
							"        postman.setNextRequest(\"Authentication and Authorization\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 15 minutes before next request.\");\r",
							"        }, 900000);\r",
							"    }\r",
							"     else {\r",
							"        console.log(\"Not Completed! Running the same API\");\r",
							"        setTimeout(function() {\r",
							"            console.log(\"Sleeping for 5 minutes before next request.\");\r",
							"        }, 300000);\r",
							"        postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"    }\r",
							"}\r",
							"else\r",
							"{ \r",
							"    console.log(\"Not Completed ! Runnnig same API\");\r",
							"    setTimeout(function(){\r",
							"          console.log(\"Sleeping for 5  minutes before next request.\");\r",
							"  }, 300000);\r",
							"     postman.setNextRequest(\"Portfolio-geo-spider-progress\");\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{v4tokenAlpha}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestId\": \"{{requestId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/geo-spider-progress",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"geo-spider-progress"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"//postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"pm.collectionVariables.set(\"v4tokenAlpha\", jsonData.token);\r",
							"postman.setNextRequest(\"Portfolio-geo-spider-progress\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-forwarded-for",
						"value": "152.58.201.217",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"email\": \"nkumar@eigenrisk.com\",\r\n  \"apiKey\": \"789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/apiLogin",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"apiLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-data-by-requestid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"//Contribution check \r",
							"// Validating Country in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\r",
							"pm.test(\"Validating Country in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\", () => {\r",
							"    const GR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(GR[\"Country\"]).to.eql(\"US\");\r",
							"});\r",
							"\r",
							"// Validating Geocoded Resolution in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\r",
							"pm.test(\"Validating Geocoded Resolution in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\", () => {\r",
							"    const GR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(GR[\"Geocoded Resolution\"]).to.eql(\"5\");\r",
							"});\r",
							"\r",
							"// Validating Percentage in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\r",
							"pm.test(\"Validating Percentage in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\", () => {\r",
							"    const GR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(GR[\"Percentage\"]).to.eql(99.899687740244);\r",
							"});\r",
							"\r",
							"// Validating TIV in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\r",
							"pm.test(\"Validating TIV in Geo Spider Contribution with event PURE PA FL, Geocoded Resolution == 5\", () => {\r",
							"    const GR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"5\");\r",
							"    pm.expect(GR[\"TIV\"]).to.eql(918603294.3200003);\r",
							"});\r",
							"\r",
							"// Validating Percentage for Geocoded Resolution 0 in Geo Spider Contribution with event PURE PA FL\r",
							"pm.test(\"Validating Percentage for Geocoded Resolution 0 in Geo Spider Contribution with event PURE PA FL\", () => {\r",
							"    const GR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(GR[\"Percentage\"]).to.eql(0.100312259755992);\r",
							"});\r",
							"\r",
							"// Validating TIV for Geocoded Resolution 0 in Geo Spider Contribution with event PURE PA FL\r",
							"pm.test(\"Validating TIV for Geocoded Resolution 0 in Geo Spider Contribution with event PURE PA FL\", () => {\r",
							"    const GR = responseJson.Value.Analysis0.Contribution[0].Results.find(item => item[\"Geocoded Resolution\"] === \"0\");\r",
							"    pm.expect(GR[\"TIV\"]).to.eql(922397);\r",
							"});\r",
							"\r",
							"\r",
							"console.log(\"-------- TOP 20 Accumulations by Gross Exposed Limit >0 --------\")\r",
							"\r",
							"// Assertion for #Assets in the first row\r",
							"pm.test('Validating #Assets In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['#Assets']).to.eql(13243);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts in the first row\r",
							"pm.test('Validating #Contracts In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['#Contracts']).to.eql(5091);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL in the first row\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['ContractLoss_Value All Types_EL']).to.eql(703388382.0699999);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL in the first row\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['ContractLoss_Value All Types_GL']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Country in the first row\r",
							"pm.test('Validating Country In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Country']).to.eql(\"US\");\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit in the first row\r",
							"pm.test('Validating Fac Exposed Limit In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss in the first row\r",
							"pm.test('Validating GroundUpLoss In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['GroundUpLoss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit in the first row\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net Pre Cat Exposed Limit']).to.eql(703388382.0699999);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss in the first row\r",
							"pm.test('Validating Net Pre Cat Loss In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net Pre Cat Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit in the first row\r",
							"pm.test('Validating Net of Fac Exposed Limit In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net of Fac Exposed Limit']).to.eql(703388382.0699999);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss in the first row\r",
							"pm.test('Validating Net of Fac Loss In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Net of Fac Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for State in the first row\r",
							"pm.test('Validating State In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['State']).to.eql(\"CA\");\r",
							"});\r",
							"\r",
							"// Assertion for TIV in the first row\r",
							"pm.test('Validating TIV In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['TIV']).to.eql(718194032.0699999);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit in the first row\r",
							"pm.test('Validating Treaty Exposed Limit In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Treaty Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss in the first row\r",
							"pm.test('Validating Treaty Loss In First Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][0]['Treaty Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets in the second row\r",
							"pm.test('Validating #Assets In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['#Assets']).to.eql(12);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts in the second row\r",
							"pm.test('Validating #Contracts In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['#Contracts']).to.eql(6);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL in the second row\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['ContractLoss_Value All Types_EL']).to.eql(579851);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL in the second row\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['ContractLoss_Value All Types_GL']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Country in the second row\r",
							"pm.test('Validating Country In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Country']).to.eql(\"US\");\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit in the second row\r",
							"pm.test('Validating Fac Exposed Limit In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss in the second row\r",
							"pm.test('Validating GroundUpLoss In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['GroundUpLoss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Intensity Range in the second row\r",
							"pm.test('Validating Intensity Range In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Intensity Range']).to.eql(\"< 9 ft\");\r",
							"});\r",
							"\r",
							"// Assertion for Intensity.Bins in the second row\r",
							"pm.test('Validating Intensity.Bins In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Intensity.Bins']).to.eql(2);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit in the second row\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net Pre Cat Exposed Limit']).to.eql(579851);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss in the second row\r",
							"pm.test('Validating Net Pre Cat Loss In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net Pre Cat Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit in the second row\r",
							"pm.test('Validating Net of Fac Exposed Limit In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net of Fac Exposed Limit']).to.eql(579851);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss in the second row\r",
							"pm.test('Validating Net of Fac Loss In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Net of Fac Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for State in the second row\r",
							"pm.test('Validating State In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['State']).to.eql(\"CA\");\r",
							"});\r",
							"\r",
							"// Assertion for TIV in the second row\r",
							"pm.test('Validating TIV In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['TIV']).to.eql(591851);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit in the second row\r",
							"pm.test('Validating Treaty Exposed Limit In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Treaty Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss in the second row\r",
							"pm.test('Validating Treaty Loss In Second Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][1]['Treaty Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets in the third row\r",
							"pm.test('Validating #Assets In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['#Assets']).to.eql(235);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts in the third row\r",
							"pm.test('Validating #Contracts In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['#Contracts']).to.eql(110);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL in the third row\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['ContractLoss_Value All Types_EL']).to.eql(12041851.54);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL in the third row\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['ContractLoss_Value All Types_GL']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Country in the third row\r",
							"pm.test('Validating Country In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Country']).to.eql(\"US\");\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit in the third row\r",
							"pm.test('Validating Fac Exposed Limit In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss in the third row\r",
							"pm.test('Validating GroundUpLoss In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['GroundUpLoss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Intensity Range in the third row\r",
							"pm.test('Validating Intensity Range In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Intensity Range']).to.eql(\"< 6 ft\");\r",
							"});\r",
							"\r",
							"// Assertion for Intensity.Bins in the third row\r",
							"pm.test('Validating Intensity.Bins In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Intensity.Bins']).to.eql(3);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit in the third row\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net Pre Cat Exposed Limit']).to.eql(12041851.54);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss in the third row\r",
							"pm.test('Validating Net Pre Cat Loss In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net Pre Cat Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit in the third row\r",
							"pm.test('Validating Net of Fac Exposed Limit In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net of Fac Exposed Limit']).to.eql(12041851.54);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss in the third row\r",
							"pm.test('Validating Net of Fac Loss In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Net of Fac Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for State in the third row\r",
							"pm.test('Validating State In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['State']).to.eql(\"CA\");\r",
							"});\r",
							"\r",
							"// Assertion for TIV in the third row\r",
							"pm.test('Validating TIV In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['TIV']).to.eql(12287551.54);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit in the third row\r",
							"pm.test('Validating Treaty Exposed Limit In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Treaty Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss in the third row\r",
							"pm.test('Validating Treaty Loss In Third Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][2]['Treaty Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets in the fourth row\r",
							"pm.test('Validating #Assets In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['#Assets']).to.eql(344);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts in the fourth row\r",
							"pm.test('Validating #Contracts In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['#Contracts']).to.eql(172);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL in the fourth row\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['ContractLoss_Value All Types_EL']).to.eql(19853432.53);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL in the fourth row\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['ContractLoss_Value All Types_GL']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Country in the fourth row\r",
							"pm.test('Validating Country In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Country']).to.eql(\"US\");\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit in the fourth row\r",
							"pm.test('Validating Fac Exposed Limit In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss in the fourth row\r",
							"pm.test('Validating GroundUpLoss In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['GroundUpLoss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Intensity Range in the fourth row\r",
							"pm.test('Validating Intensity Range In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Intensity Range']).to.eql(\"< 3 ft\");\r",
							"});\r",
							"\r",
							"// Assertion for Intensity.Bins in the fourth row\r",
							"pm.test('Validating Intensity.Bins In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Intensity.Bins']).to.eql(4);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit in the fourth row\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net Pre Cat Exposed Limit']).to.eql(19853432.53);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss in the fourth row\r",
							"pm.test('Validating Net Pre Cat Loss In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net Pre Cat Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit in the fourth row\r",
							"pm.test('Validating Net of Fac Exposed Limit In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net of Fac Exposed Limit']).to.eql(19853432.53);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss in the fourth row\r",
							"pm.test('Validating Net of Fac Loss In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Net of Fac Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for State in the fourth row\r",
							"pm.test('Validating State In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['State']).to.eql(\"CA\");\r",
							"});\r",
							"\r",
							"// Assertion for TIV in the fourth row\r",
							"pm.test('Validating TIV In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['TIV']).to.eql(20241282.53);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit in the fourth row\r",
							"pm.test('Validating Treaty Exposed Limit In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Treaty Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss in the fourth row\r",
							"pm.test('Validating Treaty Loss In Fourth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][3]['Treaty Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for #Assets in the fifth row\r",
							"pm.test('Validating #Assets In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['#Assets']).to.eql(3020);\r",
							"});\r",
							"\r",
							"// Assertion for #Contracts in the fifth row\r",
							"pm.test('Validating #Contracts In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['#Contracts']).to.eql(1283);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_EL in the fifth row\r",
							"pm.test('Validating ContractLoss_Value All Types_EL In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['ContractLoss_Value All Types_EL']).to.eql(164773624.18);\r",
							"});\r",
							"\r",
							"// Assertion for ContractLoss_Value All Types_GL in the fifth row\r",
							"pm.test('Validating ContractLoss_Value All Types_GL In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['ContractLoss_Value All Types_GL']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Country in the fifth row\r",
							"pm.test('Validating Country In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Country']).to.eql(\"US\");\r",
							"});\r",
							"\r",
							"// Assertion for Fac Exposed Limit in the fifth row\r",
							"pm.test('Validating Fac Exposed Limit In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Fac Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for GroundUpLoss in the fifth row\r",
							"pm.test('Validating GroundUpLoss In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['GroundUpLoss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Intensity Range in the fifth row\r",
							"pm.test('Validating Intensity Range In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Intensity Range']).to.eql(\"< 1 ft\");\r",
							"});\r",
							"\r",
							"// Assertion for Intensity.Bins in the fifth row\r",
							"pm.test('Validating Intensity.Bins In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Intensity.Bins']).to.eql(5);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Exposed Limit in the fifth row\r",
							"pm.test('Validating Net Pre Cat Exposed Limit In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net Pre Cat Exposed Limit']).to.eql(164773624.18);\r",
							"});\r",
							"\r",
							"// Assertion for Net Pre Cat Loss in the fifth row\r",
							"pm.test('Validating Net Pre Cat Loss In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net Pre Cat Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Exposed Limit in the fifth row\r",
							"pm.test('Validating Net of Fac Exposed Limit In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net of Fac Exposed Limit']).to.eql(164773624.18);\r",
							"});\r",
							"\r",
							"// Assertion for Net of Fac Loss in the fifth row\r",
							"pm.test('Validating Net of Fac Loss In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Net of Fac Loss']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for State in the fifth row\r",
							"pm.test('Validating State In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['State']).to.eql(\"CA\");\r",
							"});\r",
							"\r",
							"// Assertion for TIV in the fifth row\r",
							"pm.test('Validating TIV In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['TIV']).to.eql(168210974.18000004);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Exposed Limit in the fifth row\r",
							"pm.test('Validating Treaty Exposed Limit In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Treaty Exposed Limit']).to.eql(0);\r",
							"});\r",
							"\r",
							"// Assertion for Treaty Loss in the fifth row\r",
							"pm.test('Validating Treaty Loss In Fifth Row', () => {\r",
							"    pm.expect(responseJson.Value.Analysis0['Topn Accumulations'][4]['Treaty Loss']).to.eql(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{v4tokenAlpha}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestId\": \"{{requestId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-data-by-requestid",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-data-by-requestid"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "requestID",
			"value": ""
		},
		{
			"key": "{{State}}",
			"value": "",
			"type": "string"
		},
		{
			"key": "v4tokenAlpha",
			"value": ""
		},
		{
			"key": "requestId",
			"value": ""
		}
	]
}