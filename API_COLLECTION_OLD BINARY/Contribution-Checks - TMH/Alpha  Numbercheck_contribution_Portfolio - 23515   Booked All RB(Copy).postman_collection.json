{
	"info": {
		"_postman_id": "103f03b1-ae35-43a0-8dc2-e32ad3862651",
		"name": "Alpha  Numbercheck_contribution_Portfolio - 23515   Booked All RB(Copy)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33412147"
	},
	"item": [
		{
			"name": "Authentication and Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();  \r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-forwarded-for",
						"value": "152.58.201.217",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"email\": \"nkumar@eigenrisk.com\",\r\n  \"apiKey\": \"789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/apiLogin",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"apiLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function() {\r",
							"    console.log(\"Next API Call After 2 Minutes \")\r",
							"}, 120000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Exposure\": {\r\n        \"id\": 23515,\r\n        \"object_sub_type\": \"portfolio\"\r\n    },\r\n    \"analysisObject\": [\r\n        {\r\n            \"CurrencyCode\": \"USD\",\r\n            \"IncludeAllContracts\": true,\r\n            \"damageAdjustment\": 1,\r\n            \"ValuationTypeCode\": 1,\r\n            \"ExposureFilterSets\": {\r\n        \"AssetModel\": \"ERBASICS\",\r\n        \"FilterList\": [\r\n          {\r\n            \"AndOr\": \"AND\",\r\n            \"FilterList\": [\r\n              {\r\n                \"AssetType\": \"Site\",\r\n                \"Attribute\": \"Cause Of Loss\",\r\n                \"Operator\": \"EQ\",\r\n                \"Value\": \"EQXX\",\r\n                \"AndOr\": \"OR\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n            \"quantile\": 50\r\n            \r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/analysis/load-exposure",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"analysis",
						"load-exposure"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/Wiring year range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							" console.log(\"--------TIV BY Wiring year range--------\") \r",
							"\r",
							"pm.test(\"Validating Wiring year Range === No assets condition , TIV BY Wiring year range TIV MARINE \", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0).to.eql([]);\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Wiring year\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/HVAC year range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							" console.log(\"--------TIV BY HVAC year range--------\") \r",
							"\r",
							"pm.test(\"Validating HVAC year range === No assets condition , TIV BY HVAC year range TIV MARINE \", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0).to.eql([]);\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"HVAC year\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/Roof year range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							"console.log(\"--------TIV BY Roof year range--------\")\r",
							"\r",
							"\r",
							"pm.test(\"Validating Roof Year Range === No assets condition , TIV BY Roof Year Range TIV MARINE \", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0).to.eql([]);\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Roof Year\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/plumbing  year range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							" console.log(\"--------TIV BY Plumbing year Range--------\") \r",
							"\r",
							"\r",
							" pm.test(\"Validating  Plumbing year Range === No assets condition , TIV BY  Plumbing year Range TIV MARINE \", () => {\r",
							"  pm.expect(responseJson.Value.Analysis0).to.eql([]);\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Plumbing year\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/ # Unit range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"// Validating Percentage for Number of Units Range === Unknown\r",
							"pm.test(\"Validating Percentage for Number of Units Range === Unknown\", () => {\r",
							"    const NumberofUnitsRange = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"Unknown\");\r",
							"    pm.expect(NumberofUnitsRange[\"Percentage\"]).to.eql(100); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === Unknown\r",
							"pm.test(\"Validating TIV for Number of Units Range === Unknown\", () => {\r",
							"    const NumberofUnitsRange = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"Unknown\");\r",
							"    pm.expect(NumberofUnitsRange[\"TIV\"]).to.eql(3217803045004.221); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Units Range === Unknown\r",
							"pm.test(\"Validating Percentage for Number of Units Range === Unknown\", () => {\r",
							"    const NumberofUnitsRange0 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"Unknown\");\r",
							"    pm.expect(NumberofUnitsRange0[\"Number of Units Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Units Range === 0\r",
							"pm.test(\"Validating Percentage for Number of Units Range === 0\", () => {\r",
							"    const NumberofUnitsRange0 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"0\");\r",
							"    pm.expect(NumberofUnitsRange0[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === 0\r",
							"pm.test(\"Validating TIV for Number of Units Range === 0\", () => {\r",
							"    const NumberofUnitsRange0 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"0\");\r",
							"    pm.expect(NumberofUnitsRange0[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of Units Range for Number of Units Range === 0\r",
							"pm.test(\"Validating Number of Units Range for Number of Units Range === 0\", () => {\r",
							"    const NumberofUnitsRange0 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"0\");\r",
							"    pm.expect(NumberofUnitsRange0[\"Number of Units Range\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Units Range === 1-2\r",
							"pm.test(\"Validating Percentage for Number of Units Range === 1-2\", () => {\r",
							"    const NumberofUnitsRange1to2 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"1-2\");\r",
							"    pm.expect(NumberofUnitsRange1to2[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === 1-2\r",
							"pm.test(\"Validating TIV for Number of Units Range === 1-2\", () => {\r",
							"    const NumberofUnitsRange1to2 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"1-2\");\r",
							"    pm.expect(NumberofUnitsRange1to2[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of Units Range for Number of Units Range === 1-2\r",
							"pm.test(\"Validating Number of Units Range for Number of Units Range === 1-2\", () => {\r",
							"    const NumberofUnitsRange1to2 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"1-2\");\r",
							"    pm.expect(NumberofUnitsRange1to2[\"Number of Units Range\"]).to.eql(\"1-2\"); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating Percentage for Number of Units Range === 3 - 5\r",
							"pm.test(\"Validating Percentage for Number of Units Range === 3 - 5\", () => {\r",
							"    const NumberofUnitsRange3_5 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"3 - 5\");\r",
							"    pm.expect(NumberofUnitsRange3_5[\"Percentage\"]).to.eql(0);\r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === 3 - 5\r",
							"pm.test(\"Validating TIV for Number of Units Range === 3 - 5\", () => {\r",
							"    const NumberofUnitsRange3_5 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"3 - 5\");\r",
							"    pm.expect(NumberofUnitsRange3_5[\"TIV\"]).to.eql(0);\r",
							"});\r",
							"\r",
							"// Validating Number of Units Range for Number of Units Range === 3 - 5\r",
							"pm.test(\"Validating Number of Units Range for Number of Units Range === 3 - 5\", () => {\r",
							"    const NumberofUnitsRange3_5 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"3 - 5\");\r",
							"    pm.expect(NumberofUnitsRange3_5[\"Number of Units Range\"]).to.eql(\"3 - 5\");\r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Units Range === 6 - 10\r",
							"pm.test(\"Validating Percentage for Number of Units Range === 6 - 10\", () => {\r",
							"    const NumberofUnitsRange6to10 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"6 - 10\");\r",
							"    pm.expect(NumberofUnitsRange6to10[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === 6 - 10\r",
							"pm.test(\"Validating TIV for Number of Units Range === 6 - 10\", () => {\r",
							"    const NumberofUnitsRange6to10 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"6 - 10\");\r",
							"    pm.expect(NumberofUnitsRange6to10[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of Units Range for Number of Units Range === 6 - 10\r",
							"pm.test(\"Validating Number of Units Range for Number of Units Range === 6 - 10\", () => {\r",
							"    const NumberofUnitsRange6to10 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"6 - 10\");\r",
							"    pm.expect(NumberofUnitsRange6to10[\"Number of Units Range\"]).to.eql(\"6 - 10\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Units Range === 11 - 50\r",
							"pm.test(\"Validating Percentage for Number of Units Range === 11 - 50\", () => {\r",
							"    const NumberofUnitsRange11to50 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"11 - 50\");\r",
							"    pm.expect(NumberofUnitsRange11to50[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === 11 - 50\r",
							"pm.test(\"Validating TIV for Number of Units Range === 11 - 50\", () => {\r",
							"    const NumberofUnitsRange11to50 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"11 - 50\");\r",
							"    pm.expect(NumberofUnitsRange11to50[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of Units Range for Number of Units Range === 11 - 50\r",
							"pm.test(\"Validating Number of Units Range for Number of Units Range === 11 - 50\", () => {\r",
							"    const NumberofUnitsRange11to50 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"11 - 50\");\r",
							"    pm.expect(NumberofUnitsRange11to50[\"Number of Units Range\"]).to.eql(\"11 - 50\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Units Range === 51 - 100\r",
							"pm.test(\"Validating Percentage for Number of Units Range === 51 - 100\", () => {\r",
							"    const NumberofUnitsRange51to100 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"51 - 100\");\r",
							"    pm.expect(NumberofUnitsRange51to100[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === 51 - 100\r",
							"pm.test(\"Validating TIV for Number of Units Range === 51 - 100\", () => {\r",
							"    const NumberofUnitsRange51to100 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"51 - 100\");\r",
							"    pm.expect(NumberofUnitsRange51to100[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of Units Range for Number of Units Range === 51 - 100\r",
							"pm.test(\"Validating Number of Units Range for Number of Units Range === 51 - 100\", () => {\r",
							"    const NumberofUnitsRange51to100 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"51 - 100\");\r",
							"    pm.expect(NumberofUnitsRange51to100[\"Number of Units Range\"]).to.eql(\"51 - 100\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Units Range === 101 - 200\r",
							"pm.test(\"Validating Percentage for Number of Units Range === 101 - 200\", () => {\r",
							"    const NumberofUnitsRange101to200 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"101 - 200\");\r",
							"    pm.expect(NumberofUnitsRange101to200[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Units Range === 101 - 200\r",
							"pm.test(\"Validating TIV for Number of Units Range === 101 - 200\", () => {\r",
							"    const NumberofUnitsRange101to200 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"101 - 200\");\r",
							"    pm.expect(NumberofUnitsRange101to200[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of Units Range for Number of Units Range === 101 - 200\r",
							"pm.test(\"Validating Number of Units Range for Number of Units Range === 101 - 200\", () => {\r",
							"    const NumberofUnitsRange101to200 = responseJson.Value.Analysis0.find(item => item[\"Number of Units Range\"] === \"101 - 200\");\r",
							"    pm.expect(NumberofUnitsRange101to200[\"Number of Units Range\"]).to.eql(\"101 - 200\"); \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Number of Units\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv / Distance to Coast Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"console.log(\"--------TIV BY Distance To Coast Range--------\") \r",
							"// Validating Percentage for Distance To Coast Range === Unknown\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === Unknown\", () => {\r",
							"    const DistanceToCoastUnknown = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"Unknown\");\r",
							"    pm.expect(DistanceToCoastUnknown[\"Percentage\"].toFixed(2)).to.eql(46.02365638031498.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === Unknown\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === Unknown\", () => {\r",
							"    const DistanceToCoastUnknown = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"Unknown\");\r",
							"    pm.expect(DistanceToCoastUnknown[\"TIV\"].toFixed(2)).to.eql(1480950616428.032.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === Unknown\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === Unknown\", () => {\r",
							"    const DistanceToCoastUnknown = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"Unknown\");\r",
							"    pm.expect(DistanceToCoastUnknown[\"Distance To Coast Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Distance To Coast Range === 0\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === 0\", () => {\r",
							"    const DistanceToCoast0 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"0\");\r",
							"    pm.expect(DistanceToCoast0[\"Percentage\"].toFixed(2)).to.eql(0.017541427274252494.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === 0\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === 0\", () => {\r",
							"    const DistanceToCoast0 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"0\");\r",
							"    pm.expect(DistanceToCoast0[\"TIV\"].toFixed(2)).to.eql(564448580.9681613.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === 0\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === 0\", () => {\r",
							"    const DistanceToCoast0 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"0\");\r",
							"    pm.expect(DistanceToCoast0[\"Distance To Coast Range\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Distance To Coast Range === <=5\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === <=5\", () => {\r",
							"    const DistanceToCoastLessThanEqual5 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"<=5\");\r",
							"    pm.expect(DistanceToCoastLessThanEqual5[\"Percentage\"].toFixed(2)).to.eql(11.422571633633808.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === <=5\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === <=5\", () => {\r",
							"    const DistanceToCoastLessThanEqual5 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"<=5\");\r",
							"    pm.expect(DistanceToCoastLessThanEqual5[\"TIV\"].toFixed(2)).to.eql(367555857844.89124.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === <=5\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === <=5\", () => {\r",
							"    const DistanceToCoastLessThanEqual5 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"<=5\");\r",
							"    pm.expect(DistanceToCoastLessThanEqual5[\"Distance To Coast Range\"]).to.eql(\"<=5\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Distance To Coast Range === 5 - 10\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === 5 - 10\", () => {\r",
							"    const DistanceToCoast5To10 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"5 - 10\");\r",
							"    pm.expect(DistanceToCoast5To10[\"Percentage\"].toFixed(2)).to.eql(3.844127539528567.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === 5 - 10\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === 5 - 10\", () => {\r",
							"    const DistanceToCoast5To10 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"5 - 10\");\r",
							"    pm.expect(DistanceToCoast5To10[\"TIV\"].toFixed(2)).to.eql(123696453020.81003.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === 5 - 10\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === 5 - 10\", () => {\r",
							"    const DistanceToCoast5To10 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"5 - 10\");\r",
							"    pm.expect(DistanceToCoast5To10[\"Distance To Coast Range\"]).to.eql(\"5 - 10\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Distance To Coast Range === 10 - 50\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === 10 - 50\", () => {\r",
							"    const DistanceToCoast10To50 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"10 - 50\");\r",
							"    pm.expect(DistanceToCoast10To50[\"Percentage\"].toFixed(2)).to.eql(15.180159107448887.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === 10 - 50\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === 10 - 50\", () => {\r",
							"    const DistanceToCoast10To50 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"10 - 50\");\r",
							"    pm.expect(DistanceToCoast10To50[\"TIV\"].toFixed(2)).to.eql(488467621996.05094.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === 10 - 50\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === 10 - 50\", () => {\r",
							"    const DistanceToCoast10To50 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"10 - 50\");\r",
							"    pm.expect(DistanceToCoast10To50[\"Distance To Coast Range\"]).to.eql(\"10 - 50\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Distance To Coast Range === 50 - 100\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === 50 - 100\", () => {\r",
							"    const DistanceToCoast50To100 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"50 - 100\");\r",
							"    pm.expect(DistanceToCoast50To100[\"Percentage\"].toFixed(2)).to.eql(9.498645161136322.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === 50 - 100\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === 50 - 100\", () => {\r",
							"    const DistanceToCoast50To100 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"50 - 100\");\r",
							"    pm.expect(DistanceToCoast50To100[\"TIV\"].toFixed(2)).to.eql(305647693229.22516.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === 50 - 100\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === 50 - 100\", () => {\r",
							"    const DistanceToCoast50To100 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"50 - 100\");\r",
							"    pm.expect(DistanceToCoast50To100[\"Distance To Coast Range\"]).to.eql(\"50 - 100\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Distance To Coast Range === 100 - 150\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === 100 - 150\", () => {\r",
							"    const DistanceToCoast100To150 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"100 - 150\");\r",
							"    pm.expect(DistanceToCoast100To150[\"Percentage\"].toFixed(2)).to.eql(3.0546590852855435.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === 100 - 150\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === 100 - 150\", () => {\r",
							"    const DistanceToCoast100To150 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"100 - 150\");\r",
							"    pm.expect(DistanceToCoast100To150[\"TIV\"].toFixed(2)).to.eql(98292913060.8274.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === 100 - 150\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === 100 - 150\", () => {\r",
							"    const DistanceToCoast100To150 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \"100 - 150\");\r",
							"    pm.expect(DistanceToCoast100To150[\"Distance To Coast Range\"]).to.eql(\"100 - 150\"); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Distance To Coast Range === >150\r",
							"pm.test(\"Validating Percentage for Distance To Coast Range === >150\", () => {\r",
							"    const DistanceToCoastGreaterThan150 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \">150\");\r",
							"    pm.expect(DistanceToCoastGreaterThan150[\"Percentage\"].toFixed(2)).to.eql(10.958639665377628.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Distance To Coast Range === >150\r",
							"pm.test(\"Validating TIV for Distance To Coast Range === >150\", () => {\r",
							"    const DistanceToCoastGreaterThan150 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \">150\");\r",
							"    pm.expect(DistanceToCoastGreaterThan150[\"TIV\"].toFixed(2)).to.eql(352627440843.6215.toFixed(2)); \r",
							"});\r",
							"\r",
							"// Validating Distance To Coast Range for Distance To Coast Range === >150\r",
							"pm.test(\"Validating Distance To Coast Range for Distance To Coast Range === >150\", () => {\r",
							"    const DistanceToCoastGreaterThan150 = responseJson.Value.Analysis0.find(item => item[\"Distance To Coast Range\"] === \">150\");\r",
							"    pm.expect(DistanceToCoastGreaterThan150[\"Distance To Coast Range\"]).to.eql(\">150\"); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Distance To Coast\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv / Area Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"console.log(\"--------TIV BY Area--------\") \r",
							"\r",
							"// Validating Percentage for Area Range === Unknown\r",
							"pm.test(\"Validating Percentage for Area Range === Unknown\", () => {\r",
							"    const AreaUnknown = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"Unknown\");\r",
							"    pm.expect(AreaUnknown[\"Percentage\"].toFixed(3)).to.eql(28.478574560634957.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Area Range === Unknown\r",
							"pm.test(\"Validating TIV for Area Range === Unknown\", () => {\r",
							"    const AreaUnknown = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"Unknown\");\r",
							"    pm.expect(AreaUnknown[\"TIV\"].toFixed(3)).to.eql(916384439385.965.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Area Range for Area Range === Unknown\r",
							"pm.test(\"Validating Area Range for Area Range === Unknown\", () => {\r",
							"    const AreaUnknown = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"Unknown\");\r",
							"    pm.expect(AreaUnknown[\"Area Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Area.Bins for Area Range === Unknown\r",
							"pm.test(\"Validating Area.Bins for Area Range === Unknown\", () => {\r",
							"    const AreaUnknown = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"Unknown\");\r",
							"    pm.expect(AreaUnknown[\"Area.Bins\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating Percentage for Area Range === 0\r",
							"pm.test(\"Validating Percentage for Area Range === 0\", () => {\r",
							"    const Area0 = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"0\");\r",
							"    pm.expect(Area0[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Area Range === 0\r",
							"pm.test(\"Validating TIV for Area Range === 0\", () => {\r",
							"    const Area0 = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"0\");\r",
							"    pm.expect(Area0[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Area Range for Area Range === 0\r",
							"pm.test(\"Validating Area Range for Area Range === 0\", () => {\r",
							"    const Area0 = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"0\");\r",
							"    pm.expect(Area0[\"Area Range\"]).to.eql(\"0\"); \r",
							"});\r",
							"\r",
							"// Validating Area.Bins for Area Range === 0\r",
							"pm.test(\"Validating Area.Bins for Area Range === 0\", () => {\r",
							"    const Area0 = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"0\");\r",
							"    pm.expect(Area0[\"Area.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Area Range === 1-5k\r",
							"pm.test(\"Validating Percentage for Area Range === 1-5k\", () => {\r",
							"    const Area1to5k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"1-5k\");\r",
							"    pm.expect(Area1to5k[\"Percentage\"].toFixed(3)).to.eql(2.20254662980774.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Area Range === 1-5k\r",
							"pm.test(\"Validating TIV for Area Range === 1-5k\", () => {\r",
							"    const Area1to5k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"1-5k\");\r",
							"    pm.expect(Area1to5k[\"TIV\"].toFixed(3)).to.eql(70873612521.580.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Area Range for Area Range === 1-5k\r",
							"pm.test(\"Validating Area Range for Area Range === 1-5k\", () => {\r",
							"    const Area1to5k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"1-5k\");\r",
							"    pm.expect(Area1to5k[\"Area Range\"]).to.eql(\"1-5k\"); \r",
							"});\r",
							"\r",
							"// Validating Area.Bins for Area Range === 1-5k\r",
							"pm.test(\"Validating Area.Bins for Area Range === 1-5k\", () => {\r",
							"    const Area1to5k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"1-5k\");\r",
							"    pm.expect(Area1to5k[\"Area.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating Percentage for Area Range === 5k - 10k\r",
							"pm.test(\"Validating Percentage for Area Range === 5k - 10k\", () => {\r",
							"    const Area5kto10k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"5k - 10k\");\r",
							"    pm.expect(Area5kto10k[\"Percentage\"].toFixed(3)).to.eql(1.3007753260163912.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Area Range === 5k - 10k\r",
							"pm.test(\"Validating TIV for Area Range === 5k - 10k\", () => {\r",
							"    const Area5kto10k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"5k - 10k\");\r",
							"    pm.expect(Area5kto10k[\"TIV\"].toFixed(3)).to.eql(41856388049.222916.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Area Range for Area Range === 5k - 10k\r",
							"pm.test(\"Validating Area Range for Area Range === 5k - 10k\", () => {\r",
							"    const Area5kto10k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"5k - 10k\");\r",
							"    pm.expect(Area5kto10k[\"Area Range\"]).to.eql(\"5k - 10k\"); \r",
							"});\r",
							"\r",
							"// Validating Area.Bins for Area Range === 5k - 10k\r",
							"pm.test(\"Validating Area.Bins for Area Range === 5k - 10k\", () => {\r",
							"    const Area5kto10k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"5k - 10k\");\r",
							"    pm.expect(Area5kto10k[\"Area.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Area Range === 20k - 50k\r",
							"pm.test(\"Validating Percentage for Area Range === 20k - 50k\", () => {\r",
							"    const Area20kto50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"20k - 50k\");\r",
							"    pm.expect(Area20kto50k[\"Percentage\"].toFixed(3)).to.eql(5.824424719663483.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Area Range === 20k - 50k\r",
							"pm.test(\"Validating TIV for Area Range === 20k - 50k\", () => {\r",
							"    const Area20kto50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"20k - 50k\");\r",
							"    pm.expect(Area20kto50k[\"TIV\"].toFixed(3)).to.eql(187418515983.327.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Area Range for Area Range === 20k - 50k\r",
							"pm.test(\"Validating Area Range for Area Range === 20k - 50k\", () => {\r",
							"    const Area20kto50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"20k - 50k\");\r",
							"    pm.expect(Area20kto50k[\"Area Range\"]).to.eql(\"20k - 50k\"); \r",
							"});\r",
							"\r",
							"// Validating Area.Bins for Area Range === 20k - 50k\r",
							"pm.test(\"Validating Area.Bins for Area Range === 20k - 50k\", () => {\r",
							"    const Area20kto50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \"20k - 50k\");\r",
							"    pm.expect(Area20kto50k[\"Area.Bins\"]).to.eql(5); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Area Range === >50k\r",
							"pm.test(\"Validating Percentage for Area Range === >50k\", () => {\r",
							"    const AreaGreaterThan50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \">50k\");\r",
							"    pm.expect(AreaGreaterThan50k[\"Percentage\"].toFixed(3)).to.eql(59.27617087436667.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Area Range === >50k\r",
							"pm.test(\"Validating TIV for Area Range === >50k\", () => {\r",
							"    const AreaGreaterThan50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \">50k\");\r",
							"    pm.expect(AreaGreaterThan50k[\"TIV\"].toFixed(3)).to.eql(1907390431357.459.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Area Range for Area Range === >50k\r",
							"pm.test(\"Validating Area Range for Area Range === >50k\", () => {\r",
							"    const AreaGreaterThan50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \">50k\");\r",
							"    pm.expect(AreaGreaterThan50k[\"Area Range\"]).to.eql(\">50k\"); \r",
							"});\r",
							"\r",
							"// Validating Area.Bins for Area Range === >50k\r",
							"pm.test(\"Validating Area.Bins for Area Range === >50k\", () => {\r",
							"    const AreaGreaterThan50k = responseJson.Value.Analysis0.find(item => item[\"Area Range\"] === \">50k\");\r",
							"    pm.expect(AreaGreaterThan50k[\"Area.Bins\"]).to.eql(6); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Area\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv / Year Upgrade Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"console.log(\"--------TIV BY Year Upgrade Range--------\")\r",
							"\r",
							"// Validating Percentage for Year Upgrade Range === Unknown\r",
							"pm.test(\"Validating Percentage for Year Upgrade Range === Unknown\", () => {\r",
							"    const YearUpgradeUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"Unknown\");\r",
							"    pm.expect(YearUpgradeUnknown[\"Percentage\"].toFixed(3)).to.eql(84.27349928746138.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Upgrade Range === Unknown\r",
							"pm.test(\"Validating TIV for Year Upgrade Range === Unknown\", () => {\r",
							"    const YearUpgradeUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"Unknown\");\r",
							"    pm.expect(YearUpgradeUnknown[\"TIV\"].toFixed(3)).to.eql(2711755226203.476.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade Range for Year Upgrade Range === Unknown\r",
							"pm.test(\"Validating Year Upgrade Range for Year Upgrade Range === Unknown\", () => {\r",
							"    const YearUpgradeUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"Unknown\");\r",
							"    pm.expect(YearUpgradeUnknown[\"Year Upgrade Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade.Bins for Year Upgrade Range === Unknown\r",
							"pm.test(\"Validating Year Upgrade.Bins for Year Upgrade Range === Unknown\", () => {\r",
							"    const YearUpgradeUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"Unknown\");\r",
							"    pm.expect(YearUpgradeUnknown[\"Year Upgrade.Bins\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Year Upgrade Range === <=1975\r",
							"pm.test(\"Validating Percentage for Year Upgrade Range === <=1975\", () => {\r",
							"    const YearUpgrade1975 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"<=1975\");\r",
							"    pm.expect(YearUpgrade1975[\"Percentage\"].toFixed(3)).to.eql(0.27690705487014383.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Upgrade Range === <=1975\r",
							"pm.test(\"Validating TIV for Year Upgrade Range === <=1975\", () => {\r",
							"    const YearUpgrade1975 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"<=1975\");\r",
							"    pm.expect(YearUpgrade1975[\"TIV\"].toFixed(3)).to.eql(8910323643.444405.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade Range for Year Upgrade Range === <=1975\r",
							"pm.test(\"Validating Year Upgrade Range for Year Upgrade Range === <=1975\", () => {\r",
							"    const YearUpgrade1975 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"<=1975\");\r",
							"    pm.expect(YearUpgrade1975[\"Year Upgrade Range\"]).to.eql(\"<=1975\"); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade.Bins for Year Upgrade Range === <=1975\r",
							"pm.test(\"Validating Year Upgrade.Bins for Year Upgrade Range === <=1975\", () => {\r",
							"    const YearUpgrade1975 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"<=1975\");\r",
							"    pm.expect(YearUpgrade1975[\"Year Upgrade.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Year Upgrade Range === 1976-1990\r",
							"pm.test(\"Validating Percentage for Year Upgrade Range === 1976-1990\", () => {\r",
							"    const YearUpgrade1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearUpgrade1976to1990[\"Percentage\"].toFixed(3)).to.eql(1.0504597365419592.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Upgrade Range === 1976-1990\r",
							"pm.test(\"Validating TIV for Year Upgrade Range === 1976-1990\", () => {\r",
							"    const YearUpgrade1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearUpgrade1976to1990[\"TIV\"].toFixed(3)).to.eql(33801725388.995827.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade Range for Year Upgrade Range === 1976-1990\r",
							"pm.test(\"Validating Year Upgrade Range for Year Upgrade Range === 1976-1990\", () => {\r",
							"    const YearUpgrade1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearUpgrade1976to1990[\"Year Upgrade Range\"]).to.eql(\"1976-1990\"); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade.Bins for Year Upgrade Range === 1976-1990\r",
							"pm.test(\"Validating Year Upgrade.Bins for Year Upgrade Range === 1976-1990\", () => {\r",
							"    const YearUpgrade1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearUpgrade1976to1990[\"Year Upgrade.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Continue with similar blocks for the remaining \"Year Upgrade Range\" values...\r",
							"\r",
							"// Validating Percentage for Year Upgrade Range === 1991-2000\r",
							"pm.test(\"Validating Percentage for Year Upgrade Range === 1991-2000\", () => {\r",
							"    const YearUpgrade1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearUpgrade1991to2000[\"Percentage\"].toFixed(3)).to.eql(1.8563405133765267.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Upgrade Range === 1991-2000\r",
							"pm.test(\"Validating TIV for Year Upgrade Range === 1991-2000\", () => {\r",
							"    const YearUpgrade1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearUpgrade1991to2000[\"TIV\"].toFixed(3)).to.eql(59733381565.08631.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade Range for Year Upgrade Range === 1991-2000\r",
							"pm.test(\"Validating Year Upgrade Range for Year Upgrade Range === 1991-2000\", () => {\r",
							"    const YearUpgrade1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearUpgrade1991to2000[\"Year Upgrade Range\"]).to.eql(\"1991-2000\"); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade.Bins for Year Upgrade Range === 1991-2000\r",
							"pm.test(\"Validating Year Upgrade.Bins for Year Upgrade Range === 1991-2000\", () => {\r",
							"    const YearUpgrade1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearUpgrade1991to2000[\"Year Upgrade.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Year Upgrade Range === 2001-2010\r",
							"pm.test(\"Validating Percentage for Year Upgrade Range === 2001-2010\", () => {\r",
							"    const YearUpgrade2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearUpgrade2001to2010[\"Percentage\"].toFixed(3)).to.eql(4.443690851710992.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Upgrade Range === 2001-2010\r",
							"pm.test(\"Validating TIV for Year Upgrade Range === 2001-2010\", () => {\r",
							"    const YearUpgrade2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearUpgrade2001to2010[\"TIV\"].toFixed(3)).to.eql(142989219536.95288.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade Range for Year Upgrade Range === 2001-2010\r",
							"pm.test(\"Validating Year Upgrade Range for Year Upgrade Range === 2001-2010\", () => {\r",
							"    const YearUpgrade2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearUpgrade2001to2010[\"Year Upgrade Range\"]).to.eql(\"2001-2010\"); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade.Bins for Year Upgrade Range === 2001-2010\r",
							"pm.test(\"Validating Year Upgrade.Bins for Year Upgrade Range === 2001-2010\", () => {\r",
							"    const YearUpgrade2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearUpgrade2001to2010[\"Year Upgrade.Bins\"]).to.eql(4); \r",
							"});\r",
							"\r",
							"// Continue with similar blocks for the remaining \"Year Upgrade Range\" value...\r",
							"\r",
							"// Validating Percentage for Year Upgrade Range === >=2011\r",
							"pm.test(\"Validating Percentage for Year Upgrade Range === >=2011\", () => {\r",
							"    const YearUpgrade2011andLater = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \">=2011\");\r",
							"    pm.expect(YearUpgrade2011andLater[\"Percentage\"].toFixed(3)).to.eql(8.099102556039007.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Upgrade Range === >=2011\r",
							"pm.test(\"Validating TIV for Year Upgrade Range === >=2011\", () => {\r",
							"    const YearUpgrade2011andLater = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \">=2011\");\r",
							"    pm.expect(YearUpgrade2011andLater[\"TIV\"].toFixed(3)).to.eql(260613168666.27908.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade Range for Year Upgrade Range === >=2011\r",
							"pm.test(\"Validating Year Upgrade Range for Year Upgrade Range === >=2011\", () => {\r",
							"    const YearUpgrade2011andLater = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \">=2011\");\r",
							"    pm.expect(YearUpgrade2011andLater[\"Year Upgrade Range\"]).to.eql(\">=2011\"); \r",
							"});\r",
							"\r",
							"// Validating Year Upgrade.Bins for Year Upgrade Range === >=2011\r",
							"pm.test(\"Validating Year Upgrade.Bins for Year Upgrade Range === >=2011\", () => {\r",
							"    const YearUpgrade2011andLater = responseJson.Value.Analysis0.find(item => item[\"Year Upgrade Range\"] === \">=2011\");\r",
							"    pm.expect(YearUpgrade2011andLater[\"Year Upgrade.Bins\"]).to.eql(5); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Year Upgrade\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "TIV/YEAR BUILD RANGE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							" // Validating Percentage for Year Built Range === Unknown\r",
							"pm.test(\"Validating Percentage for Year Built Range === Unknown\", () => {\r",
							"    const YearBuiltUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"Unknown\");\r",
							"    pm.expect(YearBuiltUnknown[\"Percentage\"].toFixed(3)).to.eql(35.73807104964336.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Built Range === Unknown\r",
							"pm.test(\"Validating TIV for Year Built Range === Unknown\", () => {\r",
							"    const YearBuiltUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"Unknown\");\r",
							"    pm.expect(YearBuiltUnknown[\"TIV\"].toFixed(3)).to.eql(1149980738461.251.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Built Range for Year Built Range === Unknown\r",
							"pm.test(\"Validating Year Built Range for Year Built Range === Unknown\", () => {\r",
							"    const YearBuiltUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"Unknown\");\r",
							"    pm.expect(YearBuiltUnknown[\"Year Built Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Year Built.Bins for Year Built Range === Unknown\r",
							"pm.test(\"Validating Year Built.Bins for Year Built Range === Unknown\", () => {\r",
							"    const YearBuiltUnknown = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"Unknown\");\r",
							"    pm.expect(YearBuiltUnknown[\"Year Built.Bins\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Year Built Range === <=1975\r",
							"pm.test(\"Validating Percentage for Year Built Range === <=1975\", () => {\r",
							"    const YearBuiltUpTo1975 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"<=1975\");\r",
							"    pm.expect(YearBuiltUpTo1975[\"Percentage\"].toFixed(3)).to.eql(20.505043029860357.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Built Range === <=1975\r",
							"pm.test(\"Validating TIV for Year Built Range === <=1975\", () => {\r",
							"    const YearBuiltUpTo1975 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"<=1975\");\r",
							"    pm.expect(YearBuiltUpTo1975[\"TIV\"].toFixed(3)).to.eql(659811898994.374.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Built Range for Year Built Range === <=1975\r",
							"pm.test(\"Validating Year Built Range for Year Built Range === <=1975\", () => {\r",
							"    const YearBuiltUpTo1975 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"<=1975\");\r",
							"    pm.expect(YearBuiltUpTo1975[\"Year Built Range\"]).to.eql(\"<=1975\"); \r",
							"});\r",
							"\r",
							"// Validating Year Built.Bins for Year Built Range === <=1975\r",
							"pm.test(\"Validating Year Built.Bins for Year Built Range === <=1975\", () => {\r",
							"    const YearBuiltUpTo1975 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"<=1975\");\r",
							"    pm.expect(YearBuiltUpTo1975[\"Year Built.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Year Built Range === 1976-1990\r",
							"pm.test(\"Validating Percentage for Year Built Range === 1976-1990\", () => {\r",
							"    const YearBuilt1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearBuilt1976to1990[\"Percentage\"].toFixed(3)).to.eql(10.536252749081024.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Built Range === 1976-1990\r",
							"pm.test(\"Validating TIV for Year Built Range === 1976-1990\", () => {\r",
							"    const YearBuilt1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearBuilt1976to1990[\"TIV\"].toFixed(3)).to.eql(339035861789.306.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Built Range for Year Built Range === 1976-1990\r",
							"pm.test(\"Validating Year Built Range for Year Built Range === 1976-1990\", () => {\r",
							"    const YearBuilt1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearBuilt1976to1990[\"Year Built Range\"]).to.eql(\"1976-1990\"); \r",
							"});\r",
							"\r",
							"// Validating Year Built.Bins for Year Built Range === 1976-1990\r",
							"pm.test(\"Validating Year Built.Bins for Year Built Range === 1976-1990\", () => {\r",
							"    const YearBuilt1976to1990 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1976-1990\");\r",
							"    pm.expect(YearBuilt1976to1990[\"Year Built.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Continue with similar blocks for the remaining \"Year Built Range\" values...\r",
							"\r",
							"// Validating Percentage for Year Built Range === 1991-2000\r",
							"pm.test(\"Validating Percentage for Year Built Range === 1991-2000\", () => {\r",
							"    const YearBuilt1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearBuilt1991to2000[\"Percentage\"].toFixed(3)).to.eql(9.829731040597643.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Built Range === 1991-2000\r",
							"pm.test(\"Validating TIV for Year Built Range === 1991-2000\", () => {\r",
							"    const YearBuilt1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearBuilt1991to2000[\"TIV\"].toFixed(3)).to.eql(316301384740.105.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Built Range for Year Built Range === 1991-2000\r",
							"pm.test(\"Validating Year Built Range for Year Built Range === 1991-2000\", () => {\r",
							"    const YearBuilt1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearBuilt1991to2000[\"Year Built Range\"]).to.eql(\"1991-2000\"); \r",
							"});\r",
							"\r",
							"// Validating Year Built.Bins for Year Built Range === 1991-2000\r",
							"pm.test(\"Validating Year Built.Bins for Year Built Range === 1991-2000\", () => {\r",
							"    const YearBuilt1991to2000 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"1991-2000\");\r",
							"    pm.expect(YearBuilt1991to2000[\"Year Built.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Year Built Range === 2001-2010\r",
							"pm.test(\"Validating Percentage for Year Built Range === 2001-2010\", () => {\r",
							"    const YearBuilt2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearBuilt2001to2010[\"Percentage\"].toFixed(3)).to.eql(11.637933536730676.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Built Range === 2001-2010\r",
							"pm.test(\"Validating TIV for Year Built Range === 2001-2010\", () => {\r",
							"    const YearBuilt2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearBuilt2001to2010[\"TIV\"].toFixed(3)).to.eql(374485779720.521.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Built Range for Year Built Range === 2001-2010\r",
							"pm.test(\"Validating Year Built Range for Year Built Range === 2001-2010\", () => {\r",
							"    const YearBuilt2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearBuilt2001to2010[\"Year Built Range\"]).to.eql(\"2001-2010\"); \r",
							"});\r",
							"\r",
							"// Validating Year Built.Bins for Year Built Range === 2001-2010\r",
							"pm.test(\"Validating Year Built.Bins for Year Built Range === 2001-2010\", () => {\r",
							"    const YearBuilt2001to2010 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \"2001-2010\");\r",
							"    pm.expect(YearBuilt2001to2010[\"Year Built.Bins\"]).to.eql(4); \r",
							"});\r",
							"\r",
							"// Continue with similar blocks for the remaining \"Year Built Range\" values...\r",
							"\r",
							"// Validating Percentage for Year Built Range === >=2011\r",
							"pm.test(\"Validating Percentage for Year Built Range === >=2011\", () => {\r",
							"    const YearBuiltFrom2011 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \">=2011\");\r",
							"    pm.expect(YearBuiltFrom2011[\"Percentage\"].toFixed(3)).to.eql(11.752968594086934.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Year Built Range === >=2011\r",
							"pm.test(\"Validating TIV for Year Built Range === >=2011\", () => {\r",
							"    const YearBuiltFrom2011 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \">=2011\");\r",
							"    pm.expect(YearBuiltFrom2011[\"TIV\"].toFixed(3)).to.eql(378187381298.9456.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Year Built Range for Year Built Range === >=2011\r",
							"pm.test(\"Validating Year Built Range for Year Built Range === >=2011\", () => {\r",
							"    const YearBuiltFrom2011 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \">=2011\");\r",
							"    pm.expect(YearBuiltFrom2011[\"Year Built Range\"]).to.eql(\">=2011\"); \r",
							"});\r",
							"\r",
							"// Validating Year Built.Bins for Year Built Range === >=2011\r",
							"pm.test(\"Validating Year Built.Bins for Year Built Range === >=2011\", () => {\r",
							"    const YearBuiltFrom2011 = responseJson.Value.Analysis0.find(item => item[\"Year Built Range\"] === \">=2011\");\r",
							"    pm.expect(YearBuiltFrom2011[\"Year Built.Bins\"]).to.eql(5); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Year Built\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv /Average Age",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating Percentage for Average Age Range === Unknown\r",
							"pm.test(\"Validating Percentage for Average Age Range === Unknown\", () => {\r",
							"    const AverageAgeUnknown = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"Unknown\");\r",
							"    pm.expect(AverageAgeUnknown[\"Percentage\"]).to.eql(100); \r",
							"});\r",
							"\r",
							"// Validating TIV for Average Age Range === Unknown\r",
							"pm.test(\"Validating TIV for Average Age Range === Unknown\", () => {\r",
							"    const AverageAgeUnknown = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"Unknown\");\r",
							"    pm.expect(AverageAgeUnknown[\"TIV\"].toFixed(3)).to.eql(3217803045004.221.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Average Age Range for Average Age Range === Unknown\r",
							"pm.test(\"Validating Average Age Range for Average Age Range === Unknown\", () => {\r",
							"    const AverageAgeUnknown = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"Unknown\");\r",
							"    pm.expect(AverageAgeUnknown[\"Average Age Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Average Age.Bins for Average Age Range === Unknown\r",
							"pm.test(\"Validating Average Age.Bins for Average Age Range === Unknown\", () => {\r",
							"    const AverageAgeUnknown = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"Unknown\");\r",
							"    pm.expect(AverageAgeUnknown[\"Average Age.Bins\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Average Age Range === <=25\r",
							"pm.test(\"Validating Percentage for Average Age Range === <=25\", () => {\r",
							"    const AverageAgeLessThanOrEqualTo25 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"<=25\");\r",
							"    pm.expect(AverageAgeLessThanOrEqualTo25[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Average Age Range === <=25\r",
							"pm.test(\"Validating TIV for Average Age Range === <=25\", () => {\r",
							"    const AverageAgeLessThanOrEqualTo25 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"<=25\");\r",
							"    pm.expect(AverageAgeLessThanOrEqualTo25[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Average Age Range for Average Age Range === <=25\r",
							"pm.test(\"Validating Average Age Range for Average Age Range === <=25\", () => {\r",
							"    const AverageAgeLessThanOrEqualTo25 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"<=25\");\r",
							"    pm.expect(AverageAgeLessThanOrEqualTo25[\"Average Age Range\"]).to.eql(\"<=25\"); \r",
							"});\r",
							"\r",
							"// Validating Average Age.Bins for Average Age Range === <=25\r",
							"pm.test(\"Validating Average Age.Bins for Average Age Range === <=25\", () => {\r",
							"    const AverageAgeLessThanOrEqualTo25 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"<=25\");\r",
							"    pm.expect(AverageAgeLessThanOrEqualTo25[\"Average Age.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Continue with similar blocks for the remaining \"Average Age Range\" values...\r",
							"\r",
							"// Validating Percentage for Average Age Range === 25 - 50\r",
							"pm.test(\"Validating Percentage for Average Age Range === 25 - 50\", () => {\r",
							"    const AverageAge25to50 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"25 - 50\");\r",
							"    pm.expect(AverageAge25to50[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Average Age Range === 25 - 50\r",
							"pm.test(\"Validating TIV for Average Age Range === 25 - 50\", () => {\r",
							"    const AverageAge25to50 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"25 - 50\");\r",
							"    pm.expect(AverageAge25to50[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Average Age Range for Average Age Range === 25 - 50\r",
							"pm.test(\"Validating Average Age Range for Average Age Range === 25 - 50\", () => {\r",
							"    const AverageAge25to50 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"25 - 50\");\r",
							"    pm.expect(AverageAge25to50[\"Average Age Range\"]).to.eql(\"25 - 50\"); \r",
							"});\r",
							"\r",
							"// Validating Average Age.Bins for Average Age Range === 25 - 50\r",
							"pm.test(\"Validating Average Age.Bins for Average Age Range === 25 - 50\", () => {\r",
							"    const AverageAge25to50 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"25 - 50\");\r",
							"    pm.expect(AverageAge25to50[\"Average Age.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Continue with similar blocks for the remaining \"Average Age Range\" values...\r",
							"\r",
							"// Validating Percentage for Average Age Range === 50 - 75\r",
							"pm.test(\"Validating Percentage for Average Age Range === 50 - 75\", () => {\r",
							"    const AverageAge50to75 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"50 - 75\");\r",
							"    pm.expect(AverageAge50to75[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Average Age Range === 50 - 75\r",
							"pm.test(\"Validating TIV for Average Age Range === 50 - 75\", () => {\r",
							"    const AverageAge50to75 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"50 - 75\");\r",
							"    pm.expect(AverageAge50to75[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Average Age Range for Average Age Range === 50 - 75\r",
							"pm.test(\"Validating Average Age Range for Average Age Range === 50 - 75\", () => {\r",
							"    const AverageAge50to75 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"50 - 75\");\r",
							"    pm.expect(AverageAge50to75[\"Average Age Range\"]).to.eql(\"50 - 75\"); \r",
							"});\r",
							"\r",
							"// Validating Average Age.Bins for Average Age Range === 50 - 75\r",
							"pm.test(\"Validating Average Age.Bins for Average Age Range === 50 - 75\", () => {\r",
							"    const AverageAge50to75 = responseJson.Value.Analysis0.find(item => item[\"Average Age Range\"] === \"50 - 75\");\r",
							"    pm.expect(AverageAge50to75[\"Average Age.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Average Age\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv / # people Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating Percentage for Number of People Range === Unknown\r",
							"pm.test(\"Validating Percentage for Number of People Range === Unknown\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"Unknown\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Percentage\"]).to.eql(100); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of People Range === Unknown\r",
							"pm.test(\"Validating TIV for Number of People Range === Unknown\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"Unknown\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"TIV\"].toFixed(3)).to.eql(3217803045004.221.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Number of People Range for Number of People Range === Unknown\r",
							"pm.test(\"Validating Number of People Range for Number of People Range === Unknown\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"Unknown\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Number of People Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Number of People.Bins for Number of People Range === Unknown\r",
							"pm.test(\"Validating Number of People.Bins for Number of People Range === Unknown\", () => {\r",
							"    const NumberOfPeopleUnknown = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"Unknown\");\r",
							"    pm.expect(NumberOfPeopleUnknown[\"Number of People.Bins\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Continue with similar blocks for the remaining \"Number of People Range\" values...\r",
							"\r",
							"// Validating Percentage for Number of People Range === <=100\r",
							"pm.test(\"Validating Percentage for Number of People Range === <=100\", () => {\r",
							"    const NumberOfPeopleLessThanOrEqualTo100 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"<=100\");\r",
							"    pm.expect(NumberOfPeopleLessThanOrEqualTo100[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of People Range === <=100\r",
							"pm.test(\"Validating TIV for Number of People Range === <=100\", () => {\r",
							"    const NumberOfPeopleLessThanOrEqualTo100 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"<=100\");\r",
							"    pm.expect(NumberOfPeopleLessThanOrEqualTo100[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of People Range for Number of People Range === <=100\r",
							"pm.test(\"Validating Number of People Range for Number of People Range === <=100\", () => {\r",
							"    const NumberOfPeopleLessThanOrEqualTo100 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"<=100\");\r",
							"    pm.expect(NumberOfPeopleLessThanOrEqualTo100[\"Number of People Range\"]).to.eql(\"<=100\"); \r",
							"});\r",
							"\r",
							"// Validating Number of People.Bins for Number of People Range === <=100\r",
							"pm.test(\"Validating Number of People.Bins for Number of People Range === <=100\", () => {\r",
							"    const NumberOfPeopleLessThanOrEqualTo100 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"<=100\");\r",
							"    pm.expect(NumberOfPeopleLessThanOrEqualTo100[\"Number of People.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of People Range === 101 - 500\r",
							"pm.test(\"Validating Percentage for Number of People Range === 101 - 500\", () => {\r",
							"    const NumberOfPeople101to500 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"101 - 500\");\r",
							"    pm.expect(NumberOfPeople101to500[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of People Range === 101 - 500\r",
							"pm.test(\"Validating TIV for Number of People Range === 101 - 500\", () => {\r",
							"    const NumberOfPeople101to500 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"101 - 500\");\r",
							"    pm.expect(NumberOfPeople101to500[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of People Range for Number of People Range === 101 - 500\r",
							"pm.test(\"Validating Number of People Range for Number of People Range === 101 - 500\", () => {\r",
							"    const NumberOfPeople101to500 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"101 - 500\");\r",
							"    pm.expect(NumberOfPeople101to500[\"Number of People Range\"]).to.eql(\"101 - 500\"); \r",
							"});\r",
							"\r",
							"// Validating Number of People.Bins for Number of People Range === 101 - 500\r",
							"pm.test(\"Validating Number of People.Bins for Number of People Range === 101 - 500\", () => {\r",
							"    const NumberOfPeople101to500 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"101 - 500\");\r",
							"    pm.expect(NumberOfPeople101to500[\"Number of People.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of People Range === 501 - 1000\r",
							"pm.test(\"Validating Percentage for Number of People Range === 501 - 1000\", () => {\r",
							"    const NumberOfPeople501to1000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"501 - 1000\");\r",
							"    pm.expect(NumberOfPeople501to1000[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of People Range === 501 - 1000\r",
							"pm.test(\"Validating TIV for Number of People Range === 501 - 1000\", () => {\r",
							"    const NumberOfPeople501to1000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"501 - 1000\");\r",
							"    pm.expect(NumberOfPeople501to1000[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of People Range for Number of People Range === 501 - 1000\r",
							"pm.test(\"Validating Number of People Range for Number of People Range === 501 - 1000\", () => {\r",
							"    const NumberOfPeople501to1000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"501 - 1000\");\r",
							"    pm.expect(NumberOfPeople501to1000[\"Number of People Range\"]).to.eql(\"501 - 1000\"); \r",
							"});\r",
							"\r",
							"// Validating Number of People.Bins for Number of People Range === 501 - 1000\r",
							"pm.test(\"Validating Number of People.Bins for Number of People Range === 501 - 1000\", () => {\r",
							"    const NumberOfPeople501to1000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"501 - 1000\");\r",
							"    pm.expect(NumberOfPeople501to1000[\"Number of People.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of People Range === 1001 - 5000\r",
							"pm.test(\"Validating Percentage for Number of People Range === 1001 - 5000\", () => {\r",
							"    const NumberOfPeople1001to5000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"1001 - 5000\");\r",
							"    pm.expect(NumberOfPeople1001to5000[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of People Range === 1001 - 5000\r",
							"pm.test(\"Validating TIV for Number of People Range === 1001 - 5000\", () => {\r",
							"    const NumberOfPeople1001to5000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"1001 - 5000\");\r",
							"    pm.expect(NumberOfPeople1001to5000[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Number of People Range for Number of People Range === 1001 - 5000\r",
							"pm.test(\"Validating Number of People Range for Number of People Range === 1001 - 5000\", () => {\r",
							"    const NumberOfPeople1001to5000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"1001 - 5000\");\r",
							"    pm.expect(NumberOfPeople1001to5000[\"Number of People Range\"]).to.eql(\"1001 - 5000\"); \r",
							"});\r",
							"\r",
							"// Validating Number of People.Bins for Number of People Range === 1001 - 5000\r",
							"pm.test(\"Validating Number of People.Bins for Number of People Range === 1001 - 5000\", () => {\r",
							"    const NumberOfPeople1001to5000 = responseJson.Value.Analysis0.find(item => item[\"Number of People Range\"] === \"1001 - 5000\");\r",
							"    pm.expect(NumberOfPeople1001to5000[\"Number of People.Bins\"]).to.eql(4); \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Number of People\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/Number of Stories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							"// Validating Percentage for Number of Stories Range === Unknown and Number of Stories.Bins === 0\r",
							"pm.test(\"Validating Percentage for Number of Stories Range === Unknown and Number of Stories.Bins === 0\", () => {\r",
							"    const NumberOfStoriesUnknownBins0 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"Unknown\" && item[\"Number of Stories.Bins\"] === 0);\r",
							"    pm.expect(NumberOfStoriesUnknownBins0[\"Percentage\"].toFixed(3)).to.eql(36.390665708501594.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Stories Range === Unknown and Number of Stories.Bins === 0\r",
							"pm.test(\"Validating TIV for Number of Stories Range === Unknown and Number of Stories.Bins === 0\", () => {\r",
							"    const NumberOfStoriesUnknownBins0 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"Unknown\" && item[\"Number of Stories.Bins\"] === 0);\r",
							"    pm.expect(NumberOfStoriesUnknownBins0[\"TIV\"].toFixed(3)).to.eql(1170979949265.639.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories Range for Number of Stories Range === Unknown and Number of Stories.Bins === 0\r",
							"pm.test(\"Validating Number of Stories Range for Number of Stories Range === Unknown and Number of Stories.Bins === 0\", () => {\r",
							"    const NumberOfStoriesUnknownBins0 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"Unknown\" && item[\"Number of Stories.Bins\"] === 0);\r",
							"    pm.expect(NumberOfStoriesUnknownBins0[\"Number of Stories Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories.Bins for Number of Stories Range === Unknown and Number of Stories.Bins === 0\r",
							"pm.test(\"Validating Number of Stories.Bins for Number of Stories Range === Unknown and Number of Stories.Bins === 0\", () => {\r",
							"    const NumberOfStoriesUnknownBins0 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"Unknown\" && item[\"Number of Stories.Bins\"] === 0);\r",
							"    pm.expect(NumberOfStoriesUnknownBins0[\"Number of Stories.Bins\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\r",
							"pm.test(\"Validating Percentage for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\", () => {\r",
							"    const NumberOfStories1To3LowRiseBins1 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"1-3 Low rise\" && item[\"Number of Stories.Bins\"] === 1);\r",
							"    pm.expect(NumberOfStories1To3LowRiseBins1[\"Percentage\"].toFixed(3)).to.eql(45.19685952198235.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\r",
							"pm.test(\"Validating TIV for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\", () => {\r",
							"    const NumberOfStories1To3LowRiseBins1 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"1-3 Low rise\" && item[\"Number of Stories.Bins\"] === 1);\r",
							"    pm.expect(NumberOfStories1To3LowRiseBins1[\"TIV\"].toFixed(3)).to.eql(1454345921944.723.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories Range for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\r",
							"pm.test(\"Validating Number of Stories Range for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\", () => {\r",
							"    const NumberOfStories1To3LowRiseBins1 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"1-3 Low rise\" && item[\"Number of Stories.Bins\"] === 1);\r",
							"    pm.expect(NumberOfStories1To3LowRiseBins1[\"Number of Stories Range\"]).to.eql(\"1-3 Low rise\"); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories.Bins for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\r",
							"pm.test(\"Validating Number of Stories.Bins for Number of Stories Range === 1-3 Low rise and Number of Stories.Bins === 1\", () => {\r",
							"    const NumberOfStories1To3LowRiseBins1 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"1-3 Low rise\" && item[\"Number of Stories.Bins\"] === 1);\r",
							"    pm.expect(NumberOfStories1To3LowRiseBins1[\"Number of Stories.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\r",
							"pm.test(\"Validating Percentage for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\", () => {\r",
							"    const NumberOfStories4To7MidRiseBins2 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"4-7 Mid rise\" && item[\"Number of Stories.Bins\"] === 2);\r",
							"    pm.expect(NumberOfStories4To7MidRiseBins2[\"Percentage\"].toFixed(3)).to.eql(10.709278971736135.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\r",
							"pm.test(\"Validating TIV for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\", () => {\r",
							"    const NumberOfStories4To7MidRiseBins2 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"4-7 Mid rise\" && item[\"Number of Stories.Bins\"] === 2);\r",
							"    pm.expect(NumberOfStories4To7MidRiseBins2[\"TIV\"].toFixed(3)).to.eql(344603504850.548.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories Range for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\r",
							"pm.test(\"Validating Number of Stories Range for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\", () => {\r",
							"    const NumberOfStories4To7MidRiseBins2 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"4-7 Mid rise\" && item[\"Number of Stories.Bins\"] === 2);\r",
							"    pm.expect(NumberOfStories4To7MidRiseBins2[\"Number of Stories Range\"]).to.eql(\"4-7 Mid rise\"); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories.Bins for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\r",
							"pm.test(\"Validating Number of Stories.Bins for Number of Stories Range === 4-7 Mid rise and Number of Stories.Bins === 2\", () => {\r",
							"    const NumberOfStories4To7MidRiseBins2 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"4-7 Mid rise\" && item[\"Number of Stories.Bins\"] === 2);\r",
							"    pm.expect(NumberOfStories4To7MidRiseBins2[\"Number of Stories.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\r",
							"pm.test(\"Validating Percentage for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\", () => {\r",
							"    const NumberOfStories8To40HighRiseBins3 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"8-40 High rise\" && item[\"Number of Stories.Bins\"] === 3);\r",
							"    pm.expect(NumberOfStories8To40HighRiseBins3[\"Percentage\"].toFixed(3)).to.eql(6.8877746706706215.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\r",
							"pm.test(\"Validating TIV for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\", () => {\r",
							"    const NumberOfStories8To40HighRiseBins3 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"8-40 High rise\" && item[\"Number of Stories.Bins\"] === 3);\r",
							"    pm.expect(NumberOfStories8To40HighRiseBins3[\"TIV\"].toFixed(3)).to.eql(221635023085.885.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories Range for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\r",
							"pm.test(\"Validating Number of Stories Range for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\", () => {\r",
							"    const NumberOfStories8To40HighRiseBins3 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"8-40 High rise\" && item[\"Number of Stories.Bins\"] === 3);\r",
							"    pm.expect(NumberOfStories8To40HighRiseBins3[\"Number of Stories Range\"]).to.eql(\"8-40 High rise\"); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories.Bins for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\r",
							"pm.test(\"Validating Number of Stories.Bins for Number of Stories Range === 8-40 High rise and Number of Stories.Bins === 3\", () => {\r",
							"    const NumberOfStories8To40HighRiseBins3 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \"8-40 High rise\" && item[\"Number of Stories.Bins\"] === 3);\r",
							"    pm.expect(NumberOfStories8To40HighRiseBins3[\"Number of Stories.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\r",
							"pm.test(\"Validating Percentage for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\", () => {\r",
							"    const NumberOfStoriesGreaterThan40SkyscraperBins4 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \">40-skyscraper\" && item[\"Number of Stories.Bins\"] === 4);\r",
							"    pm.expect(NumberOfStoriesGreaterThan40SkyscraperBins4[\"Percentage\"].toFixed(3)).to.eql(0.8154211271093117.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\r",
							"pm.test(\"Validating TIV for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\", () => {\r",
							"    const NumberOfStoriesGreaterThan40SkyscraperBins4 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \">40-skyscraper\" && item[\"Number of Stories.Bins\"] === 4);\r",
							"    pm.expect(NumberOfStoriesGreaterThan40SkyscraperBins4[\"TIV\"].toFixed(3)).to.eql(26238645857.73321.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories Range for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\r",
							"pm.test(\"Validating Number of Stories Range for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\", () => {\r",
							"    const NumberOfStoriesGreaterThan40SkyscraperBins4 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \">40-skyscraper\" && item[\"Number of Stories.Bins\"] === 4);\r",
							"    pm.expect(NumberOfStoriesGreaterThan40SkyscraperBins4[\"Number of Stories Range\"]).to.eql(\">40-skyscraper\"); \r",
							"});\r",
							"\r",
							"// Validating Number of Stories.Bins for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\r",
							"pm.test(\"Validating Number of Stories.Bins for Number of Stories Range === >40-skyscraper and Number of Stories.Bins === 4\", () => {\r",
							"    const NumberOfStoriesGreaterThan40SkyscraperBins4 = responseJson.Value.Analysis0.find(item => item[\"Number of Stories Range\"] === \">40-skyscraper\" && item[\"Number of Stories.Bins\"] === 4);\r",
							"    pm.expect(NumberOfStoriesGreaterThan40SkyscraperBins4[\"Number of Stories.Bins\"]).to.eql(4); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Number of Stories\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/Square Footage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"// Validating Percentage for Square Footage Range === 0\r",
							"pm.test(\"Validating Percentage for Square Footage Range === 0\", () => {\r",
							"    const SquareFootage0 = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"0\");\r",
							"    pm.expect(SquareFootage0[\"Percentage\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating TIV for Square Footage Range === 0\r",
							"pm.test(\"Validating TIV for Square Footage Range === 0\", () => {\r",
							"    const SquareFootage0 = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"0\");\r",
							"    pm.expect(SquareFootage0[\"TIV\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating Square Footage Range for Square Footage Range === 0\r",
							"pm.test(\"Validating Square Footage Range for Square Footage Range === 0\", () => {\r",
							"    const SquareFootage0 = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"0\");\r",
							"    pm.expect(SquareFootage0[\"Square Footage Range\"]).to.eql(\"0\");  \r",
							"});\r",
							"\r",
							"// Validating Square Footage.Bins for Square Footage Range === 0\r",
							"pm.test(\"Validating Square Footage.Bins for Square Footage Range === 0\", () => {\r",
							"    const SquareFootage0 = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"0\");\r",
							"    pm.expect(SquareFootage0[\"Square Footage.Bins\"]).to.eql(1);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for Square Footage Range === 1-5K\r",
							"pm.test(\"Validating Percentage for Square Footage Range === 1-5K\", () => {\r",
							"    const SquareFootage1to5K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"1-5K\");\r",
							"    pm.expect(SquareFootage1to5K[\"Percentage\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating TIV for Square Footage Range === 1-5K\r",
							"pm.test(\"Validating TIV for Square Footage Range === 1-5K\", () => {\r",
							"    const SquareFootage1to5K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"1-5K\");\r",
							"    pm.expect(SquareFootage1to5K[\"TIV\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating Square Footage Range for Square Footage Range === 1-5K\r",
							"pm.test(\"Validating Square Footage Range for Square Footage Range === 1-5K\", () => {\r",
							"    const SquareFootage1to5K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"1-5K\");\r",
							"    pm.expect(SquareFootage1to5K[\"Square Footage Range\"]).to.eql(\"1-5K\");  \r",
							"});\r",
							"\r",
							"// Validating Square Footage.Bins for Square Footage Range === 1-5K\r",
							"pm.test(\"Validating Square Footage.Bins for Square Footage Range === 1-5K\", () => {\r",
							"    const SquareFootage1to5K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"1-5K\");\r",
							"    pm.expect(SquareFootage1to5K[\"Square Footage.Bins\"]).to.eql(2);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for Square Footage Range === 5K-10K\r",
							"pm.test(\"Validating Percentage for Square Footage Range === 5K-10K\", () => {\r",
							"    const SquareFootage5Kto10K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"5K-10K\");\r",
							"    pm.expect(SquareFootage5Kto10K[\"Percentage\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating TIV for Square Footage Range === 5K-10K\r",
							"pm.test(\"Validating TIV for Square Footage Range === 5K-10K\", () => {\r",
							"    const SquareFootage5Kto10K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"5K-10K\");\r",
							"    pm.expect(SquareFootage5Kto10K[\"TIV\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating Square Footage Range for Square Footage Range === 5K-10K\r",
							"pm.test(\"Validating Square Footage Range for Square Footage Range === 5K-10K\", () => {\r",
							"    const SquareFootage5Kto10K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"5K-10K\");\r",
							"    pm.expect(SquareFootage5Kto10K[\"Square Footage Range\"]).to.eql(\"5K-10K\");  \r",
							"});\r",
							"\r",
							"// Validating Square Footage.Bins for Square Footage Range === 5K-10K\r",
							"pm.test(\"Validating Square Footage.Bins for Square Footage Range === 5K-10K\", () => {\r",
							"    const SquareFootage5Kto10K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"5K-10K\");\r",
							"    pm.expect(SquareFootage5Kto10K[\"Square Footage.Bins\"]).to.eql(3);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for Square Footage Range === 10K-20K\r",
							"pm.test(\"Validating Percentage for Square Footage Range === 10K-20K\", () => {\r",
							"    const SquareFootage10Kto20K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"10K-20K\");\r",
							"    pm.expect(SquareFootage10Kto20K[\"Percentage\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating TIV for Square Footage Range === 10K-20K\r",
							"pm.test(\"Validating TIV for Square Footage Range === 10K-20K\", () => {\r",
							"    const SquareFootage10Kto20K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"10K-20K\");\r",
							"    pm.expect(SquareFootage10Kto20K[\"TIV\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating Square Footage Range for Square Footage Range === 10K-20K\r",
							"pm.test(\"Validating Square Footage Range for Square Footage Range === 10K-20K\", () => {\r",
							"    const SquareFootage10Kto20K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"10K-20K\");\r",
							"    pm.expect(SquareFootage10Kto20K[\"Square Footage Range\"]).to.eql(\"10K-20K\");  \r",
							"});\r",
							"\r",
							"// Validating Square Footage.Bins for Square Footage Range === 10K-20K\r",
							"pm.test(\"Validating Square Footage.Bins for Square Footage Range === 10K-20K\", () => {\r",
							"    const SquareFootage10Kto20K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"10K-20K\");\r",
							"    pm.expect(SquareFootage10Kto20K[\"Square Footage.Bins\"]).to.eql(4);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for Square Footage Range === 20K-50K\r",
							"pm.test(\"Validating Percentage for Square Footage Range === 20K-50K\", () => {\r",
							"    const SquareFootage20Kto50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"20K-50K\");\r",
							"    pm.expect(SquareFootage20Kto50K[\"Percentage\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating TIV for Square Footage Range === 20K-50K\r",
							"pm.test(\"Validating TIV for Square Footage Range === 20K-50K\", () => {\r",
							"    const SquareFootage20Kto50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"20K-50K\");\r",
							"    pm.expect(SquareFootage20Kto50K[\"TIV\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating Square Footage Range for Square Footage Range === 20K-50K\r",
							"pm.test(\"Validating Square Footage Range for Square Footage Range === 20K-50K\", () => {\r",
							"    const SquareFootage20Kto50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"20K-50K\");\r",
							"    pm.expect(SquareFootage20Kto50K[\"Square Footage Range\"]).to.eql(\"20K-50K\");  \r",
							"});\r",
							"\r",
							"// Validating Square Footage.Bins for Square Footage Range === 20K-50K\r",
							"pm.test(\"Validating Square Footage.Bins for Square Footage Range === 20K-50K\", () => {\r",
							"    const SquareFootage20Kto50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \"20K-50K\");\r",
							"    pm.expect(SquareFootage20Kto50K[\"Square Footage.Bins\"]).to.eql(5);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for Square Footage Range === >50K\r",
							"pm.test(\"Validating Percentage for Square Footage Range === >50K\", () => {\r",
							"    const SquareFootageOver50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \">50K\");\r",
							"    pm.expect(SquareFootageOver50K[\"Percentage\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating TIV for Square Footage Range === >50K\r",
							"pm.test(\"Validating TIV for Square Footage Range === >50K\", () => {\r",
							"    const SquareFootageOver50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \">50K\");\r",
							"    pm.expect(SquareFootageOver50K[\"TIV\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating Square Footage Range for Square Footage Range === >50K\r",
							"pm.test(\"Validating Square Footage Range for Square Footage Range === >50K\", () => {\r",
							"    const SquareFootageOver50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \">50K\");\r",
							"    pm.expect(SquareFootageOver50K[\"Square Footage Range\"]).to.eql(\">50K\");  \r",
							"});\r",
							"\r",
							"// Validating Square Footage.Bins for Square Footage Range === >50K\r",
							"pm.test(\"Validating Square Footage.Bins for Square Footage Range === >50K\", () => {\r",
							"    const SquareFootageOver50K = responseJson.Value.Analysis0.find(item => item[\"Square Footage Range\"] === \">50K\");\r",
							"    pm.expect(SquareFootageOver50K[\"Square Footage.Bins\"]).to.eql(6);  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Square Footage\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/Floor Height range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							"\r",
							"// Validating Percentage for Floor Height Range === Unknown\r",
							"pm.test(\"Validating Percentage for Floor Height Range === Unknown\", () => {\r",
							"    const FloorHeightUnknown = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"Unknown\");\r",
							"    pm.expect(FloorHeightUnknown[\"Percentage\"]).to.eql(100); \r",
							"});\r",
							"\r",
							"// Validating TIV for Floor Height Range === Unknown\r",
							"pm.test(\"Validating TIV for Floor Height Range === Unknown\", () => {\r",
							"    const FloorHeightUnknown = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"Unknown\");\r",
							"    pm.expect(FloorHeightUnknown[\"TIV\"]).to.eql(3217803045004.221); \r",
							"});\r",
							"\r",
							"// Validating Floor Height Range for Floor Height Range === Unknown\r",
							"pm.test(\"Validating Floor Height Range for Floor Height Range === Unknown\", () => {\r",
							"    const FloorHeightUnknown = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"Unknown\");\r",
							"    pm.expect(FloorHeightUnknown[\"Floor Height Range\"]).to.eql(\"Unknown\"); \r",
							"});\r",
							"\r",
							"// Validating Floor Height.Bins for Floor Height Range === Unknown\r",
							"pm.test(\"Validating Floor Height.Bins for Floor Height Range === Unknown\", () => {\r",
							"    const FloorHeightUnknown = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"Unknown\");\r",
							"    pm.expect(FloorHeightUnknown[\"Floor Height.Bins\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Floor Height Range === <=500\r",
							"pm.test(\"Validating Percentage for Floor Height Range === <=500\", () => {\r",
							"    const FloorHeightgreatherthat500  = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"<=500\");\r",
							"    pm.expect(FloorHeightgreatherthat500 [\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Floor Height Range === <=500\r",
							"pm.test(\"Validating TIV for Floor Height Range === <=500\", () => {\r",
							"    const FloorHeightgreatherthat500  = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"<=500\");\r",
							"    pm.expect(FloorHeightgreatherthat500 [\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Floor Height Range for Floor Height Range === <=500\r",
							"pm.test(\"Validating Floor Height Range for Floor Height Range === <=500\", () => {\r",
							"    const FloorHeightgreatherthat500  = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"<=500\");\r",
							"    pm.expect(FloorHeightgreatherthat500 [\"Floor Height Range\"]).to.eql(\"<=500\"); \r",
							"});\r",
							"\r",
							"// Validating Floor Height.Bins for Floor Height Range === <=500\r",
							"pm.test(\"Validating Floor Height.Bins for Floor Height Range === <=500\", () => {\r",
							"    const FloorHeightgreatherthat500  = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"<=500\");\r",
							"    pm.expect(FloorHeightgreatherthat500 [\"Floor Height.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Floor Height Range === 500 - 1000\r",
							"pm.test(\"Validating Percentage for Floor Height Range === 500 - 1000\", () => {\r",
							"    const FloorHeight500to1000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"500 - 1000\");\r",
							"    pm.expect(FloorHeight500to1000[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Floor Height Range === 500 - 1000\r",
							"pm.test(\"Validating TIV for Floor Height Range === 500 - 1000\", () => {\r",
							"    const FloorHeight500to1000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"500 - 1000\");\r",
							"    pm.expect(FloorHeight500to1000[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Floor Height Range for Floor Height Range === 500 - 1000\r",
							"pm.test(\"Validating Floor Height Range for Floor Height Range === 500 - 1000\", () => {\r",
							"    const FloorHeight500to1000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"500 - 1000\");\r",
							"    pm.expect(FloorHeight500to1000[\"Floor Height Range\"]).to.eql(\"500 - 1000\"); \r",
							"});\r",
							"\r",
							"// Validating Floor Height.Bins for Floor Height Range === 500 - 1000\r",
							"pm.test(\"Validating Floor Height.Bins for Floor Height Range === 500 - 1000\", () => {\r",
							"    const FloorHeight500to1000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"500 - 1000\");\r",
							"    pm.expect(FloorHeight500to1000[\"Floor Height.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Validating Percentage for Floor Height Range === 1000 - 2000\r",
							"pm.test(\"Validating Percentage for Floor Height Range === 1000 - 2000\", () => {\r",
							"    const FloorHeight1000to2000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"1000 - 2000\");\r",
							"    pm.expect(FloorHeight1000to2000[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating TIV for Floor Height Range === 1000 - 2000\r",
							"pm.test(\"Validating TIV for Floor Height Range === 1000 - 2000\", () => {\r",
							"    const FloorHeight1000to2000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"1000 - 2000\");\r",
							"    pm.expect(FloorHeight1000to2000[\"TIV\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating Floor Height Range for Floor Height Range === 1000 - 2000\r",
							"pm.test(\"Validating Floor Height Range for Floor Height Range === 1000 - 2000\", () => {\r",
							"    const FloorHeight1000to2000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"1000 - 2000\");\r",
							"    pm.expect(FloorHeight1000to2000[\"Floor Height Range\"]).to.eql(\"1000 - 2000\"); \r",
							"});\r",
							"\r",
							"// Validating Floor Height.Bins for Floor Height Range === 1000 - 2000\r",
							"pm.test(\"Validating Floor Height.Bins for Floor Height Range === 1000 - 2000\", () => {\r",
							"    const FloorHeight1000to2000 = responseJson.Value.Analysis0.find(item => item[\"Floor Height Range\"] === \"1000 - 2000\");\r",
							"    pm.expect(FloorHeight1000to2000[\"Floor Height.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"Floor Height\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiv/TIV Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"//const data1 = JSON(responseJson);\r",
							"\r",
							"// Validating Percentage for TIV Range === <1M\r",
							"pm.test(\"Validating Percentage for TIV Range === <1M\", () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"<1M\");\r",
							"    pm.expect(TIVRange1M[\"Percentage\"].toFixed(3)).to.eql(2.679633034711431.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === <1M\r",
							"pm.test(\"Validating TIV for TIV Range === <1M\", () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"<1M\");\r",
							"    pm.expect(TIVRange1M[\"TIV\"].toFixed(3)).to.eql(86225313385.892.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === <1M\r",
							"pm.test(\"Validating TIV Range for TIV Range === <1M\", () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"<1M\");\r",
							"    pm.expect(TIVRange1M[\"TIV Range\"]).to.eql(\"<1M\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === <1M\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === <1M\", () => {\r",
							"    const TIVRange1M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"<1M\");\r",
							"    pm.expect(TIVRange1M[\"TIV.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Validating Percentage for TIV Range === 1M - 5M\r",
							"pm.test(\"Validating Percentage for TIV Range === 1M - 5M\", () => {\r",
							"    const TIVRange1M5M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"1M -5M\");\r",
							"    pm.expect(TIVRange1M5M[\"Percentage\"].toFixed(3)).to.eql(6.30204686483092.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === 1M - 5M\r",
							"pm.test(\"Validating TIV for TIV Range === 1M - 5M\", () => {\r",
							"    const TIVRange1M5M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"1M -5M\");\r",
							"    pm.expect(TIVRange1M5M[\"TIV\"].toFixed(3)).to.eql(202787455914.138.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === 1M - 5M\r",
							"pm.test(\"Validating TIV Range for TIV Range === 1M - 5M\", () => {\r",
							"    const TIVRange1M5M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"1M -5M\");\r",
							"    pm.expect(TIVRange1M5M[\"TIV Range\"]).to.eql(\"1M -5M\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === 1M - 5M\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === 1M - 5M\", () => {\r",
							"    const TIVRange1M5M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"1M -5M\");\r",
							"    pm.expect(TIVRange1M5M[\"TIV.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Repeat the above blocks for the remaining rows in the \"TIV Range\" data\r",
							"\r",
							"// Validating Percentage for TIV Range === 5M – 10M\r",
							"pm.test(\"Validating Percentage for TIV Range === 5M – 10M\", () => {\r",
							"    const TIVRange5M10M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"5M – 10M\");\r",
							"    pm.expect(TIVRange5M10M[\"Percentage\"].toFixed(3)).to.eql(5.548891834323796.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === 5M – 10M\r",
							"pm.test(\"Validating TIV for TIV Range === 5M – 10M\", () => {\r",
							"    const TIVRange5M10M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"5M – 10M\");\r",
							"    pm.expect(TIVRange5M10M[\"TIV\"].toFixed(3)).to.eql(178552410408.874.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === 5M – 10M\r",
							"pm.test(\"Validating TIV Range for TIV Range === 5M – 10M\", () => {\r",
							"    const TIVRange5M10M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"5M – 10M\");\r",
							"    pm.expect(TIVRange5M10M[\"TIV Range\"]).to.eql(\"5M – 10M\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === 5M – 10M\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === 5M – 10M\", () => {\r",
							"    const TIVRange5M10M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"5M – 10M\");\r",
							"    pm.expect(TIVRange5M10M[\"TIV.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Validating Percentage for TIV Range === 10M - 50M\r",
							"pm.test(\"Validating Percentage for TIV Range === 10M - 50M\", () => {\r",
							"    const TIVRange10M50M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"10M -50M\");\r",
							"    pm.expect(TIVRange10M50M[\"Percentage\"].toFixed(3)).to.eql(23.314610012786865.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === 10M - 50M\r",
							"pm.test(\"Validating TIV for TIV Range === 10M - 50M\", () => {\r",
							"    const TIVRange10M50M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"10M -50M\");\r",
							"    pm.expect(TIVRange10M50M[\"TIV\"].toFixed(3)).to.eql(750218230922.367.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === 10M - 50M\r",
							"pm.test(\"Validating TIV Range for TIV Range === 10M - 50M\", () => {\r",
							"    const TIVRange10M50M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"10M -50M\");\r",
							"    pm.expect(TIVRange10M50M[\"TIV Range\"]).to.eql(\"10M -50M\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === 10M - 50M\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === 10M - 50M\", () => {\r",
							"    const TIVRange10M50M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"10M -50M\");\r",
							"    pm.expect(TIVRange10M50M[\"TIV.Bins\"]).to.eql(4); \r",
							"});\r",
							"\r",
							"// Repeat the above blocks for the remaining rows in the \"TIV Range\" data\r",
							"\r",
							"// Validating Percentage for TIV Range === 50M-100M\r",
							"pm.test(\"Validating Percentage for TIV Range === 50M-100M\", () => {\r",
							"    const TIVRange50M100M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"50M-100M\");\r",
							"    pm.expect(TIVRange50M100M[\"Percentage\"].toFixed(3)).to.eql(10.322100717842591.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === 50M-100M\r",
							"pm.test(\"Validating TIV for TIV Range === 50M-100M\", () => {\r",
							"    const TIVRange50M100M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"50M-100M\");\r",
							"    pm.expect(TIVRange50M100M[\"TIV\"].toFixed(3)).to.eql(332144871207.165.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === 50M-100M\r",
							"pm.test(\"Validating TIV Range for TIV Range === 50M-100M\", () => {\r",
							"    const TIVRange50M100M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"50M-100M\");\r",
							"    pm.expect(TIVRange50M100M[\"TIV Range\"]).to.eql(\"50M-100M\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === 50M-100M\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === 50M-100M\", () => {\r",
							"    const TIVRange50M100M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"50M-100M\");\r",
							"    pm.expect(TIVRange50M100M[\"TIV.Bins\"]).to.eql(5); \r",
							"});\r",
							"\r",
							"// Validating Percentage for TIV Range === 100M-500M\r",
							"pm.test(\"Validating Percentage for TIV Range === 100M-500M\", () => {\r",
							"    const TIVRange100M500M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"100M-500M\");\r",
							"    pm.expect(TIVRange100M500M[\"Percentage\"].toFixed(3)).to.eql(24.25364793450696.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === 100M-500M\r",
							"pm.test(\"Validating TIV for TIV Range === 100M-500M\", () => {\r",
							"    const TIVRange100M500M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"100M-500M\");\r",
							"    pm.expect(TIVRange100M500M[\"TIV\"].toFixed(3)).to.eql(780434621761.225.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === 100M-500M\r",
							"pm.test(\"Validating TIV Range for TIV Range === 100M-500M\", () => {\r",
							"    const TIVRange100M500M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"100M-500M\");\r",
							"    pm.expect(TIVRange100M500M[\"TIV Range\"]).to.eql(\"100M-500M\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === 100M-500M\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === 100M-500M\", () => {\r",
							"    const TIVRange100M500M = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"100M-500M\");\r",
							"    pm.expect(TIVRange100M500M[\"TIV.Bins\"]).to.eql(6); \r",
							"});\r",
							"\r",
							"// Validating Percentage for TIV Range === 500M-1B\r",
							"pm.test(\"Validating Percentage for TIV Range === 500M-1B\", () => {\r",
							"    const TIVRange500M1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"500M-1B\");\r",
							"    pm.expect(TIVRange500M1B[\"Percentage\"].toFixed(3)).to.eql(11.296429357263715.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === 500M-1B\r",
							"pm.test(\"Validating TIV for TIV Range === 500M-1B\", () => {\r",
							"    const TIVRange500M1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"500M-1B\");\r",
							"    pm.expect(TIVRange500M1B[\"TIV\"].toFixed(3)).to.eql(363496847834.8095.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === 500M-1B\r",
							"pm.test(\"Validating TIV Range for TIV Range === 500M-1B\", () => {\r",
							"    const TIVRange500M1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"500M-1B\");\r",
							"    pm.expect(TIVRange500M1B[\"TIV Range\"]).to.eql(\"500M-1B\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === 500M-1B\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === 500M-1B\", () => {\r",
							"    const TIVRange500M1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \"500M-1B\");\r",
							"    pm.expect(TIVRange500M1B[\"TIV.Bins\"]).to.eql(7); \r",
							"});\r",
							"\r",
							"// Validating Percentage for TIV Range === >1B\r",
							"pm.test(\"Validating Percentage for TIV Range === >1B\", () => {\r",
							"    const TIVRange1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \">1B\");\r",
							"    pm.expect(TIVRange1B[\"Percentage\"].toFixed(3)).to.eql(16.28264024373373.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV for TIV Range === >1B\r",
							"pm.test(\"Validating TIV for TIV Range === >1B\", () => {\r",
							"    const TIVRange1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \">1B\");\r",
							"    pm.expect(TIVRange1B[\"TIV\"].toFixed(3)).to.eql(523943293569.98553.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating TIV Range for TIV Range === >1B\r",
							"pm.test(\"Validating TIV Range for TIV Range === >1B\", () => {\r",
							"    const TIVRange1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \">1B\");\r",
							"    pm.expect(TIVRange1B[\"TIV Range\"]).to.eql(\">1B\"); \r",
							"});\r",
							"\r",
							"// Validating TIV.Bins for TIV Range === >1B\r",
							"pm.test(\"Validating TIV.Bins for TIV Range === >1B\", () => {\r",
							"    const TIVRange1B = responseJson.Value.Analysis0.find(item => item[\"TIV Range\"] === \">1B\");\r",
							"    pm.expect(TIVRange1B[\"TIV.Bins\"]).to.eql(8); \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"TIV\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"TIV\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gross Exposed Limit/Gross Exposed Limit Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === <1M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === <1M\", () => {\r",
							"    const ContractLossRange1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRange1M[\"Percentage\"].toFixed(3)).to.eql(14.323892153652714.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === <1M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === <1M\", () => {\r",
							"    const ContractLossRange1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRange1M[\"ContractLoss_Value All Types_EL\"].toFixed(3)).to.eql(1266770690.0902028.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === <1M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === <1M\", () => {\r",
							"    const ContractLossRange1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRange1M[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\"<1M\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === <1M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === <1M\", () => {\r",
							"    const ContractLossRange1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRange1M[\"ContractLoss_Value All Types_EL.Bins\"]).to.eql(1); \r",
							"});\r",
							"\r",
							"// Repeat the above blocks for the remaining rows in the \"ContractLoss_Value All Types_EL\" data\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === 1M -5M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"Percentage\"].toFixed(3)).to.eql(20.598230801705498.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 1M -5M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"ContractLoss_Value All Types_EL\"].toFixed(3)).to.eql(1821658161.5814347.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 1M -5M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\"1M -5M\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 1M -5M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"ContractLoss_Value All Types_EL.Bins\"]).to.eql(2); \r",
							"});\r",
							"\r",
							"// Repeat the above blocks for the remaining rows in the \"ContractLoss_Value All Types_EL\" data\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === 5M – 10M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"Percentage\"].toFixed(3)).to.eql(12.84360942376788.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_EL\"].toFixed(3)).to.eql(1135858033.4498332.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\"5M – 10M\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_EL.Bins\"]).to.eql(3); \r",
							"});\r",
							"\r",
							"// Repeat the above blocks for the remaining rows in the \"ContractLoss_Value All Types_EL\" data\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === 10M -50M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"Percentage\"].toFixed(3)).to.eql(31.728090030550117.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_EL\"].toFixed(3)).to.eql(2805956235.365448.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 10M -50M\", ()  => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\"10M -50M\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 10M -50M\", ()=> {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_EL.Bins\"]).to.eql(4); \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === 50M-100M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === 50M-100M\", () => {\r",
							"    const ContractLossRange50M100M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"50M-100M\");\r",
							"    pm.expect(ContractLossRange50M100M[\"Percentage\"].toFixed(3)).to.eql(12.250751677698393.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 50M-100M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 50M-100M\", () => {\r",
							"    const ContractLossRange50M100M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"50M-100M\");\r",
							"    pm.expect(ContractLossRange50M100M[\"ContractLoss_Value All Types_EL\"].toFixed(3)).to.eql(1083427115.3685174.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 50M-100M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 50M-100M\", () => {\r",
							"    const ContractLossRange50M100M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"50M-100M\");\r",
							"    pm.expect(ContractLossRange50M100M[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\"50M-100M\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 50M-100M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 50M-100M\", ()=> {\r",
							"    const ContractLossRange50M100M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"50M-100M\");\r",
							"    pm.expect(ContractLossRange50M100M[\"ContractLoss_Value All Types_EL.Bins\"]).to.eql(5); \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === 100M-500M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === 100M-500M\",  () => {\r",
							"    const ContractLossRange100M500M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"100M-500M\");\r",
							"    pm.expect(ContractLossRange100M500M[\"Percentage\"].toFixed(3)).to.eql(8.255425912625402.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 100M-500M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 100M-500M\", () => {\r",
							"    const ContractLossRange100M500M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"100M-500M\");\r",
							"    pm.expect(ContractLossRange100M500M[\"ContractLoss_Value All Types_EL\"].toFixed(3)).to.eql(730090080.8345035.toFixed(3)); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 100M-500M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 100M-500M\", ()=> {\r",
							"    const ContractLossRange100M500M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"100M-500M\");\r",
							"    pm.expect(ContractLossRange100M500M[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\"100M-500M\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 100M-500M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 100M-500M\", ()=> {\r",
							"    const ContractLossRange100M500M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"100M-500M\");\r",
							"    pm.expect(ContractLossRange100M500M[\"ContractLoss_Value All Types_EL.Bins\"]).to.eql(6); \r",
							"});\r",
							"\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === 500M-1B\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 500M-1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"ContractLoss_Value All Types_EL\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 500M-1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\"500M-1B\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 500M-1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"ContractLoss_Value All Types_EL.Bins\"]).to.eql(7); \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_EL Range === >1B\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_EL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \">1B\");\r",
							"    pm.expect(ContractLossRangeGreaterThan1B[\"Percentage\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === >1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL for ContractLoss_Value All Types_EL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \">1B\");\r",
							"    pm.expect(ContractLossRangeGreaterThan1B[\"ContractLoss_Value All Types_EL\"]).to.eql(0); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === >1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL Range for ContractLoss_Value All Types_EL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \">1B\");\r",
							"    pm.expect(ContractLossRangeGreaterThan1B[\"ContractLoss_Value All Types_EL Range\"]).to.eql(\">1B\"); \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === >1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_EL.Bins for ContractLoss_Value All Types_EL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_EL Range\"] === \">1B\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"ContractLoss_Value All Types_EL\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"ContractLoss_Value All Types_EL\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gross Loss/Gross Loss Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"const responseJson = pm.response.json();\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === <1M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === <1M\", () => {\r",
							"    const ContractLossRangeLessThan1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRangeLessThan1M[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === <1M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === <1M\", () => {\r",
							"    const ContractLossRangeLessThan1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRangeLessThan1M[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === <1M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === <1M\", () => {\r",
							"    const ContractLossRangeLessThan1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRangeLessThan1M[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\"<1M\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === <1M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === <1M\", () => {\r",
							"    const ContractLossRangeLessThan1M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"<1M\");\r",
							"    pm.expect(ContractLossRangeLessThan1M[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(1);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === 1M -5M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 1M -5M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 1M -5M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\"1M -5M\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 1M -5M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 1M -5M\", () => {\r",
							"    const ContractLossRange1M5M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"1M -5M\");\r",
							"    pm.expect(ContractLossRange1M5M[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(2);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\"5M – 10M\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(3);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\"10M -50M\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(4);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\"5M – 10M\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 5M – 10M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 5M – 10M\", () => {\r",
							"    const ContractLossRange5M10M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"5M – 10M\");\r",
							"    pm.expect(ContractLossRange5M10M[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(3);  \r",
							"});\r",
							"\r",
							" \r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\"10M -50M\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 10M -50M\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 10M -50M\", () => {\r",
							"    const ContractLossRange10M50M = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"10M -50M\");\r",
							"    pm.expect(ContractLossRange10M50M[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(4);  \r",
							"});\r",
							"\r",
							" \r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === 500M-1B\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 500M-1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 500M-1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\"500M-1B\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 500M-1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === 500M-1B\", () => {\r",
							"    const ContractLossRange500M1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \"500M-1B\");\r",
							"    pm.expect(ContractLossRange500M1B[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(7);  \r",
							"});\r",
							"\r",
							"// Validating Percentage for ContractLoss_Value All Types_GL Range === >1B\r",
							"pm.test(\"Validating Percentage for ContractLoss_Value All Types_GL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \">1B\");\r",
							"    pm.expect(ContractLossRangeGreaterThan1B[\"Percentage\"]).to.be.null;  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === >1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL for ContractLoss_Value All Types_GL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \">1B\");\r",
							"    pm.expect(ContractLossRangeGreaterThan1B[\"ContractLoss_Value All Types_GL\"]).to.eql(0);  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === >1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL Range for ContractLoss_Value All Types_GL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \">1B\");\r",
							"    pm.expect(ContractLossRangeGreaterThan1B[\"ContractLoss_Value All Types_GL Range\"]).to.eql(\">1B\");  \r",
							"});\r",
							"\r",
							"// Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === >1B\r",
							"pm.test(\"Validating ContractLoss_Value All Types_GL.Bins for ContractLoss_Value All Types_GL Range === >1B\", () => {\r",
							"    const ContractLossRangeGreaterThan1B = responseJson.Value.Analysis0.find(item => item[\"ContractLoss_Value All Types_GL Range\"] === \">1B\");\r",
							"    pm.expect(ContractLossRangeGreaterThan1B[\"ContractLoss_Value All Types_GL.Bins\"]).to.eql(8);  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"GroupByMeasures\": [\r\n        \"ContractLoss_Value All Types_GL\"\r\n    ],\r\n    \"GroupByAttributes\": [\r\n        \"ContractLoss_Value All Types_GL\"\r\n    ],\r\n    \"includeAllBins\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://Alpha-api.eigenrisk.com/get-contribution-details",
					"protocol": "https",
					"host": [
						"Alpha-api",
						"eigenrisk",
						"com"
					],
					"path": [
						"get-contribution-details"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}